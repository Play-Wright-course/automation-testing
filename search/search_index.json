{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to JavaScript &amp; Playwright with java Docs","text":"<p>This documentation site contains tutorials, examples, and references for JavaScript concepts and Playwright automation with java.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Click on a topic in the navigation sidebar.</li> <li>Follow the examples and code snippets.</li> <li>Use this documentation as a reference for coding interviews and automation projects.</li> </ol> <p>\ud83d\ude80 Happy Learning! Keep practicing and building your JavaScript and Playwright Automation with Java skills.</p>"},{"location":"ETL-Testing/roadmap/","title":"\ud83e\udde0 ETL Testing with SQL \u2014 Complete Roadmap","text":""},{"location":"ETL-Testing/roadmap/#goal","title":"\ud83c\udfaf Goal","text":"<p>Learn ETL (Extract, Transform, Load) testing \u2014 understanding data flow, transformations, and validation \u2014 using SQL as the core testing language.</p>"},{"location":"ETL-Testing/roadmap/#phase-1-etl-data-basics","title":"\ud83e\udde9 Phase 1: ETL &amp; Data Basics","text":""},{"location":"ETL-Testing/roadmap/#1-what-is-etl","title":"1. What is ETL?","text":"<ul> <li>Extract \u2192 Get data from source systems (CSV, APIs, DBs)</li> <li>Transform \u2192 Clean, enrich, or aggregate data</li> <li>Load \u2192 Move transformed data to a target (e.g., Data Warehouse)</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-why-etl-testing","title":"2. Why ETL Testing?","text":"<ul> <li>Ensure data accuracy, completeness, and consistency</li> <li>Validate that transformations and business rules are correctly applied</li> <li>Catch issues early in data pipelines</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-key-etl-testing-concepts","title":"3. Key ETL Testing Concepts","text":"Concept Description Source to Target Mapping Defines how fields move from source \u2192 staging \u2192 target Data Completeness Verify all records moved correctly Data Accuracy Ensure transformations follow business logic Data Integrity Primary keys, foreign keys maintained Data Duplication Check duplicates before/after load Reconciliation Row count, sum, average, etc."},{"location":"ETL-Testing/roadmap/#phase-2-sql-foundations-for-etl-testing","title":"\ud83e\uddf1 Phase 2: SQL Foundations (for ETL Testing)","text":""},{"location":"ETL-Testing/roadmap/#1-sql-basics","title":"1. SQL Basics","text":"<ul> <li>SELECT, FROM, WHERE, ORDER BY</li> <li>DISTINCT, LIMIT, TOP</li> <li>BETWEEN, IN, LIKE, IS NULL</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-joins-very-important","title":"2. Joins (very important)","text":"<ul> <li>INNER JOIN</li> <li>LEFT / RIGHT JOIN</li> <li>FULL JOIN</li> <li>CROSS JOIN</li> <li>SELF JOIN</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-aggregations","title":"3. Aggregations","text":"<ul> <li>COUNT, SUM, AVG, MIN, MAX</li> <li>GROUP BY, HAVING</li> </ul>"},{"location":"ETL-Testing/roadmap/#4-subqueries-and-ctes","title":"4. Subqueries and CTEs","text":"<ul> <li>Write subqueries for comparing source and target data</li> <li>Use CTE (WITH clause) for multi-step transformations</li> </ul>"},{"location":"ETL-Testing/roadmap/#5-data-validation-queries","title":"5. Data Validation Queries","text":"<pre><code>-- Count comparison\nSELECT COUNT(*) FROM source_table;\nSELECT COUNT(*) FROM target_table;\n\n-- Null value check\nSELECT * FROM target_table WHERE column_name IS NULL;\n\n-- Duplicate check\nSELECT column_name, COUNT(*)\nFROM target_table\nGROUP BY column_name\nHAVING COUNT(*) &gt; 1;\n</code></pre>"},{"location":"ETL-Testing/roadmap/#phase-3-etl-testing-process","title":"\u2699\ufe0f Phase 3: ETL Testing Process","text":""},{"location":"ETL-Testing/roadmap/#1-understanding-etl-workflow","title":"1. Understanding ETL Workflow","text":"<ul> <li>Source systems \u2192 Staging area \u2192 Data warehouse \u2192 Reports</li> <li>Identify data flow and transformations</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-test-planning","title":"2. Test Planning","text":"<ul> <li>Read mapping documents (S2T)</li> <li> <p>Identify test cases:</p> </li> <li> <p>Row count validation</p> </li> <li>Data truncation check</li> <li>Transformation logic validation</li> <li>Incremental load testing</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-test-execution","title":"3. Test Execution","text":"<ul> <li>Use SQL to query source and target tables</li> <li> <p>Validate:</p> </li> <li> <p>Counts match</p> </li> <li>Business rules applied</li> <li>Data types consistent</li> <li>Keys maintained</li> </ul>"},{"location":"ETL-Testing/roadmap/#4-common-etl-testing-techniques","title":"4. Common ETL Testing Techniques","text":"Technique Description Source vs Target Compare raw data Transformation Validation Check transformation logic Metadata Validation Column names, data types Incremental Load Testing Delta data loads Regression Testing After ETL job changes"},{"location":"ETL-Testing/roadmap/#phase-4-etl-tools-and-environments","title":"\ud83e\uddf0 Phase 4: ETL Tools and Environments","text":""},{"location":"ETL-Testing/roadmap/#1-hands-on-with-etl-tools","title":"1. Hands-on with ETL Tools","text":"<p>Pick any 1 or 2 for practice:</p> <ul> <li>Talend Open Studio</li> <li>Informatica PowerCenter</li> <li>Pentaho Kettle (PDI)</li> <li>Apache NiFi</li> <li>SSIS (SQL Server Integration Services)</li> </ul> <p>Learn:</p> <ul> <li>Creating mappings/workflows</li> <li>Running ETL jobs</li> <li>Viewing logs and error handling</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-data-warehouse-tools","title":"2. Data Warehouse Tools","text":"<ul> <li>Snowflake</li> <li>Amazon Redshift</li> <li>Google BigQuery</li> <li>Azure Synapse</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-scheduling-orchestration","title":"3. Scheduling / Orchestration","text":"<ul> <li>Airflow, Oozie, or Control-M for job orchestration</li> </ul>"},{"location":"ETL-Testing/roadmap/#phase-5-advanced-sql-for-etl-testing","title":"\ud83e\udde0 Phase 5: Advanced SQL for ETL Testing","text":""},{"location":"ETL-Testing/roadmap/#1-window-functions","title":"1. Window Functions","text":"<ul> <li>ROW_NUMBER(), RANK(), DENSE_RANK()</li> <li>LAG(), LEAD()</li> <li>SUM() OVER(), COUNT() OVER()</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-complex-transformations","title":"2. Complex Transformations","text":"<ul> <li>CASE WHEN</li> <li>PIVOT / UNPIVOT</li> <li>String manipulation (SUBSTR, CONCAT, REPLACE)</li> <li>Date functions (DATEADD, DATEDIFF, EXTRACT)</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-comparing-source-vs-target","title":"3. Comparing Source vs Target","text":"<pre><code>SELECT * FROM source_table\nMINUS\nSELECT * FROM target_table;\n</code></pre>"},{"location":"ETL-Testing/roadmap/#phase-6-real-time-etl-testing-scenarios","title":"\ud83e\uddea Phase 6: Real-Time ETL Testing Scenarios","text":""},{"location":"ETL-Testing/roadmap/#1-full-load-testing","title":"1. Full Load Testing","text":"<ul> <li>Validate initial data load</li> <li>Compare record counts and sample data</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-incremental-load-testing","title":"2. Incremental Load Testing","text":"<ul> <li>Validate delta load logic (new/updated data)</li> <li>Verify duplicates aren\u2019t inserted</li> </ul>"},{"location":"ETL-Testing/roadmap/#3-historical-data-testing","title":"3. Historical Data Testing","text":"<ul> <li>Validate partitions by date</li> <li>Check archive tables</li> </ul>"},{"location":"ETL-Testing/roadmap/#4-data-reconciliation-testing","title":"4. Data Reconciliation Testing","text":"<ul> <li>Row count match between systems</li> <li>Sum/average of numeric columns match</li> </ul>"},{"location":"ETL-Testing/roadmap/#phase-7-reporting-automation","title":"\ud83d\udcca Phase 7: Reporting &amp; Automation","text":""},{"location":"ETL-Testing/roadmap/#1-reporting","title":"1. Reporting","text":"<ul> <li>Use Excel / SQL scripts to show validation summary</li> <li>Create audit reports</li> </ul>"},{"location":"ETL-Testing/roadmap/#2-automation","title":"2. Automation","text":"<p>Automate ETL tests using:</p> <ul> <li>Python + SQLAlchemy / pyodbc</li> <li>Selenium + Database Testing</li> <li>Apache Airflow sensors</li> <li>Rest Assured for API-based ETL sources</li> </ul>"},{"location":"ETL-Testing/roadmap/#phase-8-project-practice","title":"\ud83e\udde9 Phase 8: Project Practice","text":""},{"location":"ETL-Testing/roadmap/#mini-projects","title":"Mini Projects","text":"<ol> <li> <p>CSV \u2192 Staging (MySQL) \u2192 Target (PostgreSQL)    Perform transformations (e.g., uppercase, date formats)    Write SQL validations for each stage</p> </li> <li> <p>Talend / SSIS Job    Create simple ETL flow    Validate using SQL scripts</p> </li> <li> <p>Airflow DAG    Automate ETL job    Log test results in table</p> </li> </ol>"},{"location":"ETL-Testing/roadmap/#recommended-learning-resources","title":"\ud83d\udcda Recommended Learning Resources","text":""},{"location":"ETL-Testing/roadmap/#books","title":"Books","text":"<ul> <li>The Data Warehouse ETL Toolkit by Ralph Kimball</li> <li>Practical SQL by Anthony DeBarros</li> </ul>"},{"location":"ETL-Testing/roadmap/#online-practice","title":"Online Practice","text":"<ul> <li>LeetCode SQL</li> <li>Mode SQL Tutorial</li> <li>Kaggle datasets</li> </ul>"},{"location":"ETL-Testing/roadmap/#reference-documentation-links","title":"\ud83d\udd17 Reference Documentation Links","text":""},{"location":"ETL-Testing/roadmap/#sql","title":"SQL","text":"<ul> <li>MySQL Documentation</li> <li>PostgreSQL Docs</li> <li>SQL Server Docs</li> </ul>"},{"location":"ETL-Testing/roadmap/#etl-tools","title":"ETL Tools","text":"<ul> <li>Talend Open Studio Docs</li> <li>Informatica PowerCenter Guide</li> <li>Pentaho PDI Docs</li> <li>Apache NiFi Docs</li> </ul>"},{"location":"ETL-Testing/roadmap/#orchestration","title":"Orchestration","text":"<ul> <li>Apache Airflow Docs</li> </ul>"},{"location":"ETL-Testing/roadmap/#cloud-data-warehouses","title":"Cloud Data Warehouses","text":"<ul> <li>Snowflake Docs</li> <li>BigQuery Docs</li> <li>Amazon Redshift Docs</li> </ul>"},{"location":"ETL-Testing/roadmap/#final-tips","title":"\ud83e\udded Final Tips","text":"<p>\u2705 Master SQL Joins + Aggregations + Window Functions \u2705 Understand data flows in ETL tools \u2705 Practice S2T mapping validations \u2705 Try end-to-end project (source \u2192 target) \u2705 Learn automation for data validation</p> <p>Author: ChatGPT \u2014 ETL Testing Roadmap with SQL</p>"},{"location":"java-concepts/abstraction/","title":"Abstraction in Java","text":""},{"location":"java-concepts/abstraction/#definition","title":"\ud83d\udccc Definition","text":"<p>Abstraction is an OOP concept that hides the internal implementation details and shows only the functionality to the user. It allows developers to focus on what an object does instead of how it does it.</p> <p>In Java, abstraction can be achieved using:</p> <ul> <li>Abstract Classes</li> <li>Interfaces</li> </ul>"},{"location":"java-concepts/abstraction/#why-abstraction","title":"\ud83d\udd11 Why Abstraction?","text":"<ul> <li>Simplifies complex systems by hiding unnecessary details.</li> <li>Focus on essential features rather than implementation.</li> <li>Code maintainability \u2192 changes in implementation don\u2019t affect users.</li> <li>Supports polymorphism.</li> </ul>"},{"location":"java-concepts/abstraction/#key-features","title":"\u2705 Key Features","text":"<ol> <li>Abstract Classes: Can have abstract (no body) and non-abstract methods.</li> <li>Interfaces: Only method signatures (Java 8+ allows default and static methods).</li> <li>Hides implementation details from user.</li> <li>Supports multiple inheritance (via interfaces).</li> </ol>"},{"location":"java-concepts/abstraction/#example-abstract-class","title":"\ud83d\udcdd Example: Abstract Class","text":"<pre><code>abstract class Vehicle {\n    abstract void start();  // abstract method\n\n    void stop() {           // concrete method\n        System.out.println(\"Vehicle stopped\");\n    }\n}\n\nclass Car extends Vehicle {\n    @Override\n    void start() {\n        System.out.println(\"Car started\");\n    }\n}\n\npublic class AbstractionDemo {\n    public static void main(String[] args) {\n        Vehicle myCar = new Car();\n        myCar.start(); // Car started\n        myCar.stop();  // Vehicle stopped\n    }\n}\n</code></pre> <p>Explanation: Abstract method <code>start()</code> is implemented in child class, while <code>stop()</code> can be used as is.</p>"},{"location":"java-concepts/abstraction/#example-interface","title":"\ud83d\udcdd Example: Interface","text":"<pre><code>interface Drawable {\n    void draw();  // method signature only\n}\n\nclass Circle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing Circle\");\n    }\n}\n\nclass Rectangle implements Drawable {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing Rectangle\");\n    }\n}\n\npublic class InterfaceDemo {\n    public static void main(String[] args) {\n        Drawable c = new Circle();\n        Drawable r = new Rectangle();\n\n        c.draw(); // Drawing Circle\n        r.draw(); // Drawing Rectangle\n    }\n}\n</code></pre> <p>Explanation: Users can call <code>draw()</code> without knowing implementation details.</p>"},{"location":"java-concepts/abstraction/#real-world-example-in-selenium-java-framework","title":"\ud83d\udd39 Real-World Example in Selenium Java Framework","text":"<p>In Selenium Page Object Model, Abstraction is used in BasePage / Page Objects.</p> <pre><code>import org.openqa.selenium.WebDriver;\n\npublic abstract class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n\n    public abstract void openPage();  // abstract method\n}\n\npublic class LoginPage extends BasePage {\n    public LoginPage(WebDriver driver) {\n        super(driver);\n    }\n\n    @Override\n    public void openPage() {\n        driver.get(\"https://example.com/login\");\n    }\n\n    public void login(String user, String pass) {\n        // enter username/password and click login\n    }\n}\n</code></pre> <p>Explanation: Test scripts interact with <code>openPage()</code> and <code>login()</code> without worrying about implementation.</p>"},{"location":"java-concepts/abstraction/#real-world-example-in-java-playwright-framework","title":"\ud83d\udd39 Real-World Example in Java Playwright Framework","text":"<pre><code>import com.microsoft.playwright.Page;\n\npublic abstract class BasePage {\n    protected Page page;\n\n    public BasePage(Page page) {\n        this.page = page;\n    }\n\n    public abstract void openPage();\n}\n\npublic class LoginPage extends BasePage {\n    public LoginPage(Page page) {\n        super(page);\n    }\n\n    @Override\n    public void openPage() {\n        page.navigate(\"https://example.com/login\");\n    }\n\n    public void login(String user, String pass) {\n        page.locator(\"#username\").fill(user);\n        page.locator(\"#password\").fill(pass);\n        page.locator(\"#loginBtn\").click();\n    }\n}\n</code></pre> <p>Explanation: Users can call <code>openPage()</code> and <code>login()</code> without knowing underlying Playwright code.</p>"},{"location":"java-concepts/abstraction/#advantages-of-abstraction","title":"\u2b50 Advantages of Abstraction","text":"<ol> <li>Simplifies complex systems by hiding details.</li> <li>Promotes code reusability and maintainability.</li> <li>Enhances security by exposing only necessary functionality.</li> <li>Supports polymorphism and flexible framework design.</li> </ol>"},{"location":"java-concepts/abstraction/#summary","title":"\ud83d\udccc Summary","text":"<p>Abstraction = Hiding Implementation + Showing Functionality</p> <ul> <li>Use abstract classes or interfaces.</li> <li>Users interact with methods without knowing details.</li> <li>Widely used in automation frameworks like Selenium and Playwright for maintainable Page Object Model design.</li> </ul>"},{"location":"java-concepts/code-Oppos-concept/","title":"OOP Concepts Java \u2013 Examples 1-20 with Explanation","text":""},{"location":"java-concepts/code-Oppos-concept/#example-1-encapsulation","title":"Example 1 \u2013 Encapsulation","text":"<pre><code>class Student {\n    private int marks;\n    public void setMarks(int marks) {\n        this.marks = marks &gt; 100 ? 100 : marks;\n    }\n    public int getMarks() {\n        return marks;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Student s = new Student();\n        s.setMarks(120);\n        System.out.println(s.getMarks());\n    }\n}\n</code></pre> <p>Answer: 100 Explanation: marks is private. setMarks(120) checks &gt;100 \u2192 sets marks = 100. getMarks() returns 100.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-2-encapsulation","title":"Example 2 \u2013 Encapsulation","text":"<pre><code>class Bank {\n    private double balance = 1000;\n    public void withdraw(double amount) {\n        if(amount &lt;= balance) balance -= amount;\n        else balance = 0;\n    }\n    public double getBalance() {\n        return balance;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Bank b = new Bank();\n        b.withdraw(1200);\n        System.out.println(b.getBalance());\n    }\n}\n</code></pre> <p>Answer: 0.0 Explanation: withdraw(1200) &gt; balance \u2192 balance = 0.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-3-inheritance","title":"Example 3 \u2013 Inheritance","text":"<pre><code>class Vehicle {\n    void move() {\n        System.out.println(\"Vehicle moves\");\n    }\n}\n\nclass Car extends Vehicle {\n    void move() {\n        System.out.println(\"Car moves fast\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Vehicle v = new Car();\n        v.move();\n    }\n}\n</code></pre> <p>Answer: Car moves fast Explanation: Vehicle reference points to Car object \u2192 runtime method overriding.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-4-inheritance-polymorphism","title":"Example 4 \u2013 Inheritance + Polymorphism","text":"<pre><code>class Animal {\n    void sound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void sound() {\n        System.out.println(\"Bark\");\n    }\n}\n\nclass Cat extends Animal {\n    void sound() {\n        System.out.println(\"Meow\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Animal a1 = new Dog();\n        Animal a2 = new Cat();\n        a1.sound();\n        a2.sound();\n    }\n}\n</code></pre> <p>Answer: Bark Meow Explanation: Parent reference calls child overridden methods \u2192 runtime polymorphism.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-5-polymorphism-overloading","title":"Example 5 \u2013 Polymorphism (Overloading)","text":"<pre><code>class Calculator {\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    int add(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Calculator c = new Calculator();\n        System.out.println(c.add(5, 10));\n        System.out.println(c.add(5, 10, 15));\n    }\n}\n</code></pre> <p>Answer: 15 30 Explanation: Overloaded methods resolved at compile time.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-6-abstraction","title":"Example 6 \u2013 Abstraction","text":"<pre><code>abstract class Shape {\n    abstract void area();\n}\n\nclass Circle extends Shape {\n    int r = 5;\n    void area() {\n        System.out.println(3.14 * r * r);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Shape s = new Circle();\n        s.area();\n    }\n}\n</code></pre> <p>Answer: 78.5 Explanation: Abstract class reference calls implemented method in Circle.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-7-abstraction-polymorphism","title":"Example 7 \u2013 Abstraction + Polymorphism","text":"<pre><code>abstract class Account {\n    abstract void getBalance();\n}\n\nclass Savings extends Account {\n    void getBalance() {\n        System.out.println(\"Balance: 5000\");\n    }\n}\n\nclass Current extends Account {\n    void getBalance() {\n        System.out.println(\"Balance: 10000\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Account a = new Savings();\n        a.getBalance();\n        a = new Current();\n        a.getBalance();\n    }\n}\n</code></pre> <p>Answer: Balance: 5000 Balance: 10000 Explanation: Runtime polymorphism \u2192 parent reference points to child objects.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-8-encapsulation","title":"Example 8 \u2013 Encapsulation","text":"<pre><code>class Employee {\n    private String name = \"John\";\n    public String getName() {\n        return name;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Employee e = new Employee();\n        System.out.println(e.getName());\n    }\n}\n</code></pre> <p>Answer: John Explanation: Private field accessed via getter.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-9-inheritance-constructor","title":"Example 9 \u2013 Inheritance + Constructor","text":"<pre><code>class A {\n    A() {\n        System.out.println(\"A constructor\");\n    }\n}\n\nclass B extends A {\n    B() {\n        System.out.println(\"B constructor\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        B b = new B();\n    }\n}\n</code></pre> <p>Answer: A constructor B constructor Explanation: Child constructor implicitly calls parent constructor first.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-10-polymorphism-casting","title":"Example 10 \u2013 Polymorphism + Casting","text":"<pre><code>class Animal {\n    void sound() {\n        System.out.println(\"Some sound\");\n    }\n}\n\nclass Dog extends Animal {\n    void sound() {\n        System.out.println(\"Bark\");\n    }\n    void run() {\n        System.out.println(\"Dog runs\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.sound();\n        // a.run(); // Uncommenting gives compilation error\n    }\n}\n</code></pre> <p>Answer: Bark Explanation: Parent reference can access overridden methods only.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-11-encapsulation-validation","title":"Example 11 \u2013 Encapsulation + Validation","text":"<pre><code>class Person {\n    private int age;\n    public void setAge(int age) {\n        this.age = age &lt; 0 ? 0 : age;\n    }\n    public int getAge() {\n        return age;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Person p = new Person();\n        p.setAge(-5);\n        System.out.println(p.getAge());\n    }\n}\n</code></pre> <p>Answer: 0 Explanation: Negative age is reset to 0.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-12-inheritance-method-overriding","title":"Example 12 \u2013 Inheritance + Method Overriding","text":"<pre><code>class Parent {\n    void msg() {\n        System.out.println(\"Parent\");\n    }\n}\n\nclass Child extends Parent {\n    void msg() {\n        System.out.println(\"Child\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Parent p = new Child();\n        p.msg();\n    }\n}\n</code></pre> <p>Answer: Child Explanation: Runtime polymorphism \u2192 child method called.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-13-polymorphism-overloading","title":"Example 13 \u2013 Polymorphism (Overloading)","text":"<pre><code>class Printer {\n    void print(String s) {\n        System.out.println(s);\n    }\n    void print(int n) {\n        System.out.println(n);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Printer p = new Printer();\n        p.print(\"Hello\");\n        p.print(100);\n    }\n}\n</code></pre> <p>Answer: Hello 100 Explanation: Overloaded methods resolved at compile time.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-14-abstraction-multiple-child","title":"Example 14 \u2013 Abstraction + Multiple Child","text":"<pre><code>abstract class Vehicle {\n    abstract void run();\n}\n\nclass Bike extends Vehicle {\n    void run() {\n        System.out.println(\"Bike runs\");\n    }\n}\n\nclass Car extends Vehicle {\n    void run() {\n        System.out.println(\"Car runs\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Vehicle v = new Bike();\n        v.run();\n        v = new Car();\n        v.run();\n    }\n}\n</code></pre> <p>Answer: Bike runs Car runs Explanation: Abstract class reference calls child implementations \u2192 runtime polymorphism.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-15-inheritance-field-hiding","title":"Example 15 \u2013 Inheritance + Field Hiding","text":"<pre><code>class A {\n    int x = 10;\n}\n\nclass B extends A {\n    int x = 20;\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        B b = new B();\n        System.out.println(b.x);\n        System.out.println(((A)b).x);\n    }\n}\n</code></pre> <p>Answer: 20 10 Explanation: Fields are hidden, not overridden \u2192 reference type decides value.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-16-encapsulation-multiple-objects","title":"Example 16 \u2013 Encapsulation + Multiple Objects","text":"<pre><code>class Counter {\n    private static int count = 0;\n    public Counter() {\n        count++;\n    }\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Counter c1 = new Counter();\n        Counter c2 = new Counter();\n        System.out.println(c1.getCount());\n        System.out.println(c2.getCount());\n    }\n}\n</code></pre> <p>Answer: 2 2 Explanation: Static field shared across all instances.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-17-polymorphism-interfaces","title":"Example 17 \u2013 Polymorphism + Interfaces","text":"<pre><code>interface Drawable {\n    void draw();\n}\n\nclass Circle implements Drawable {\n    public void draw() {\n        System.out.println(\"Circle\");\n    }\n}\n\nclass Rectangle implements Drawable {\n    public void draw() {\n        System.out.println(\"Rectangle\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Drawable d1 = new Circle();\n        Drawable d2 = new Rectangle();\n        d1.draw();\n        d2.draw();\n    }\n}\n</code></pre> <p>Answer: Circle Rectangle Explanation: Interface reference calls child implementations \u2192 runtime polymorphism.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-18-abstraction-method-call","title":"Example 18 \u2013 Abstraction + Method Call","text":"<pre><code>abstract class Device {\n    abstract void turnOn();\n}\n\nclass Phone extends Device {\n    void turnOn() {\n        System.out.println(\"Phone ON\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Device d = new Phone();\n        d.turnOn();\n    }\n}\n</code></pre> <p>Answer: Phone ON Explanation: Abstract class reference calls child method.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-19-inheritance-super-keyword","title":"Example 19 \u2013 Inheritance + Super Keyword","text":"<pre><code>class A {\n    void msg() {\n        System.out.println(\"A\");\n    }\n}\n\nclass B extends A {\n    void msg() {\n        super.msg();\n        System.out.println(\"B\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        B b = new B();\n        b.msg();\n    }\n}\n</code></pre> <p>Answer: A B Explanation: super.msg() calls parent method before child.</p>"},{"location":"java-concepts/code-Oppos-concept/#example-20-polymorphism-abstract-class","title":"Example 20 \u2013 Polymorphism + Abstract Class","text":"<pre><code>abstract class Shape {\n    abstract void draw();\n}\n\nclass Circle extends Shape {\n    void draw() {\n        System.out.println(\"Circle drawn\");\n    }\n}\n\nclass Rectangle extends Shape {\n    void draw() {\n        System.out.println(\"Rectangle drawn\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Shape s1 = new Circle();\n        Shape s2 = new Rectangle();\n        s1.draw();\n        s2.draw();\n    }\n}\n</code></pre> <p>Answer: Circle drawn Rectangle drawn Explanation: Abstract class reference calls child methods \u2192 r</p>"},{"location":"java-concepts/code-oppose-3/","title":"OOP Concepts Java \u2013 Examples 51-80","text":""},{"location":"java-concepts/code-oppose-3/#example-51-complex-inheritance-5-level","title":"Example 51 \u2013 Complex Inheritance (5-Level)","text":"<pre><code>class Device {\n    void powerOn() { System.out.println(\"Device power on\"); }\n}\n\nclass Computer extends Device {\n    void startOS() { System.out.println(\"Computer OS started\"); }\n}\n\nclass Laptop extends Computer {\n    void openLid() { System.out.println(\"Laptop lid opened\"); }\n}\n\nclass GamingLaptop extends Laptop {\n    void launchGame() { System.out.println(\"Game launched\"); }\n}\n\nclass Alienware extends GamingLaptop {\n    void rgbLighting() { System.out.println(\"RGB lighting activated\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Alienware a = new Alienware();\n        a.powerOn();\n        a.startOS();\n        a.openLid();\n        a.launchGame();\n        a.rgbLighting();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-52-polymorphism-inheritance-overriding","title":"Example 52 \u2013 Polymorphism + Inheritance (Overriding)","text":"<pre><code>class Vehicle {\n    void move() { System.out.println(\"Vehicle moves\"); }\n}\n\nclass Car extends Vehicle {\n    void move() { System.out.println(\"Car moves fast\"); }\n}\n\nclass SportsCar extends Car {\n    void move() { System.out.println(\"SportsCar zooms\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Vehicle v1 = new Car();\n        Vehicle v2 = new SportsCar();\n        v1.move();\n        v2.move();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-53-abstraction-multiple-children","title":"Example 53 \u2013 Abstraction + Multiple Children","text":"<pre><code>abstract class Employee {\n    abstract void work();\n}\n\nclass Developer extends Employee {\n    void work() { System.out.println(\"Writing code\"); }\n}\n\nclass Tester extends Employee {\n    void work() { System.out.println(\"Testing code\"); }\n}\n\nclass Manager extends Employee {\n    void work() { System.out.println(\"Managing team\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Employee[] employees = {new Developer(), new Tester(), new Manager()};\n        for(Employee e : employees) e.work();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-54-encapsulation-validation-multiple-objects","title":"Example 54 \u2013 Encapsulation + Validation + Multiple Objects","text":"<pre><code>class BankAccount {\n    private double balance;\n    public BankAccount(double initialBalance) {\n        balance = initialBalance &lt; 0 ? 0 : initialBalance;\n    }\n    public void deposit(double amount) {\n        if(amount &gt; 0) balance += amount;\n    }\n    public void withdraw(double amount) {\n        if(amount &lt;= balance) balance -= amount;\n        else System.out.println(\"Insufficient funds\");\n    }\n    public double getBalance() { return balance; }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        BankAccount a1 = new BankAccount(1000);\n        BankAccount a2 = new BankAccount(-500);\n        a1.deposit(500);\n        a2.withdraw(100);\n        System.out.println(a1.getBalance());\n        System.out.println(a2.getBalance());\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-55-polymorphism-interface-runtime","title":"Example 55 \u2013 Polymorphism + Interface + Runtime","text":"<pre><code>interface Drawable {\n    void draw();\n}\n\nclass Circle implements Drawable {\n    public void draw() { System.out.println(\"Circle drawn\"); }\n}\n\nclass Rectangle implements Drawable {\n    public void draw() { System.out.println(\"Rectangle drawn\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Drawable[] shapes = {new Circle(), new Rectangle()};\n        for(Drawable d : shapes) d.draw();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-56-complex-inheritance-super-constructor","title":"Example 56 \u2013 Complex Inheritance + Super Constructor","text":"<pre><code>class Animal {\n    Animal(String msg) { System.out.println(msg); }\n}\n\nclass Mammal extends Animal {\n    Mammal() { super(\"Animal is alive\"); System.out.println(\"Mammal created\"); }\n}\n\nclass Dog extends Mammal {\n    Dog() { System.out.println(\"Dog created\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-57-polymorphism-method-overloading-overriding","title":"Example 57 \u2013 Polymorphism + Method Overloading + Overriding","text":"<pre><code>class Calculator {\n    int add(int a, int b) { return a + b; }\n    double add(double a, double b) { return a + b; }\n}\n\nclass AdvancedCalculator extends Calculator {\n    int add(int a, int b, int c) { return a + b + c; }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        AdvancedCalculator calc = new AdvancedCalculator();\n        System.out.println(calc.add(5,10));\n        System.out.println(calc.add(2.5,3.5));\n        System.out.println(calc.add(1,2,3));\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-58-interface-multiple-implementations","title":"Example 58 \u2013 Interface + Multiple Implementations","text":"<pre><code>interface Vehicle {\n    void start();\n}\n\nclass Car implements Vehicle {\n    public void start() { System.out.println(\"Car starts\"); }\n}\n\nclass Bike implements Vehicle {\n    public void start() { System.out.println(\"Bike starts\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Vehicle v1 = new Car();\n        Vehicle v2 = new Bike();\n        v1.start();\n        v2.start();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-59-abstraction-polymorphism-array","title":"Example 59 \u2013 Abstraction + Polymorphism + Array","text":"<pre><code>abstract class Shape {\n    abstract void area();\n}\n\nclass Circle extends Shape {\n    double r = 3;\n    void area() { System.out.println(3.14 * r * r); }\n}\n\nclass Square extends Shape {\n    double side = 4;\n    void area() { System.out.println(side * side); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Shape[] shapes = {new Circle(), new Square()};\n        for(Shape s : shapes) s.area();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-60-encapsulation-static-field-multiple-objects","title":"Example 60 \u2013 Encapsulation + Static Field + Multiple Objects","text":"<pre><code>class Counter {\n    private static int count = 0;\n    public Counter() { count++; }\n    public static int getCount() { return count; }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        new Counter();\n        new Counter();\n        new Counter();\n        System.out.println(Counter.getCount());\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-61-multi-level-inheritance-method-overriding","title":"Example 61 \u2013 Multi-Level Inheritance + Method Overriding","text":"<pre><code>class A { void msg() { System.out.println(\"A\"); } }\nclass B extends A { void msg() { System.out.println(\"B\"); } }\nclass C extends B { void msg() { System.out.println(\"C\"); } }\nclass D extends C { void msg() { System.out.println(\"D\"); } }\nclass E extends D { void msg() { System.out.println(\"E\"); } }\n\npublic class Test {\n    public static void main(String[] args) {\n        A obj = new E();\n        obj.msg();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-62-polymorphism-casting","title":"Example 62 \u2013 Polymorphism + Casting","text":"<pre><code>class Animal { void sound() { System.out.println(\"Animal sound\"); } }\nclass Dog extends Animal { void sound() { System.out.println(\"Dog barks\"); } void run() { System.out.println(\"Dog runs\"); } }\n\npublic class Test {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.sound();\n        ((Dog)a).run();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-63-abstraction-constructor-polymorphism","title":"Example 63 \u2013 Abstraction + Constructor + Polymorphism","text":"<pre><code>abstract class Device {\n    Device() { System.out.println(\"Device created\"); }\n    abstract void start();\n}\n\nclass Phone extends Device {\n    Phone() { System.out.println(\"Phone created\"); }\n    void start() { System.out.println(\"Phone starts\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Device d = new Phone();\n        d.start();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-64-interface-default-methods","title":"Example 64 \u2013 Interface + Default Methods","text":"<pre><code>interface Vehicle {\n    void start();\n    default void stop() { System.out.println(\"Vehicle stopped\"); }\n}\n\nclass Car implements Vehicle {\n    public void start() { System.out.println(\"Car started\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Car c = new Car();\n        c.start();\n        c.stop();\n    }\n}\n</code></pre> <p>Question: Predict the output.</p>"},{"location":"java-concepts/code-oppose-3/#example-65-encapsulation-method-validation","title":"Example 65 \u2013 Encapsulation + Method Validation","text":"<pre><code>class Product {\n    private int price;\n    public void setPrice(int price) { this.price = price&lt;0?0:price; }\n    public int getPrice() { return price; }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Product p = new Product();\n        p.setPrice(-100);\n        System.out.println(p.getPrice());\n\n\n</code></pre>"},{"location":"java-concepts/code-oppose-concepts-2/","title":"OOP Concepts Java \u2013 Examples 21-50","text":""},{"location":"java-concepts/code-oppose-concepts-2/#example-21-encapsulation","title":"Example 21 \u2013 Encapsulation","text":"<pre><code>class Account {\n    private double balance = 5000;\n    public void deposit(double amount) {\n        balance += amount;\n    }\n    public void withdraw(double amount) {\n        balance -= amount;\n    }\n    public double getBalance() {\n        return balance;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Account acc = new Account();\n        acc.deposit(1000);\n        acc.withdraw(2000);\n        System.out.println(acc.getBalance());\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-22-encapsulation-with-validation","title":"Example 22 \u2013 Encapsulation with Validation","text":"<pre><code>class Temperature {\n    private double tempCelsius;\n    public void setTempCelsius(double tempCelsius) {\n        this.tempCelsius = tempCelsius &lt; -273 ? -273 : tempCelsius;\n    }\n    public double getTempCelsius() {\n        return tempCelsius;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Temperature t = new Temperature();\n        t.setTempCelsius(-300);\n        System.out.println(t.getTempCelsius());\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-23-inheritance-multi-level","title":"Example 23 \u2013 Inheritance + Multi-Level","text":"<pre><code>class Animal {\n    void eat() {\n        System.out.println(\"Animal eats\");\n    }\n}\n\nclass Mammal extends Animal {\n    void walk() {\n        System.out.println(\"Mammal walks\");\n    }\n}\n\nclass Dog extends Mammal {\n    void bark() {\n        System.out.println(\"Dog barks\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n        d.eat();\n        d.walk();\n        d.bark();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-24-inheritance-constructor-chaining","title":"Example 24 \u2013 Inheritance + Constructor Chaining","text":"<pre><code>class A {\n    A() { System.out.println(\"A Constructor\"); }\n}\n\nclass B extends A {\n    B() { System.out.println(\"B Constructor\"); }\n}\n\nclass C extends B {\n    C() { System.out.println(\"C Constructor\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        C obj = new C();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-25-polymorphism-overriding","title":"Example 25 \u2013 Polymorphism (Overriding)","text":"<pre><code>class Printer {\n    void print() {\n        System.out.println(\"Printing from base printer\");\n    }\n}\n\nclass ColorPrinter extends Printer {\n    void print() {\n        System.out.println(\"Printing in color\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Printer p = new ColorPrinter();\n        p.print();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-26-polymorphism-super-keyword","title":"Example 26 \u2013 Polymorphism + Super Keyword","text":"<pre><code>class Vehicle {\n    void start() {\n        System.out.println(\"Vehicle starts\");\n    }\n}\n\nclass Car extends Vehicle {\n    void start() {\n        super.start();\n        System.out.println(\"Car starts\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Car c = new Car();\n        c.start();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-27-abstraction","title":"Example 27 \u2013 Abstraction","text":"<pre><code>abstract class Instrument {\n    abstract void play();\n}\n\nclass Guitar extends Instrument {\n    void play() {\n        System.out.println(\"Guitar is playing\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Instrument ins = new Guitar();\n        ins.play();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-28-abstraction-polymorphism","title":"Example 28 \u2013 Abstraction + Polymorphism","text":"<pre><code>abstract class Employee {\n    abstract double getSalary();\n}\n\nclass Developer extends Employee {\n    double getSalary() {\n        return 70000;\n    }\n}\n\nclass Tester extends Employee {\n    double getSalary() {\n        return 50000;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Employee e1 = new Developer();\n        Employee e2 = new Tester();\n        System.out.println(e1.getSalary());\n        System.out.println(e2.getSalary());\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-29-encapsulation-multiple-objects","title":"Example 29 \u2013 Encapsulation + Multiple Objects","text":"<pre><code>class Counter {\n    private int count = 0;\n    public void increment() {\n        count++;\n    }\n    public int getCount() {\n        return count;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Counter c1 = new Counter();\n        Counter c2 = new Counter();\n        c1.increment();\n        c1.increment();\n        c2.increment();\n        System.out.println(c1.getCount());\n        System.out.println(c2.getCount());\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-30-inheritance-method-hiding","title":"Example 30 \u2013 Inheritance + Method Hiding","text":"<pre><code>class A {\n    static void msg() {\n        System.out.println(\"A\");\n    }\n}\n\nclass B extends A {\n    static void msg() {\n        System.out.println(\"B\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        A a = new B();\n        a.msg();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-31-polymorphism-overloading","title":"Example 31 \u2013 Polymorphism (Overloading)","text":"<pre><code>class Calculator {\n    int multiply(int a, int b) {\n        return a * b;\n    }\n    double multiply(double a, double b) {\n        return a * b;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Calculator c = new Calculator();\n        System.out.println(c.multiply(5, 4));\n        System.out.println(c.multiply(2.5, 3.0));\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-32-interface-implementation","title":"Example 32 \u2013 Interface Implementation","text":"<pre><code>interface Shape {\n    void draw();\n}\n\nclass Triangle implements Shape {\n    public void draw() {\n        System.out.println(\"Triangle drawn\");\n    }\n}\n\nclass Square implements Shape {\n    public void draw() {\n        System.out.println(\"Square drawn\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Shape s1 = new Triangle();\n        Shape s2 = new Square();\n        s1.draw();\n        s2.draw();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-33-inheritance-multiple-child","title":"Example 33 \u2013 Inheritance + Multiple Child","text":"<pre><code>class Parent {\n    void show() {\n        System.out.println(\"Parent method\");\n    }\n}\n\nclass Child1 extends Parent {\n    void show() {\n        System.out.println(\"Child1 method\");\n    }\n}\n\nclass Child2 extends Parent {\n    void show() {\n        System.out.println(\"Child2 method\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Parent p;\n        p = new Child1();\n        p.show();\n        p = new Child2();\n        p.show();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-34-abstraction-interface","title":"Example 34 \u2013 Abstraction + Interface","text":"<pre><code>interface Vehicle {\n    void start();\n}\n\nclass Bike implements Vehicle {\n    public void start() {\n        System.out.println(\"Bike starts\");\n    }\n}\n\nclass Car implements Vehicle {\n    public void start() {\n        System.out.println(\"Car starts\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Vehicle v1 = new Bike();\n        Vehicle v2 = new Car();\n        v1.start();\n        v2.start();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-35-polymorphism-type-casting","title":"Example 35 \u2013 Polymorphism + Type Casting","text":"<pre><code>class Animal {\n    void eat() { System.out.println(\"Animal eats\"); }\n}\n\nclass Dog extends Animal {\n    void eat() { System.out.println(\"Dog eats\"); }\n    void bark() { System.out.println(\"Dog barks\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Animal a = new Dog();\n        a.eat();\n        ((Dog)a).bark();\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-36-encapsulation-static-field","title":"Example 36 \u2013 Encapsulation + Static Field","text":"<pre><code>class Counter {\n    private static int count = 0;\n    public Counter() { count++; }\n    public static int getCount() { return count; }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        new Counter();\n        new Counter();\n        System.out.println(Counter.getCount());\n    }\n}\n</code></pre> <p>Question: Output?</p>"},{"location":"java-concepts/code-oppose-concepts-2/#example-37-abstraction-multiple-method","title":"Example 37 \u2013 Abstraction + Multiple Method","text":"<pre><code>abstract class Employee {\n    abstract void work();\n}\n\nclass Manager extends Employee {\n    void work() {\n        System.out.println(\"Managing team\");\n    }\n}\n\nclass Developer extends Employee {\n    void work() {\n        System.out.println(\"Writing code\");\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Employee e1 = new Manager();\n        Employee e2 = new Developer();\n        e1.work();\n</code></pre>"},{"location":"java-concepts/encapsulation/","title":"Encapsulation in Java","text":""},{"location":"java-concepts/encapsulation/#definition","title":"\ud83d\udc8c Definition","text":"<p>Encapsulation is one of the four pillars of OOP. It means binding data (fields) and methods (functions) together into a single unit (class) and restricting direct access to the data by making fields <code>private</code> and providing controlled access via <code>public</code> methods (getters/setters).</p>"},{"location":"java-concepts/encapsulation/#why-encapsulation","title":"\ud83d\udd11 Why Encapsulation?","text":"<p>If fields are public:</p> <ul> <li>Anyone can directly access or modify them.</li> <li>No control over invalid data.</li> <li>Difficult to maintain or change internal representation later.</li> </ul> <p>With encapsulation:</p> <ul> <li>Data is hidden from outside classes.</li> <li>Access is controlled through methods.</li> <li>Validation and business rules can be applied.</li> </ul>"},{"location":"java-concepts/encapsulation/#key-features","title":"\u2705 Key Features","text":"<ol> <li>Private fields \u2192 data hiding.</li> <li>Public getters/setters \u2192 controlled access.</li> <li>Validation \u2192 prevent invalid values.</li> <li>Read-only / Write-only \u2192 allow only getter or only setter.</li> <li>Flexibility \u2192 change implementation without breaking outside code.</li> </ol>"},{"location":"java-concepts/encapsulation/#example-without-encapsulation-problem","title":"\ud83d\udcdd Example Without Encapsulation (Problem)","text":"<pre><code>class Student {\n    public int age;   // public field\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Student s = new Student();\n        s.age = -10;   // \u274c invalid, but allowed\n        System.out.println(\"Age: \" + s.age);\n    }\n}\n</code></pre>"},{"location":"java-concepts/encapsulation/#example-with-encapsulation-solution","title":"\ud83d\udcdd Example With Encapsulation (Solution)","text":"<pre><code>class Student {\n    private int age;  // private field\n\n    // Setter with validation\n    public void setAge(int age) {\n        if(age &gt; 0) {\n            this.age = age;\n        } else {\n            System.out.println(\"\u274c Age must be positive!\");\n        }\n    }\n\n    // Getter\n    public int getAge() {\n        return age;\n    }\n}\n\npublic class Demo {\n    public static void main(String[] args) {\n        Student s = new Student();\n        s.setAge(-10); // blocked\n        s.setAge(20);  // \u2705 valid\n        System.out.println(\"Age: \" + s.getAge());\n    }\n}\n</code></pre>"},{"location":"java-concepts/encapsulation/#real-world-example-bank-account","title":"\ud83c\udf1f Real-World Example: Bank Account","text":"<pre><code>class BankAccount {\n    private double balance; // sensitive data\n\n    public BankAccount(double initialBalance) {\n        if(initialBalance &gt;= 0) {\n            this.balance = initialBalance;\n        }\n    }\n\n    public double getBalance() {\n        return balance; // read-only access\n    }\n\n    public void deposit(double amount) {\n        if(amount &gt; 0) balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if(amount &gt; 0 &amp;&amp; amount &lt;= balance) balance -= amount;\n        else System.out.println(\"\u274c Invalid transaction\");\n    }\n}\n\npublic class BankDemo {\n    public static void main(String[] args) {\n        BankAccount acc = new BankAccount(1000);\n        acc.deposit(500);\n        acc.withdraw(2000); // \u274c not allowed\n        System.out.println(\"Final Balance: \" + acc.getBalance());\n    }\n}\n</code></pre>"},{"location":"java-concepts/encapsulation/#advantages-of-encapsulation","title":"\u2b50 Advantages of Encapsulation","text":"<ul> <li>Protects data integrity.</li> <li>Improves code maintainability.</li> <li>Provides flexibility to change internal implementation.</li> <li>Enhances security by exposing only necessary details.</li> <li>Supports abstraction (hiding unnecessary details).</li> </ul>"},{"location":"java-concepts/encapsulation/#summary","title":"\ud83d\udccc Summary","text":"<p>Encapsulation = Data Hiding + Controlled Access</p> <ul> <li>Keep fields <code>private</code>.</li> <li>Use getter and setter methods.</li> <li>Apply validation logic inside setters.</li> <li>Make class fields read-only/write-only when required.</li> </ul>"},{"location":"java-concepts/encapsulation/#encapsulation-in-selenium-java-framework","title":"\ud83d\udd39 Encapsulation in Selenium Java Framework","text":"<p>In Selenium frameworks, Encapsulation is heavily used in Page Object Model (POM):</p>"},{"location":"java-concepts/encapsulation/#example-page-object","title":"Example: Page Object","text":"<pre><code>import org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.support.FindBy;\nimport org.openqa.selenium.support.PageFactory;\n\npublic class LoginPage {\n    private WebDriver driver;  // private driver reference\n\n    // Private WebElements\n    @FindBy(id = \"username\")\n    private WebElement usernameField;\n\n    @FindBy(id = \"password\")\n    private WebElement passwordField;\n\n    @FindBy(id = \"loginBtn\")\n    private WebElement loginButton;\n\n    // Constructor\n    public LoginPage(WebDriver driver) {\n        this.driver = driver;\n        PageFactory.initElements(driver, this);\n    }\n\n    // Public methods (encapsulation) to interact with elements\n    public void enterUsername(String username) {\n        usernameField.sendKeys(username);\n    }\n\n    public void enterPassword(String password) {\n        passwordField.sendKeys(password);\n    }\n\n    public void clickLogin() {\n        loginButton.click();\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li>Fields (<code>WebElement</code>) are private \u2192 hidden from test classes.</li> <li>Test classes access elements only via public methods \u2192 controlled interaction.</li> <li>Improves maintainability: If locators change, only the Page class changes.</li> </ul>"},{"location":"java-concepts/encapsulation/#encapsulation-in-java-playwright-framework","title":"\ud83d\udd39 Encapsulation in Java Playwright Framework","text":"<p>Similarly, in Playwright (Java) framework, encapsulation is used for page objects:</p>"},{"location":"java-concepts/encapsulation/#example-login-page","title":"Example: Login Page","text":"<pre><code>import com.microsoft.playwright.Page;\n\npublic class LoginPage {\n    private Page page;  // private Playwright page object\n\n    // Private locators\n    private final String usernameInput = \"#username\";\n    private final String passwordInput = \"#password\";\n    private final String loginBtn = \"#loginBtn\";\n\n    // Constructor\n    public LoginPage(Page page) {\n        this.page = page;\n    }\n\n    // Public methods to interact with page\n    public void enterUsername(String username) {\n        page.locator(usernameInput).fill(username);\n    }\n\n    public void enterPassword(String password) {\n        page.locator(passwordInput).fill(password);\n    }\n\n    public void clickLogin() {\n        page.locator(loginBtn).click();\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li>Locators are private \u2192 hidden from test scripts.</li> <li>Test scripts call public methods \u2192 controlled access.</li> <li>If locators change, only <code>LoginPage</code> needs update.</li> </ul>"},{"location":"java-concepts/encapsulation/#conclusion","title":"\u2705 Conclusion","text":"<p>Encapsulation in Java is not just a theory, it is widely applied in automation frameworks:</p> <ul> <li>Protects element locators and driver/page objects.</li> <li>Provides controlled methods to interact with UI.</li> <li>Improves maintainability, readability, and security of your automation code.</li> </ul>"},{"location":"java-concepts/inheritance/","title":"Inheritance in Java","text":""},{"location":"java-concepts/inheritance/#definition","title":"\ud83d\udccc Definition","text":"<p>Inheritance is an OOP concept where one class (child/subclass) inherits properties and methods from another class (parent/superclass). It allows code reuse and hierarchical class structure.</p> <p>Syntax:</p> <pre><code>class Parent {\n    // parent class code\n}\n\nclass Child extends Parent {\n    // child class code\n}\n</code></pre>"},{"location":"java-concepts/inheritance/#why-inheritance","title":"\ud83d\udd11 Why Inheritance?","text":"<ul> <li>Reusability: Write common code in parent, reuse in child.</li> <li>Maintainability: Changes in parent reflect in child classes.</li> <li>Polymorphism: Parent reference can refer to child object.</li> <li>Hierarchical structure: Model real-world relationships.</li> </ul>"},{"location":"java-concepts/inheritance/#types-of-inheritance-in-java","title":"\u2705 Types of Inheritance in Java","text":"<ol> <li>Single Inheritance: One child, one parent</li> <li>Multilevel Inheritance: A \u2192 B \u2192 C</li> <li>Hierarchical Inheritance: One parent, multiple children</li> </ol> <p>Note: Java does not support multiple inheritance with classes (can use interfaces for that).</p>"},{"location":"java-concepts/inheritance/#basic-example-single-inheritance","title":"\ud83d\udcdd Basic Example: Single Inheritance","text":"<pre><code>// Parent class\nclass Animal {\n    void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\n// Child class\nclass Dog extends Animal {\n    void bark() {\n        System.out.println(\"Dog barks.\");\n    }\n}\n\npublic class InheritanceDemo {\n    public static void main(String[] args) {\n        Dog d = new Dog();\n        d.eat();  // inherited method\n        d.bark(); // child\u2019s own method\n    }\n}\n</code></pre>"},{"location":"java-concepts/inheritance/#example-multilevel-inheritance","title":"\ud83d\udcdd Example: Multilevel Inheritance","text":"<pre><code>class Vehicle {\n    void start() {\n        System.out.println(\"Vehicle starts\");\n    }\n}\n\nclass Car extends Vehicle {\n    void honk() {\n        System.out.println(\"Car honks\");\n    }\n}\n\nclass SportsCar extends Car {\n    void turbo() {\n        System.out.println(\"SportsCar turbo mode\");\n    }\n}\n\npublic class MultilevelDemo {\n    public static void main(String[] args) {\n        SportsCar sc = new SportsCar();\n        sc.start(); // from Vehicle\n        sc.honk();  // from Car\n        sc.turbo(); // from SportsCar\n    }\n}\n</code></pre>"},{"location":"java-concepts/inheritance/#example-hierarchical-inheritance","title":"\ud83d\udcdd Example: Hierarchical Inheritance","text":"<pre><code>class Vehicle {\n    void start() {\n        System.out.println(\"Vehicle starts\");\n    }\n}\n\nclass Car extends Vehicle {\n    void honk() {\n        System.out.println(\"Car honks\");\n    }\n}\n\nclass Bike extends Vehicle {\n    void ringBell() {\n        System.out.println(\"Bike rings bell\");\n    }\n}\n\npublic class HierarchicalDemo {\n    public static void main(String[] args) {\n        Car car = new Car();\n        car.start();\n        car.honk();\n\n        Bike bike = new Bike();\n        bike.start();\n        bike.ringBell();\n    }\n}\n</code></pre>"},{"location":"java-concepts/inheritance/#real-world-example-in-selenium-java-framework","title":"\ud83d\udd39 Real-World Example in Selenium Java Framework","text":"<p>In Page Object Model, inheritance is used for BasePage:</p> <pre><code>import org.openqa.selenium.WebDriver;\n\npublic class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n\n    public void openUrl(String url) {\n        driver.get(url);\n    }\n}\n\n// Child Page inherits BasePage\npublic class LoginPage extends BasePage {\n    public LoginPage(WebDriver driver) {\n        super(driver); // call parent constructor\n    }\n\n    public void login(String user, String pass) {\n        // code to perform login\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li>Common methods like <code>openUrl()</code> are in BasePage \u2192 reused in all pages.</li> <li>Child pages inherit these methods \u2192 avoids duplicate code.</li> </ul>"},{"location":"java-concepts/inheritance/#real-world-example-in-java-playwright-framework","title":"\ud83d\udd39 Real-World Example in Java Playwright Framework","text":"<pre><code>import com.microsoft.playwright.Page;\n\n// Base class\npublic class BasePage {\n    protected Page page;\n\n    public BasePage(Page page) {\n        this.page = page;\n    }\n\n    public void navigateTo(String url) {\n        page.navigate(url);\n    }\n}\n\n// Child Page\npublic class LoginPage extends BasePage {\n    private final String usernameInput = \"#username\";\n    private final String passwordInput = \"#password\";\n    private final String loginBtn = \"#loginBtn\";\n\n    public LoginPage(Page page) {\n        super(page);\n    }\n\n    public void login(String user, String pass) {\n        page.locator(usernameInput).fill(user);\n        page.locator(passwordInput).fill(pass);\n        page.locator(loginBtn).click();\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>BasePage</code> contains common page methods (like <code>navigateTo()</code>).</li> <li><code>LoginPage</code> inherits them \u2192 can reuse in all other page objects.</li> </ul>"},{"location":"java-concepts/inheritance/#advantages-of-inheritance","title":"\u2b50 Advantages of Inheritance","text":"<ol> <li>Code reusability \u2192 avoids duplication.</li> <li>Logical structure \u2192 parent-child relationship.</li> <li>Easy maintenance \u2192 modify in parent, affects all children.</li> <li>Supports polymorphism (child object can be referenced by parent type).</li> </ol>"},{"location":"java-concepts/polymorphism/","title":"Polymorphism in Java","text":""},{"location":"java-concepts/polymorphism/#definition","title":"\ud83d\udccc Definition","text":"<p>Polymorphism is an OOP concept that means \u201cone name, many forms\u201d. It allows a single method, object, or operator to behave differently based on context.</p> <p>Types:</p> <ol> <li>Compile-Time (Method Overloading)</li> <li>Run-Time (Method Overriding)</li> </ol>"},{"location":"java-concepts/polymorphism/#why-polymorphism","title":"\ud83d\udd11 Why Polymorphism?","text":"<ul> <li>Improves code readability.</li> <li>Reduces complexity by using the same method name for different tasks.</li> <li>Supports flexibility in code design.</li> <li>Helps in maintainable and reusable code.</li> </ul>"},{"location":"java-concepts/polymorphism/#types-of-polymorphism","title":"\u2705 Types of Polymorphism","text":""},{"location":"java-concepts/polymorphism/#1-compile-time-polymorphism-method-overloading","title":"1. Compile-Time Polymorphism (Method Overloading)","text":"<ul> <li>Same method name but different parameter types or number.</li> <li>Resolved by compiler.</li> </ul> <p>Example:</p> <pre><code>class Calculator {\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    double add(double a, double b) {\n        return a + b;\n    }\n\n    int add(int a, int b, int c) {\n        return a + b + c;\n    }\n}\n\npublic class OverloadingDemo {\n    public static void main(String[] args) {\n        Calculator calc = new Calculator();\n        System.out.println(calc.add(5, 3));       // int version\n        System.out.println(calc.add(2.5, 3.5));   // double version\n        System.out.println(calc.add(1, 2, 3));    // 3 params\n    }\n}\n</code></pre>"},{"location":"java-concepts/polymorphism/#2-run-time-polymorphism-method-overriding","title":"2. Run-Time Polymorphism (Method Overriding)","text":"<ul> <li>Child class overrides parent method with same name &amp; signature.</li> <li>Decided by JVM at runtime which method to call.</li> </ul> <p>Example:</p> <pre><code>class Animal {\n    void sound() {\n        System.out.println(\"Animal makes a sound.\");\n    }\n}\n\nclass Dog extends Animal {\n    @Override\n    void sound() {\n        System.out.println(\"Dog barks.\");\n    }\n}\n\npublic class OverridingDemo {\n    public static void main(String[] args) {\n        Animal obj = new Dog();  // Parent reference, child object\n        obj.sound();             // Runtime decides -&gt; Dog barks.\n    }\n}\n</code></pre>"},{"location":"java-concepts/polymorphism/#complex-example-polymorphism-in-banking","title":"\ud83d\udd39 Complex Example: Polymorphism in Banking","text":"<pre><code>abstract class Account {\n    abstract void calculateInterest();\n}\n\nclass SavingsAccount extends Account {\n    @Override\n    void calculateInterest() {\n        System.out.println(\"Savings Account interest: 4%\");\n    }\n}\n\nclass FixedDepositAccount extends Account {\n    @Override\n    void calculateInterest() {\n        System.out.println(\"Fixed Deposit interest: 6%\");\n    }\n}\n\npublic class BankDemo {\n    public static void main(String[] args) {\n        Account acc1 = new SavingsAccount();\n        Account acc2 = new FixedDepositAccount();\n\n        acc1.calculateInterest();  // Savings Account interest: 4%\n        acc2.calculateInterest();  // Fixed Deposit interest: 6%\n    }\n}\n</code></pre> <p>Explanation: Same method <code>calculateInterest()</code> behaves differently \u2192 runtime polymorphism.</p>"},{"location":"java-concepts/polymorphism/#polymorphism-in-selenium-java-framework","title":"\ud83d\udd39 Polymorphism in Selenium Java Framework","text":"<pre><code>import org.openqa.selenium.WebDriver;\n\npublic class BasePage {\n    protected WebDriver driver;\n\n    public BasePage(WebDriver driver) {\n        this.driver = driver;\n    }\n\n    // Overloaded method example\n    public void openUrl(String url) {\n        driver.get(url);\n    }\n\n    public void openUrl(String url, boolean maximize) {\n        driver.get(url);\n        if(maximize) driver.manage().window().maximize();\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li><code>openUrl()</code> is overloaded \u2192 compile-time polymorphism.</li> <li>All pages inherit BasePage \u2192 runtime polymorphism when child overrides methods.</li> </ul>"},{"location":"java-concepts/polymorphism/#polymorphism-in-java-playwright-framework","title":"\ud83d\udd39 Polymorphism in Java Playwright Framework","text":"<pre><code>import com.microsoft.playwright.Page;\n\npublic class BasePage {\n    protected Page page;\n\n    public BasePage(Page page) {\n        this.page = page;\n    }\n\n    // Compile-time polymorphism\n    public void navigate(String url) {\n        page.navigate(url);\n    }\n\n    public void navigate(String url, int timeout) {\n        page.navigate(url, new Page.NavigateOptions().setTimeout(timeout));\n    }\n}\n\npublic class LoginPage extends BasePage {\n    public LoginPage(Page page) {\n        super(page);\n    }\n\n    // Runtime polymorphism\n    @Override\n    public void navigate(String url) {\n        System.out.println(\"LoginPage custom navigate\");\n        super.navigate(url);\n    }\n}\n</code></pre> <p>Explanation:</p> <ul> <li>Overloaded <code>navigate()</code> \u2192 compile-time polymorphism.</li> <li>Overridden <code>navigate()</code> \u2192 runtime polymorphism.</li> </ul>"},{"location":"java-concepts/polymorphism/#advantages-of-polymorphism","title":"\u2b50 Advantages of Polymorphism","text":"<ol> <li>Improves code readability.</li> <li>Promotes reusability.</li> <li>Reduces complex code with common methods.</li> <li>Supports flexible and maintainable automation frameworks.</li> </ol>"},{"location":"javascriptConcepts/Arrays/","title":"6. Arrays &amp; Objects in JavaScript \u2013 Deep Dive","text":"<p>Arrays and objects are fundamental data structures in JavaScript used to store collections of data.</p> <p>This guide covers arrays, objects, basic operations, and common interview programs.</p>"},{"location":"javascriptConcepts/Arrays/#arrays","title":"\ud83d\udd39 Arrays","text":"<p>Arrays store multiple values in an ordered list.</p>"},{"location":"javascriptConcepts/Arrays/#creating-arrays","title":"Creating Arrays","text":"<pre><code>let numbers = [1, 2, 3, 4, 5];\nlet fruits = [\"apple\", \"banana\", \"mango\"];\nlet mixed = [1, \"apple\", true, 'c']; // mixed data types\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-elements","title":"Accessing Elements","text":"<pre><code>console.log(numbers[0]); // 1\nconsole.log(fruits[2]);  // mango\nconsole.log(mixed[1]);   // apple\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#array-length","title":"Array Length","text":"<pre><code>console.log(numbers.length); // 5\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-elements","title":"Adding Elements","text":"<pre><code>numbers.push(6);   // add at end\nnumbers.unshift(0); // add at beginning\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#removing-elements","title":"Removing Elements","text":"<pre><code>numbers.pop();    // remove last\nnumbers.shift();  // remove first\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-an-array","title":"Iterating Over an Array","text":"<pre><code>let arr = [10, 20, 30, 40];\n\n// Using for loop\nfor(let i = 0; i &lt; arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// Using for...of loop\nfor(let value of arr) {\n  console.log(value);\n}\n\n// Using forEach\narr.forEach(value =&gt; console.log(value));\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#common-array-programs-interview-questions","title":"\ud83d\udd39 Common Array Programs (Interview Questions)","text":""},{"location":"javascriptConcepts/Arrays/#1-reverse-an-array","title":"1. Reverse an Array","text":"<pre><code>let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr); // [5,4,3,2,1]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#2-find-maximum-minimum","title":"2. Find Maximum &amp; Minimum","text":"<pre><code>let arr = [5, 12, 7, 1, 19];\nlet max = Math.max(...arr);\nlet min = Math.min(...arr);\nconsole.log(max); // 19\nconsole.log(min); // 1\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#3-sum-of-array-elements","title":"3. Sum of Array Elements","text":"<pre><code>let arr = [1,2,3,4,5];\nlet sum = arr.reduce((acc, val) =&gt; acc + val, 0);\nconsole.log(sum); // 15\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#4-find-average-of-array","title":"4. Find Average of Array","text":"<pre><code>let arr = [10,20,30,40];\nlet avg = arr.reduce((a,b) =&gt; a+b,0)/arr.length;\nconsole.log(avg); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#5-find-even-and-odd-numbers","title":"5. Find Even and Odd Numbers","text":"<pre><code>let arr = [1,2,3,4,5,6];\nlet even = arr.filter(x =&gt; x % 2 === 0);\nlet odd = arr.filter(x =&gt; x % 2 !== 0);\nconsole.log(even); // [2,4,6]\nconsole.log(odd);  // [1,3,5]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#6-sort-array","title":"6. Sort Array","text":"<pre><code>let arr = [5,1,8,3];\narr.sort((a,b) =&gt; a-b);\nconsole.log(arr); // [1,3,5,8]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#7-find-string-with-max-and-min-length","title":"7. Find String with Max and Min Length","text":"<pre><code>let fruits = [\"apple\", \"banana\", \"kiwi\", \"mango\"];\nlet maxLen = fruits.reduce((a,b) =&gt; a.length &gt;= b.length ? a : b);\nlet minLen = fruits.reduce((a,b) =&gt; a.length &lt;= b.length ? a : b);\nconsole.log(maxLen); // banana\nconsole.log(minLen); // kiwi\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#objects","title":"\ud83d\udd39 Objects","text":"<p>Objects store data in key-value pairs.</p>"},{"location":"javascriptConcepts/Arrays/#creating-objects","title":"Creating Objects","text":"<pre><code>let person = {\n  name: \"Nitin\",\n  age: 25,\n  city: \"Mumbai\"\n};\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-properties","title":"Accessing Properties","text":"<pre><code>console.log(person.name);  // Nitin\nconsole.log(person['age']); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-updating-properties","title":"Adding &amp; Updating Properties","text":"<pre><code>person.country = \"India\"; // add\nperson.age = 26;            // update\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#deleting-properties","title":"Deleting Properties","text":"<pre><code>delete person.city;\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-object","title":"Iterating Over Object","text":"<pre><code>for (let key in person) {\n  console.log(key, person[key]);\n}\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#summary","title":"\u2705 Summary","text":"<ul> <li>Arrays \u2192 Ordered collection of items, methods: push, pop, shift, unshift, reverse, sort, filter, reduce. Can contain mixed data types.</li> <li>Objects \u2192 Key-value storage, access via dot or bracket notation, dynamic addition/deletion, iteration with <code>for...in</code>.</li> <li>Common Interview Programs \u2192 Reverse array, max/min, sum, average, even/odd numbers, string with max/min length.</li> <li>Iteration \u2192 for loop, for...of loop, forEach method.</li> </ul> <p>These are essential for coding interviews, JavaScript development, and Playwright automation.</p>"},{"location":"javascriptConcepts/dataTypes/","title":"5. Data Types in JavaScript \u2013 Deep Dive","text":"<p>JavaScript has different types of data used to store values and perform operations. Understanding data types is crucial for writing efficient code.</p> <p>This guide covers primitive types, non-primitive types, type checking, and common interview programs.</p>"},{"location":"javascriptConcepts/dataTypes/#primitive-data-types","title":"\ud83d\udd39 Primitive Data Types","text":"<p>Primitive data types are immutable and include:</p> <ol> <li>Number \u2013 Numeric values</li> <li>String \u2013 Sequence of characters</li> <li>Boolean \u2013 true or false</li> <li>Undefined \u2013 Variable declared but not assigned</li> <li>Null \u2013 Intentionally empty value</li> <li>Symbol \u2013 Unique and immutable value</li> <li>BigInt \u2013 Large integer values</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples","title":"Examples","text":"<pre><code>// Number\nlet age = 25;\n\n// String\nlet name = \"Nitin\";\n\n// Boolean\nlet isActive = true;\n\n// Undefined\nlet city;\n\n// Null\nlet country = null;\n\n// Symbol\nlet sym = Symbol('id');\n\n// BigInt\nlet bigNumber = 123456789012345678901234567890n;\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types","title":"Checking Data Types","text":"<pre><code>console.log(typeof age);       // number\nconsole.log(typeof name);      // string\nconsole.log(typeof isActive);  // boolean\nconsole.log(typeof city);      // undefined\nconsole.log(typeof country);   // object (this is a known JS quirk)\nconsole.log(typeof sym);       // symbol\nconsole.log(typeof bigNumber); // bigint\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#non-primitive-data-types","title":"\ud83d\udd39 Non-Primitive Data Types","text":"<p>Non-primitive types are mutable and include:</p> <ol> <li>Object \u2013 Key-value pairs</li> <li>Array \u2013 Ordered collection (special type of object)</li> <li>Function \u2013 Callable objects</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples_1","title":"Examples","text":"<pre><code>// Object\nlet person = { name: \"Nitin\", age: 25 };\n\n// Array\nlet fruits = [\"apple\", \"banana\", \"mango\"];\n\n// Function\nfunction greet() {\n  console.log(\"Hello\");\n}\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types_1","title":"Checking Data Types","text":"<pre><code>console.log(typeof person); // object\nconsole.log(typeof fruits); // object\nconsole.log(typeof greet);  // function\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#type-conversion","title":"\ud83d\udd39 Type Conversion","text":"<p>JavaScript allows explicit and implicit type conversions.</p>"},{"location":"javascriptConcepts/dataTypes/#implicit-conversion","title":"Implicit Conversion","text":"<pre><code>let result = '5' + 5; // '55' (number converted to string)\nconsole.log(result);\n\nlet value = '10' - 2; // 8 (string converted to number)\nconsole.log(value);\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#explicit-conversion","title":"Explicit Conversion","text":"<pre><code>let str = String(123); // '123'\nlet num = Number('456'); // 456\nlet bool = Boolean(0);    // false\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#common-interview-programs","title":"\ud83d\udd39 Common Interview Programs","text":""},{"location":"javascriptConcepts/dataTypes/#1-check-if-variable-is-array","title":"1. Check if Variable is Array","text":"<pre><code>let arr = [1,2,3];\nconsole.log(Array.isArray(arr)); // true\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#2-convert-string-to-number","title":"2. Convert String to Number","text":"<pre><code>let str = '123';\nlet num = Number(str);\nconsole.log(num); // 123\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#3-convert-number-to-string","title":"3. Convert Number to String","text":"<pre><code>let num = 456;\nlet str = String(num);\nconsole.log(str); // '456'\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#4-check-data-type","title":"4. Check Data Type","text":"<pre><code>let value = true;\nconsole.log(typeof value); // boolean\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#summary","title":"\u2705 Summary","text":"<ul> <li>Primitive types \u2192 number, string, boolean, undefined, null, symbol, bigint. Immutable.</li> <li>Non-primitive types \u2192 object, array, function. Mutable.</li> <li>Type checking \u2192 <code>typeof</code>, <code>Array.isArray()</code>.</li> <li>Type conversion \u2192 Implicit (coercion) and explicit (String(), Number(), Boolean()).</li> </ul> <p>Understanding data types is fundamental for JavaScript development, debugging, and coding interviews.</p>"},{"location":"javascriptConcepts/flow-statement/","title":"4. Control Flow in JavaScript \u2013 Deep Dive","text":"<p>Control flow determines the order in which code executes. JavaScript provides control flow statements like if...else, switch, loops (for, while, do...while), break/continue.  </p>"},{"location":"javascriptConcepts/flow-statement/#if-statement","title":"\ud83d\udd39 <code>if</code> Statement","text":"<p>Executes a block of code if a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax","title":"Syntax","text":"<pre><code>if (condition) {\n  // code to run if condition is true\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-if","title":"Example \u2013 <code>if</code>","text":"<pre><code>let score = 85;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n}\n</code></pre> <p>Playwright Use Case: Check if an element exists before performing an action.</p>"},{"location":"javascriptConcepts/flow-statement/#ifelse-statement","title":"\ud83d\udd39 <code>if...else</code> Statement","text":"<p>Executes one block if condition is true, another if false.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_1","title":"Syntax","text":"<pre><code>if (condition) {\n  // code if true\n} else {\n  // code if false\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse","title":"Example \u2013 <code>if...else</code>","text":"<pre><code>let score = 40;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#ifelse-ifelse-statement","title":"\ud83d\udd39 <code>if...else if...else</code> Statement","text":"<p>Used when multiple conditions need to be checked sequentially.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_2","title":"Syntax","text":"<pre><code>if (condition1) {\n  // code1\n} else if (condition2) {\n  // code2\n} else {\n  // default code\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse-ifelse","title":"Example \u2013 <code>if...else if...else</code>","text":"<pre><code>let marks = 75;\n\nif (marks &gt;= 90) {\n  console.log(\"Grade A\");\n} else if (marks &gt;= 75) {\n  console.log(\"Grade B\");\n} else if (marks &gt;= 50) {\n  console.log(\"Grade C\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#switch-statement","title":"\ud83d\udd39 <code>switch</code> Statement","text":"<p>An alternative to multiple <code>if...else if</code> conditions.  </p>"},{"location":"javascriptConcepts/flow-statement/#syntax_3","title":"Syntax","text":"<pre><code>switch(expression) {\n  case value1:\n    // code\n    break;\n  case value2:\n    // code\n    break;\n  default:\n    // code if no case matches\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-switch","title":"Example \u2013 <code>switch</code>","text":"<pre><code>let day = 3;\n\nswitch(day) {\n  case 1:\n    console.log(\"Monday\");\n    break;\n  case 2:\n    console.log(\"Tuesday\");\n    break;\n  case 3:\n    console.log(\"Wednesday\");\n    break;\n  default:\n    console.log(\"Another day\");\n}\n</code></pre> <p>Playwright Use Case: Decide which browser or test scenario to run based on a config variable.</p>"},{"location":"javascriptConcepts/flow-statement/#for-loop","title":"\ud83d\udd39 <code>for</code> Loop","text":"<p>Repeats a block of code a fixed number of times.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_4","title":"Syntax","text":"<pre><code>for (initialization; condition; increment) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-for","title":"Example \u2013 <code>for</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  console.log(\"Count:\", i);\n}\n</code></pre> <p>Playwright Use Case: Iterate through a list of elements to perform actions like click or validate text.</p>"},{"location":"javascriptConcepts/flow-statement/#while-loop","title":"\ud83d\udd39 <code>while</code> Loop","text":"<p>Repeats as long as a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_5","title":"Syntax","text":"<pre><code>while (condition) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-while","title":"Example \u2013 <code>while</code>","text":"<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n  console.log(\"Count:\", i);\n  i++;\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#dowhile-loop","title":"\ud83d\udd39 <code>do...while</code> Loop","text":"<p>Executes the code block at least once, then checks the condition.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_6","title":"Syntax","text":"<pre><code>do {\n  // code block\n} while (condition);\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-dowhile","title":"Example \u2013 <code>do...while</code>","text":"<pre><code>let i = 6;\ndo {\n  console.log(\"Count:\", i);\n  i++;\n} while (i &lt;= 5);  // runs once even though condition is false\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#break-and-continue","title":"\ud83d\udd39 <code>break</code> and <code>continue</code>","text":"<p>JavaScript <code>break</code> and <code>continue</code> work the same way as in Java. - <code>break</code> \u2192 exits the loop immediately - <code>continue</code> \u2192 skips the current iteration and moves to next</p>"},{"location":"javascriptConcepts/flow-statement/#example-break-continue","title":"Example \u2013 <code>break</code> &amp; <code>continue</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) break;      // stops loop at 3\n  console.log(i);\n}\n\nfor (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) continue;   // skips 3\n  console.log(i);\n}\n</code></pre> <p>Java Example (for comparison)</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) break; // exits loop at 3\n    System.out.println(i);\n}\n\nfor (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue; // skips 3\n    System.out.println(i);\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#summary","title":"\u2705 Summary","text":"<ul> <li>Conditional Statements: <code>if</code>, <code>if...else</code>, <code>if...else if...else</code>, <code>switch</code> </li> <li>Loops: <code>for</code>, <code>while</code>, <code>do...while</code> </li> <li>Loop Control: <code>break</code>, <code>continue</code> </li> </ul> <p>These control flow statements are essential for decision-making and iteration in JavaScript and Playwright tests.</p>"},{"location":"javascriptConcepts/functions/","title":"5. Functions in JavaScript \u2013 Basics","text":"<p>Functions in JavaScript are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and return values.</p> <p>This guide covers how to create functions, call them, pass parameters, return values (int, list/array), and basic usage.</p>"},{"location":"javascriptConcepts/functions/#function-declaration","title":"\ud83d\udd39 Function Declaration","text":"<p>A standard way to define a named function.</p>"},{"location":"javascriptConcepts/functions/#syntax","title":"Syntax","text":"<pre><code>function functionName(parameters) {\n  // code\n  return result;\n}\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-add-two-numbers","title":"Example \u2013 Add two numbers","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet sum = add(5, 3);\nconsole.log(sum); // 8\n</code></pre> <p>Playwright Use Case: Reusable function to click buttons or fill forms.</p>"},{"location":"javascriptConcepts/functions/#function-expression","title":"\ud83d\udd39 Function Expression","text":"<p>Assign a function to a variable. Can be anonymous.</p>"},{"location":"javascriptConcepts/functions/#syntax_1","title":"Syntax","text":"<pre><code>const functionName = function(parameters) {\n  // code\n  return result;\n};\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-multiply-two-numbers","title":"Example \u2013 Multiply two numbers","text":"<pre><code>const multiply = function(a, b) {\n  return a * b;\n};\n\nconsole.log(multiply(4, 5)); // 20\n</code></pre> <p>Note: You can also create the same function using a function declaration as shown below. Both are valid.</p>"},{"location":"javascriptConcepts/functions/#example-function-declaration-vs-function-expression","title":"Example \u2013 Function Declaration vs Function Expression","text":"<pre><code>// Function Declaration\nfunction multiplyDecl(a, b) {\n  return a * b;\n}\nconsole.log(multiplyDecl(4, 5)); // 20\n\n// Function Expression\nconst multiplyExpr = function(a, b) {\n  return a * b;\n};\nconsole.log(multiplyExpr(4, 5)); // 20\n</code></pre> <p>Key Difference: - Function Declarations are hoisted \u2192 can be called before definition. - Function Expressions are not hoisted \u2192 cannot be called before definition.</p>"},{"location":"javascriptConcepts/functions/#function-with-no-parameters","title":"\ud83d\udd39 Function with No Parameters","text":"<pre><code>function greet() {\n  console.log(\"Hello!\");\n}\n\ngreet(); // Hello!\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-integer","title":"\ud83d\udd39 Function Returning Integer","text":"<pre><code>function square(x) {\n  return x * x;\n}\n\nlet result = square(6);\nconsole.log(result); // 36\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-arraylist","title":"\ud83d\udd39 Function Returning Array/List","text":"<pre><code>function createList() {\n  return [1, 2, 3, 4, 5];\n}\n\nlet numbers = createList();\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-with-default-parameters","title":"\ud83d\udd39 Function with Default Parameters","text":"<pre><code>function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet(\"Nitin\"); // Hello, Nitin!\ngreet();         // Hello, Guest!\n</code></pre>"},{"location":"javascriptConcepts/functions/#calling-a-function","title":"\ud83d\udd39 Calling a Function","text":"<ul> <li>Use the function name followed by parentheses: <code>functionName()</code></li> <li>Pass arguments inside parentheses if needed: <code>functionName(arg1, arg2)</code></li> </ul>"},{"location":"javascriptConcepts/functions/#example","title":"Example","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet result = add(10, 20);\nconsole.log(result); // 30\n</code></pre>"},{"location":"javascriptConcepts/functions/#summary","title":"\u2705 Summary","text":"<ul> <li>Function Declaration: Named, hoisted, reusable.</li> <li>Function Expression: Anonymous or named, assigned to a variable.</li> <li>Call a function: <code>functionName()</code></li> <li>Return values: Can return integers, arrays, or other data types.</li> <li>Default parameters: Provide fallback values.</li> <li>Hoisting: Declarations are hoisted, expressions are not.</li> </ul> <p>Functions are fundamental building blocks for organizing and reusing code in JavaScript.</p>"},{"location":"javascriptConcepts/operator/","title":"3. Operators in JavaScript \u2013 Deep Dive","text":"<p>JavaScript provides a variety of operators to perform operations on values and variables. Operators can be categorized as Arithmetic, Assignment, Comparison, Logical, Bitwise, and Ternary.  </p>"},{"location":"javascriptConcepts/operator/#arithmetic-operators","title":"\ud83d\udd39 Arithmetic Operators","text":"<p>Used to perform mathematical operations.</p> Operator Description <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulus (remainder) <code>**</code> Exponentiation <code>++</code> Increment <code>--</code> Decrement"},{"location":"javascriptConcepts/operator/#examples-arithmetic","title":"Examples \u2013 Arithmetic","text":"<pre><code>let a = 10;\nlet b = 3;\n\nconsole.log(a + b);  // 13\nconsole.log(a - b);  // 7\nconsole.log(a * b);  // 30\nconsole.log(a / b);  // 3.3333\nconsole.log(a % b);  // 1\nconsole.log(a ** 2); // 100\n\na++;\nconsole.log(a);      // 11\nb--;\nconsole.log(b);      // 2\n</code></pre> <p>Playwright Use Case: Calculating dynamic index for lists of elements or iterations.</p>"},{"location":"javascriptConcepts/operator/#assignment-operators","title":"\ud83d\udd39 Assignment Operators","text":"<p>Used to assign values to variables.</p> Operator Description <code>=</code> Assign <code>+=</code> Add and assign <code>-=</code> Subtract and assign <code>*=</code> Multiply and assign <code>/=</code> Divide and assign <code>%=</code> Modulus and assign"},{"location":"javascriptConcepts/operator/#examples-assignment","title":"Examples \u2013 Assignment","text":"<pre><code>let x = 5;\nx += 3;  // x = x + 3\nconsole.log(x); // 8\n\nx *= 2;  // x = x * 2\nconsole.log(x); // 16\n</code></pre>"},{"location":"javascriptConcepts/operator/#comparison-operators","title":"\ud83d\udd39 Comparison Operators","text":"<p>Used to compare values, return <code>true</code> or <code>false</code>.</p> Operator Description <code>==</code> Equal (value only) <code>===</code> Strict equal (value + type) <code>!=</code> Not equal <code>!==</code> Strict not equal <code>&gt;</code> Greater than <code>&lt;</code> Less than <code>&gt;=</code> Greater or equal <code>&lt;=</code> Less or equal"},{"location":"javascriptConcepts/operator/#examples-comparison","title":"Examples \u2013 Comparison","text":"<pre><code>let a = 5;\nlet b = \"5\";\n\nconsole.log(a == b);  // true (value equal)\nconsole.log(a === b); // false (type mismatch)\nconsole.log(a != b);  // false\nconsole.log(a !== b); // true\nconsole.log(a &gt; 3);   // true\nconsole.log(a &lt;= 5);  // true\n</code></pre> <p>Playwright Use Case: Assertions for element counts, text lengths, or response values.</p>"},{"location":"javascriptConcepts/operator/#logical-operators","title":"\ud83d\udd39 Logical Operators","text":"<p>Used to combine boolean expressions.</p> Operator Description <code>&amp;&amp;</code> AND <code>||</code> OR <code>!</code> NOT"},{"location":"javascriptConcepts/operator/#examples-logical","title":"Examples \u2013 Logical","text":"<pre><code>let isLoggedIn = true;\nlet hasAccess = false;\n\nconsole.log(isLoggedIn &amp;&amp; hasAccess); // false\nconsole.log(isLoggedIn || hasAccess); // true\nconsole.log(!isLoggedIn);             // false\n</code></pre> <p>Playwright Use Case: Conditional checks before clicking or filling fields.</p>"},{"location":"javascriptConcepts/operator/#ternary-operator","title":"\ud83d\udd39 Ternary Operator","text":"<p>A shorthand for <code>if...else</code> statements.</p>"},{"location":"javascriptConcepts/operator/#syntax","title":"Syntax","text":"<pre><code>condition ? expression_if_true : expression_if_false;\n</code></pre>"},{"location":"javascriptConcepts/operator/#examples-ternary","title":"Examples \u2013 Ternary","text":"<pre><code>let age = 18;\nlet message = age &gt;= 18 ? \"Adult\" : \"Minor\";\nconsole.log(message); // \"Adult\"\n</code></pre> <p>Playwright Use Case: Quick decision-making for optional actions, like filling optional forms.</p>"},{"location":"javascriptConcepts/operator/#bitwise-operators","title":"\ud83d\udd39 Bitwise Operators","text":"<p>Operate on binary representations of numbers. Rarely used in Playwright but good to know.</p> Operator Description <code>&amp;</code> AND <code>|</code> OR <code>^</code> XOR <code>~</code> NOT <code>&lt;&lt;</code> Left shift <code>&gt;&gt;</code> Right shift <code>&gt;&gt;&gt;</code> Zero-fill right shift"},{"location":"javascriptConcepts/operator/#examples-bitwise","title":"Examples \u2013 Bitwise","text":"<pre><code>let a = 5;  // 0101\nlet b = 3;  // 0011\n\nconsole.log(a &amp; b); // 1  (0001)\nconsole.log(a | b); // 7  (0111)\nconsole.log(a ^ b); // 6  (0110)\nconsole.log(~a);    // -6\n</code></pre>"},{"location":"javascriptConcepts/operator/#summary","title":"\u2705 Summary","text":"<ul> <li>Arithmetic \u2192 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code>, <code>**</code> </li> <li>Assignment \u2192 <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> </li> <li>Comparison \u2192 <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> </li> <li>Logical \u2192 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> </li> <li>Ternary \u2192 <code>condition ? expr1 : expr2</code> </li> <li>Bitwise \u2192 <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code> </li> </ul> <p>These operators are essential for calculations, validations, and conditional logic in Playwright tests.</p>"},{"location":"javascriptConcepts/variables/","title":"2. Variables (var, let, const) \u2013 Deep Dive","text":"<p>JavaScript provides three ways to declare variables: <code>var</code>, <code>let</code>, and <code>const</code>. While all can store values, they differ in scope, re-declaration rules, hoisting behavior, and mutability.  </p>"},{"location":"javascriptConcepts/variables/#var","title":"\ud83d\udd39 var","text":"<ul> <li>Function-scoped: A <code>var</code> declared inside a function is available throughout the function.  </li> <li>Ignores block scope: Declaring inside <code>if</code>, <code>for</code>, or <code>{}</code> does not limit its scope.  </li> <li>Hoisted: Moved to the top of the scope during compilation, initialized with <code>undefined</code>.  </li> <li>Allows re-declaration: You can declare the same variable again in the same scope (not recommended).  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-var-inside-block","title":"Example \u2013 var inside block","text":"<pre><code>if (true) {\n  var x = \"Hello\";\n}\nconsole.log(x); // \u2705 Accessible outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-var-inside-function","title":"Example \u2013 var inside function","text":"<pre><code>function testVar() {\n  if (true) {\n    var inside = \"Function scope\";\n  }\n  console.log(inside); // \u2705 Accessible anywhere inside the function\n}\ntestVar();\nconsole.log(typeof inside); // \u274c undefined globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-global-var-usage","title":"Example \u2013 global var usage","text":"<pre><code>var globalVar = \"I am global\";\n\nfunction showGlobal() {\n  console.log(globalVar); // \u2705 Accessible inside function\n}\n\nshowGlobal();\nconsole.log(globalVar); // \u2705 Accessible globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#let","title":"\ud83d\udd39 let","text":"<ul> <li>Block-scoped: Respects <code>{}</code> blocks like if, for, while.  </li> <li>No re-declaration: Cannot be declared twice in the same scope.  </li> <li>Hoisted but uninitialized: Exists in the Temporal Dead Zone (TDZ) until execution reaches its line.  </li> <li>Reassignment allowed.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-let-inside-block","title":"Example \u2013 let inside block","text":"<pre><code>if (true) {\n  let y = \"Inside block\";\n  console.log(y); // \u2705 Accessible here\n}\n// console.log(y); // \u274c ReferenceError outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-let-reassignment","title":"Example \u2013 let reassignment","text":"<pre><code>let age = 25;\nage = 30; // \u2705 Reassignment allowed\n// let age = 35; // \u274c Cannot redeclare in same scope\n</code></pre>"},{"location":"javascriptConcepts/variables/#const","title":"\ud83d\udd39 const","text":"<ul> <li>Block-scoped (like <code>let</code>).  </li> <li>Must be initialized at declaration.  </li> <li>Cannot be reassigned, but if it\u2019s an object/array, its contents can still be modified.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-const","title":"Example \u2013 const","text":"<pre><code>const country = \"India\";\n// country = \"USA\"; // \u274c Error: Cannot reassign\n\nconst obj = { name: \"Nitin\" };\nobj.name = \"Patil\"; // \u2705 Allowed (property changed)\nconsole.log(obj);   // { name: \"Patil\" }\n</code></pre>"},{"location":"javascriptConcepts/variables/#global-vs-local-with-var","title":"\ud83d\udd39 Global vs Local with var","text":"<ul> <li>Declaring a variable with <code>var</code> outside any function makes it global.  </li> <li>Reassigning it inside a function changes the global variable.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable instead of modifying it.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-reassignment-updates-global","title":"Example \u2013 Reassignment updates global","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction updateGlobal() {\n  name = \"Patil\";   // reassigns global\n}\nupdateGlobal();\nconsole.log(name);  // \u2705 Patil (global updated)\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-shadowing-with-var","title":"Example \u2013 Shadowing with var","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction shadowGlobal() {\n  var name = \"Local\";  // new local variable\n  console.log(\"Inside:\", name); // Local\n}\nshadowGlobal();\nconsole.log(\"Outside:\", name);  // Nitin (global unchanged)\n</code></pre>"},{"location":"javascriptConcepts/variables/#summary","title":"\u2705 Summary","text":"<ul> <li><code>var</code> \u2192 function-scoped, hoisted, allows re-declaration, unsafe in blocks.  </li> <li><code>let</code> \u2192 block-scoped, safer, hoisted but uninitialized until line of code.  </li> <li><code>const</code> \u2192 block-scoped, must be initialized, immutable binding but mutable objects.  </li> <li>Global vars can be reassigned inside functions.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable.</li> </ul>"},{"location":"mysql/aggregations-commands/","title":"Data Query Language (DQL) \u2013 Part 3: Aggregations","text":"<p>In this section, we will learn about aggregate functions in SQL: COUNT, SUM, AVG, GROUP BY, and HAVING.</p>"},{"location":"mysql/aggregations-commands/#sample-table-orders","title":"Sample Table: Orders","text":"OrderID Customer Product Quantity Price OrderDate 1 Amit Laptop 1 60000 2023-01-15 2 Riya Phone 2 20000 2023-01-20 3 Neha Laptop 1 60000 2023-02-05 4 Arjun Tablet 3 15000 2023-02-10 5 Priya Phone 1 20000 2023-02-18 6 Amit Tablet 2 15000 2023-03-01 7 Riya Laptop 1 60000 2023-03-12 8 Priya Phone 3 20000 2023-03-25 9 Arjun Laptop 2 60000 2023-04-02"},{"location":"mysql/aggregations-commands/#1-count-number-of-records","title":"1. COUNT \u2013 Number of Records","text":"<pre><code>SELECT COUNT(*) AS TotalOrders\nFROM Orders;\n</code></pre> <p>Output | TotalOrders | |-------------| | 9           |</p>"},{"location":"mysql/aggregations-commands/#2-sum-total-value","title":"2. SUM \u2013 Total Value","text":"<pre><code>SELECT SUM(Price * Quantity) AS TotalRevenue\nFROM Orders;\n</code></pre> <p>Output | TotalRevenue | |--------------| | 310000       |</p>"},{"location":"mysql/aggregations-commands/#3-avg-average-value","title":"3. AVG \u2013 Average Value","text":"<pre><code>SELECT AVG(Price) AS AvgPrice\nFROM Orders;\n</code></pre> <p>Output | AvgPrice | |----------| | 30000    |</p>"},{"location":"mysql/aggregations-commands/#4-group-by-aggregate-per-customer","title":"4. GROUP BY \u2013 Aggregate Per Customer","text":"<pre><code>SELECT Customer, COUNT(OrderID) AS OrdersPlaced\nFROM Orders\nGROUP BY Customer;\n</code></pre> <p>Output | Customer | OrdersPlaced | |----------|--------------| | Amit     | 2            | | Riya     | 2            | | Neha     | 1            | | Arjun    | 2            | | Priya    | 2            |</p>"},{"location":"mysql/aggregations-commands/#5-group-by-with-sum","title":"5. GROUP BY with SUM","text":"<pre><code>SELECT Product, SUM(Quantity) AS TotalSold\nFROM Orders\nGROUP BY Product;\n</code></pre> <p>Output | Product | TotalSold | |---------|-----------| | Laptop  | 4         | | Phone   | 6         | | Tablet  | 5         |</p>"},{"location":"mysql/aggregations-commands/#6-having-filter-groups","title":"6. HAVING \u2013 Filter Groups","text":"<pre><code>SELECT Customer, SUM(Price * Quantity) AS TotalSpent\nFROM Orders\nGROUP BY Customer\nHAVING SUM(Price * Quantity) &gt; 50000;\n</code></pre> <p>Output | Customer | TotalSpent | |----------|------------| | Amit     | 90000      | | Riya     | 100000     | | Arjun    | 150000     |</p>"},{"location":"mysql/aggregations-commands/#7-complex-example-1-multiple-aggregates","title":"7. Complex Example 1 \u2013 Multiple Aggregates","text":"<pre><code>SELECT Customer,\n       COUNT(OrderID) AS OrdersCount,\n       SUM(Price * Quantity) AS TotalSpent,\n       AVG(Price) AS AvgProductPrice\nFROM Orders\nGROUP BY Customer;\n</code></pre> <p>Output | Customer | OrdersCount | TotalSpent | AvgProductPrice | |----------|-------------|------------|-----------------| | Amit     | 2           | 90000      | 37500           | | Riya     | 2           | 100000     | 40000           | | Neha     | 1           | 60000      | 60000           | | Arjun    | 2           | 150000     | 37500           | | Priya    | 2           | 80000      | 20000           |</p>"},{"location":"mysql/aggregations-commands/#8-complex-example-2-aggregation-with-date-filtering","title":"8. Complex Example 2 \u2013 Aggregation with Date Filtering","text":"<pre><code>SELECT Product,\n       SUM(Quantity) AS SoldInFeb,\n       SUM(Price * Quantity) AS RevenueInFeb\nFROM Orders\nWHERE OrderDate BETWEEN '2023-02-01' AND '2023-02-28'\nGROUP BY Product;\n</code></pre> <p>Output | Product | SoldInFeb | RevenueInFeb | |---------|-----------|--------------| | Laptop  | 1         | 60000        | | Tablet  | 3         | 45000        | | Phone   | 1         | 20000        |</p> <p>\u2705 In this part, we covered: - <code>COUNT</code> \u2192 Number of rows - <code>SUM</code> \u2192 Total values - <code>AVG</code> \u2192 Average values - <code>GROUP BY</code> \u2192 Aggregates per group - <code>HAVING</code> \u2192 Filter groups based on aggregate condition - Complex Queries \u2192 Multiple aggregates + filtering by date  </p>"},{"location":"mysql/constrain/","title":"\ud83d\udea6 Why Do We Need Constraints?","text":"<p>Think of constraints as traffic rules for your database. - Without rules \u2192 cars can still move, but accidents happen. - With rules \u2192 movement is safe, organized, and predictable.  </p>"},{"location":"mysql/constrain/#example-tables-without-constraints","title":"\ud83d\uddc4\ufe0f Example Tables Without Constraints","text":""},{"location":"mysql/constrain/#1-without-constraints-messy-data","title":"1. Without Constraints (Messy Data)","text":""},{"location":"mysql/constrain/#students-table","title":"Students Table","text":"<pre><code>CREATE TABLE Students (\n    id INT,\n    firstname VARCHAR(50),\n    lastname VARCHAR(50),\n    address VARCHAR(100)\n);\n\nINSERT INTO Students (id, firstname, lastname, address) VALUES\n(1, 'Rahul', 'Sharma', 'Pune'),\n(1, 'Rahul', 'Sharma', 'Pune'),        -- Duplicate ID\n(2, 'Priya', 'Verma', 'Mumbai'),\n(3, NULL, 'Gupta', 'Delhi'),           -- Missing firstname\n(4, 'Sneha', 'Patil', 'Bangalore'),\n(5, 'Vikas', 'Kumar', 'Hyderabad'),\n(5, 'Vikas', 'Kumar', 'Hyderabad');    -- Duplicate ID\n</code></pre>"},{"location":"mysql/constrain/#marks-table","title":"Marks Table","text":"<pre><code>CREATE TABLE Marks (\n    student_id INT,\n    english INT,\n    math INT,\n    science INT,\n    total_marks INT\n);\n\nINSERT INTO Marks (student_id, english, math, science, total_marks) VALUES\n(1, 80, 90, 85, 255),\n(2, 70, 75, 88, 233),\n(100, 60, 65, 70, 195),                -- Orphan record\n(3, 120, 50, 60, 230),                 -- Invalid marks &gt; 100\n(4, NULL, 40, 50, 90),                 -- Missing marks\n(5, 88, 84, 91, 263),\n(5, 88, 84, 91, 263);                  -- Duplicate row\n</code></pre>"},{"location":"mysql/constrain/#sample-data-preview-messy","title":"Sample Data Preview (Messy)","text":"<p>Students Table</p> <pre><code>id | firstname | lastname | address\n---+-----------+----------+-----------\n1  | Rahul     | Sharma   | Pune\n1  | Rahul     | Sharma   | Pune       &lt;-- Duplicate\n2  | Priya     | Verma    | Mumbai\n3  | NULL      | Gupta    | Delhi      &lt;-- Missing firstname\n4  | Sneha     | Patil    | Bangalore\n5  | Vikas     | Kumar    | Hyderabad\n5  | Vikas     | Kumar    | Hyderabad  &lt;-- Duplicate\n</code></pre> <p>Marks Table</p> <pre><code>student_id | english | math | science | total_marks\n-----------+---------+------+---------+-------------\n1          | 80      | 90   | 85      | 255\n2          | 70      | 75   | 88      | 233\n100        | 60      | 65   | 70      | 195   &lt;-- Orphan\n3          | 120     | 50   | 60      | 230   &lt;-- Invalid marks\n4          | NULL    | 40   | 50      | 90    &lt;-- Missing marks\n5          | 88      | 84   | 91      | 263\n5          | 88      | 84   | 91      | 263   &lt;-- Duplicate\n</code></pre> <p>\u2705 These tables work fine, but without constraints problems can arise (duplicates, orphan records, missing data).  </p>"},{"location":"mysql/constrain/#1-primary-key","title":"1. PRIMARY KEY","text":"<p>\ud83d\udc49 Makes sure each row is unique and identifiable.  </p> <p>Without Primary Key</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (1, 'Rahul', 'Sharma', 'Pune');\n\nINSERT INTO Students (id, firstname, lastname, address)\nVALUES (1, 'AnotherRahul', 'Sharma', 'Pune'); -- Duplicate allowed\n</code></pre> <p>\u274c Now two students with same ID exist \u2192 confusion in reports.  </p> <p>With Primary Key</p> <pre><code>id INT PRIMARY KEY\n</code></pre> <p>\u2705 Database stops duplicate rows.  </p>"},{"location":"mysql/constrain/#2-foreign-key","title":"2. FOREIGN KEY","text":"<p>\ud83d\udc49 Ensures that a value in one table must exist in another.  </p> <p>Without Foreign Key</p> <pre><code>INSERT INTO Marks (student_id, english, math, science, total_marks)\nVALUES (100, 80, 90, 85, 255); -- Student 100 doesn't exist\n</code></pre> <p>\u274c Marks exist for a non-existent student (orphan record).  </p> <p>With Foreign Key</p> <pre><code>FOREIGN KEY (student_id) REFERENCES Students(id)\n</code></pre> <p>\u2705 Database prevents this.  </p>"},{"location":"mysql/constrain/#3-unique","title":"3. UNIQUE","text":"<p>\ud83d\udc49 Stops duplicate values in a column that should be unique (like email).  </p> <p>Without UNIQUE</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (7, 'Rohit', 'Sharma', 'Mumbai');\n\nINSERT INTO Students (id, firstname, lastname, address)\nVALUES (8, 'Rohit', 'Sharma', 'Mumbai'); -- Duplicate allowed\n</code></pre> <p>With UNIQUE</p> <pre><code>email VARCHAR(100) UNIQUE\n</code></pre> <p>\u2705 Database blocks duplicate emails.  </p>"},{"location":"mysql/constrain/#4-not-null","title":"4. NOT NULL","text":"<p>\ud83d\udc49 Ensures important data is not left blank.  </p> <p>Without NOT NULL</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (9, NULL, 'Sharma', 'Delhi'); -- Allowed\n</code></pre> <p>\u274c Student without a name \u2192 makes no sense.  </p> <p>With NOT NULL</p> <pre><code>firstname VARCHAR(50) NOT NULL\n</code></pre> <p>\u2705 Database forces valid data.  </p>"},{"location":"mysql/constrain/#summary-in-easy-words","title":"\u2705 Summary in Easy Words","text":"<ul> <li>Primary Key \u2192 Every row should have a unique ID \u2192 No duplicates.  </li> <li>Foreign Key \u2192 Links two tables \u2192 No orphan data.  </li> <li>Unique \u2192 Prevents duplicate values.  </li> <li>Not Null \u2192 Some fields must always have a value.  </li> </ul> <p>\ud83d\udc49 Without constraints \u2192 data looks fine in the beginning but later causes duplicates, orphan rows, missing data, wrong ETL reports.</p>"},{"location":"mysql/dcl-commands/","title":"Data Control Language (DCL) in SQL","text":""},{"location":"mysql/dcl-commands/#what-is-dcl","title":"\ud83d\udd39 What is DCL?","text":"<p>DCL commands are used to control access and permissions in a database. They define who can access, modify, or manage database objects.</p>"},{"location":"mysql/dcl-commands/#key-dcl-commands-in-depth","title":"\ud83d\udd39 Key DCL Commands (in depth)","text":""},{"location":"mysql/dcl-commands/#1-grant","title":"1. GRANT","text":"<ul> <li>Provides privileges to a user.</li> </ul> <pre><code>GRANT SELECT, INSERT ON Employee TO user1;\n</code></pre>"},{"location":"mysql/dcl-commands/#2-revoke","title":"2. REVOKE","text":"<ul> <li>Removes previously granted privileges.</li> </ul> <pre><code>REVOKE INSERT ON Employee FROM user1;\n</code></pre>"},{"location":"mysql/dcl-commands/#3-deny-sql-server","title":"3. DENY (SQL Server)","text":"<ul> <li>Explicitly denies permission to users.</li> </ul> <pre><code>DENY DELETE ON Employee TO user1;\n</code></pre>"},{"location":"mysql/dcl-commands/#pros-cons-of-dcl","title":"\ud83d\udd39 Pros &amp; Cons of DCL","text":""},{"location":"mysql/dcl-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Security \u2192 Ensures only authorized users access data.  </li> <li>Granularity \u2192 Assign specific privileges per object.  </li> <li>Control \u2192 Manage roles and user access.  </li> <li>Scalability \u2192 Assign privileges to roles for teams.</li> </ol>"},{"location":"mysql/dcl-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Mismanagement Risk \u2192 Wrong grants expose sensitive data.  </li> <li>Complexity \u2192 Hard to manage in large organizations.  </li> <li>Performance Overhead \u2192 Checking permissions for each query.  </li> <li>Inconsistency \u2192 Syntax varies across databases.</li> </ol>"},{"location":"mysql/dcl-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage GRANT Give permissions \u2705 Yes Allow SELECT on Employee REVOKE Remove permissions \u2705 Yes Remove INSERT privilege DENY Explicitly block access \u2705 Yes Prevent DELETE on Employee"},{"location":"mysql/dcl-commands/#dcl-commands-feature-comparison","title":"\ud83d\udcca DCL Commands \u2013 Feature Comparison","text":"Command Rollback Data Loss Structure Change Typical Use Case GRANT \u2705 Yes \u274c No \u274c No Provide privileges REVOKE \u2705 Yes \u274c No \u274c No Remove privileges DENY \u2705 Yes \u274c No \u274c No Restrict user actions"},{"location":"mysql/ddl-commands/","title":"Data Definition Language (DDL) in SQL","text":""},{"location":"mysql/ddl-commands/#what-is-ddl","title":"\ud83d\udd39 What is DDL?","text":"<p>DDL commands are used to define, modify, and manage the structure of database objects (like tables, views, schemas, indexes).  </p> <p>These commands work at the schema level (structure), not on individual rows of data.  </p>"},{"location":"mysql/ddl-commands/#key-ddl-commands-in-depth","title":"\ud83d\udd39 Key DDL Commands (in depth)","text":""},{"location":"mysql/ddl-commands/#1-create","title":"1. CREATE","text":"<ul> <li>Used to create database objects such as tables, schemas, views, or indexes.  </li> <li>You must define the structure (columns, data types, constraints).  </li> </ul> <p>Example </p> <pre><code>CREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2) CHECK (Salary &gt; 0),\n    DepartmentID INT,\n    HireDate DATE DEFAULT CURRENT_DATE\n);\n</code></pre>"},{"location":"mysql/ddl-commands/#2-alter","title":"2. ALTER","text":"<ul> <li>Used to modify existing objects (add/remove/rename columns, change data types, add constraints).  </li> </ul> <p>Example </p> <pre><code>-- Add a new column\nALTER TABLE Employee ADD Age INT;\n\n-- Modify column type\nALTER TABLE Employee MODIFY Salary DECIMAL(12,2);\n\n-- Drop a column\nALTER TABLE Employee DROP COLUMN Age;\n\n-- Add a foreign key\nALTER TABLE Employee\nADD CONSTRAINT fk_dept FOREIGN KEY (DepartmentID) REFERENCES Department(DeptID);\n</code></pre>"},{"location":"mysql/ddl-commands/#3-drop","title":"3. DROP","text":"<ul> <li>Deletes a database object completely (table, view, database, index).  </li> <li>\u26a0\ufe0f Removes structure and all data.  </li> </ul> <p>Example </p> <pre><code>DROP TABLE Employee;\nDROP DATABASE HR;\n</code></pre>"},{"location":"mysql/ddl-commands/#4-truncate","title":"4. TRUNCATE","text":"<ul> <li>Removes all rows from a table, but keeps the structure.  </li> <li>Much faster than <code>DELETE</code> (no logging of each row).  </li> <li>Cannot be rolled back in some DBs.  </li> </ul> <p>Example </p> <pre><code>TRUNCATE TABLE Employee;\n</code></pre>"},{"location":"mysql/ddl-commands/#5-rename","title":"5. RENAME","text":"<ul> <li>Renames a database object (varies slightly across RDBMS).  </li> </ul> <p>Example (MySQL / Oracle)  </p> <pre><code>RENAME TABLE Employee TO Staff;\n</code></pre>"},{"location":"mysql/ddl-commands/#6-comment","title":"6. COMMENT","text":"<ul> <li>Add descriptions to database objects. (Supported in Oracle, PostgreSQL, etc.)  </li> </ul> <p>Example </p> <pre><code>COMMENT ON TABLE Employee IS 'Stores employee details';\nCOMMENT ON COLUMN Employee.Salary IS 'Monthly Salary in INR';\n</code></pre>"},{"location":"mysql/ddl-commands/#pros-cons-of-ddl","title":"\ud83d\udd39 Pros &amp; Cons of DDL","text":""},{"location":"mysql/ddl-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Schema Control \u2192 DDL provides strong control over database design (tables, keys, indexes).  </li> <li>Integrity Enforcement \u2192 Constraints (<code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>CHECK</code>) ensure data accuracy.  </li> <li>Performance \u2192 With indexes and partitions defined via DDL, queries become faster.  </li> <li>Automation Friendly \u2192 You can version-control DDL scripts for CI/CD pipelines.  </li> <li>Flexibility \u2192 Easily modify structures as business needs evolve.  </li> </ol>"},{"location":"mysql/ddl-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Destructive Nature </li> <li><code>DROP</code> and <code>TRUNCATE</code> permanently remove data (can\u2019t easily rollback).  </li> <li> <p>Small mistake \u2192 huge data loss.  </p> </li> <li> <p>Locking Issues </p> </li> <li> <p>Some DDL operations lock tables (no read/write allowed until completed).  </p> </li> <li> <p>Dependent Objects </p> </li> <li> <p>Dropping/altering tables can break views, stored procedures, or queries that depend on them.  </p> </li> <li> <p>Environment Differences </p> </li> <li> <p>Syntax varies across RDBMS (MySQL, Oracle, PostgreSQL). Example: <code>ALTER</code> column syntax differs.  </p> </li> <li> <p>Not Transaction-Safe (in some DBs) </p> </li> <li>In MySQL, some DDL operations auto-commit \u2192 cannot be rolled back.  </li> </ol>"},{"location":"mysql/ddl-commands/#advantages-explained-with-examples","title":"\ud83d\udd39 Advantages Explained with Examples","text":""},{"location":"mysql/ddl-commands/#1-schema-control","title":"1. Schema Control","text":"<p>DDL lets you define strong structures with relationships.</p> <pre><code>CREATE TABLE Department (\n    DeptID INT PRIMARY KEY,\n    DeptName VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2),\n    DeptID INT,\n    FOREIGN KEY (DeptID) REFERENCES Department(DeptID)\n);\n</code></pre> <p>\ud83d\udc49 Employees must belong to a valid department.</p>"},{"location":"mysql/ddl-commands/#2-integrity-enforcement","title":"2. Integrity Enforcement","text":"<p>Constraints enforce data accuracy.</p> <pre><code>CREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2) CHECK (Salary &gt; 0),\n    DeptID INT NOT NULL,\n    FOREIGN KEY (DeptID) REFERENCES Department(DeptID)\n);\n</code></pre> <p>\ud83d\udc49 Prevents negative salaries and missing departments.</p>"},{"location":"mysql/ddl-commands/#3-performance-indexes-partitions","title":"3. Performance (Indexes &amp; Partitions)","text":"<p>Indexes and partitions improve query speed.</p> <pre><code>-- Index for faster salary searches\nCREATE INDEX idx_salary ON Employee(Salary);\n\n-- Partition sales table by year\nCREATE TABLE Sales (\n    SaleID INT PRIMARY KEY,\n    SaleDate DATE,\n    Amount DECIMAL(10,2)\n)\nPARTITION BY RANGE (YEAR(SaleDate)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025)\n);\n</code></pre> <p>\ud83d\udc49 Queries on salaries or specific years run faster.</p>"},{"location":"mysql/ddl-commands/#4-automation-friendly-cicd","title":"4. Automation Friendly (CI/CD)","text":"<p>DDL scripts can be stored and executed in deployments.</p> <pre><code>-- migration_v2.sql\nALTER TABLE Employee ADD COLUMN Email VARCHAR(100);\n</code></pre> <p>\ud83d\udc49 Keeps dev, test, and prod in sync automatically.</p>"},{"location":"mysql/ddl-commands/#5-flexibility-evolving-structures","title":"5. Flexibility (Evolving Structures)","text":"<p>Easily adapt schema to new business needs.</p> <pre><code>ALTER TABLE Employee ADD COLUMN PhoneNumber VARCHAR(15);\nALTER TABLE Employee RENAME COLUMN Name TO FullName;\n</code></pre> <p>\ud83d\udc49 Business changes are easily handled.</p>"},{"location":"mysql/ddl-commands/#summary-table","title":"\u2705 Summary Table","text":"Advantage What it Means Example Schema Control Strong control over tables, keys, relationships Employee \u2192 Department with foreign key Integrity Enforcement Constraints ensure only valid data CHECK (Salary &gt; 0), NOT NULL Performance Indexes &amp; partitions speed up queries <code>CREATE INDEX idx_salary</code> Automation Friendly DDL scripts can be versioned in Git &amp; run in CI/CD Migration scripts for deployments Flexibility Schema can evolve with business needs <code>ALTER TABLE Employee ADD PhoneNumber</code>"},{"location":"mysql/ddl-commands/#ddl-commands-feature-comparison","title":"\ud83d\udcca DDL Commands \u2013 Feature Comparison","text":"Command Rollback Possible Data Loss Structure Change Typical Use Case CREATE \u2705 Yes (before commit) \u274c No \u2705 Creates new object Create tables, views, indexes ALTER \u2705 Yes (before commit) \u274c No \u2705 Modifies structure Add/modify columns, constraints DROP \u2705 Yes (before commit) \u2705 Yes (all data lost) \u2705 Removes object completely Delete table/schema permanently TRUNCATE \u2705 Yes (before commit) \u2705 Yes (all rows deleted) \u274c No (structure remains) Quickly remove all records RENAME \u2705 Yes (before commit) \u274c No \u2705 Only name changes Rename table/column COMMENT \u2705 Yes (before commit) \u274c No \u274c No (metadata only) Add description to objects CREATE INDEX \u2705 Yes (before commit) \u274c No \u2705 Creates performance structure Improve query performance DROP INDEX \u2705 Yes (before commit) \u274c No (only index removed) \u2705 Removes performance structure Free up space, remove unused index"},{"location":"mysql/ddl-commands/#key-notes","title":"\ud83d\udd11 Key Notes","text":"<ul> <li>Rollback \u2192 Possible only until you <code>COMMIT</code> (some DBs auto-commit DDL, e.g., Oracle).  </li> <li>Data Loss \u2192 <code>DROP</code> &amp; <code>TRUNCATE</code> cause data removal; <code>ALTER</code>/<code>RENAME</code> don\u2019t.  </li> <li>Structure Change \u2192 All DDL affects schema except <code>COMMENT</code>.  </li> <li>Performance Impact \u2192 <code>TRUNCATE</code> is faster than <code>DELETE</code>; indexes speed queries but slow inserts/updates.  </li> </ul>"},{"location":"mysql/dml-commands/","title":"Data Manipulation Language (DML) in SQL","text":""},{"location":"mysql/dml-commands/#what-is-dml","title":"\ud83d\udd39 What is DML?","text":"<p>DML commands are used to manipulate and manage the data stored inside database tables. Unlike DDL, which defines the schema, DML works on the actual rows (records) inside the tables.</p>"},{"location":"mysql/dml-commands/#key-dml-commands-in-depth","title":"\ud83d\udd39 Key DML Commands (in depth)","text":""},{"location":"mysql/dml-commands/#1-insert","title":"1. INSERT","text":"<ul> <li>Adds new records into a table.</li> </ul> <pre><code>INSERT INTO Employee (EmpID, Name, Salary)\nVALUES (101, 'Amit Sharma', 55000.00);\n</code></pre>"},{"location":"mysql/dml-commands/#2-update","title":"2. UPDATE","text":"<ul> <li>Modifies existing records.</li> </ul> <pre><code>UPDATE Employee\nSET Salary = Salary + 5000\nWHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/dml-commands/#3-delete","title":"3. DELETE","text":"<ul> <li>Removes records from a table.</li> </ul> <pre><code>DELETE FROM Employee WHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/dml-commands/#4-merge-upsert","title":"4. MERGE (UPSERT)","text":"<ul> <li>Combines INSERT + UPDATE + DELETE in one.</li> </ul> <pre><code>MERGE INTO Employee AS E\nUSING NewEmployee AS N\nON (E.EmpID = N.EmpID)\nWHEN MATCHED THEN\n    UPDATE SET E.Salary = N.Salary\nWHEN NOT MATCHED THEN\n    INSERT (EmpID, Name, Salary) VALUES (N.EmpID, N.Name, N.Salary);\n</code></pre>"},{"location":"mysql/dml-commands/#pros-cons-of-dml","title":"\ud83d\udd39 Pros &amp; Cons of DML","text":""},{"location":"mysql/dml-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Direct Data Control \u2192 Can manipulate specific rows.  </li> <li>Flexible \u2192 SELECT with filters, joins, aggregations.  </li> <li>Transaction Safe \u2192 Rollback possible.  </li> <li>Granular \u2192 Row-level operations.</li> </ol>"},{"location":"mysql/dml-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Data Loss Risk \u2192 UPDATE/DELETE without WHERE affects all rows.  </li> <li>Performance Issues \u2192 Large queries slow performance.  </li> <li>Locking Problems \u2192 Concurrent transactions may cause locks.  </li> <li>Index Dependency \u2192 Without indexes, queries may be slow.</li> </ol>"},{"location":"mysql/dml-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage INSERT Add new records \u2705 Yes Add employee UPDATE Modify existing records \u2705 Yes Increase salary DELETE Remove records \u2705 Yes Delete inactive employee MERGE Insert/Update/Delete in one \u2705 Yes Sync staging &amp; prod data"},{"location":"mysql/dml-commands/#dml-commands-feature-comparison","title":"\ud83d\udcca DML Commands \u2013 Feature Comparison","text":"Command Rollback Data Loss Risk Structure Change Typical Use Case INSERT \u2705 Yes \u274c No \u274c No Add new data UPDATE \u2705 Yes \u26a0\ufe0f Yes \u274c No Modify existing data DELETE \u2705 Yes \u26a0\ufe0f Yes \u274c No Remove rows MERGE \u2705 Yes \u26a0\ufe0f Possible \u274c No Sync datasets efficiently"},{"location":"mysql/dql-basics/","title":"Data Query Language (DQL) \u2013 Part 1: Basics","text":"<p>In this section, we will learn the basics of SELECT: filtering, pattern matching, sorting, distinct values, and aliases.</p>"},{"location":"mysql/dql-basics/#sample-table-employee","title":"Sample Table: Employee","text":"EmpID Name Department Salary HireDate 101 Amit Sharma HR 50000 2020-01-15 102 Riya Mehta IT 65000 2021-03-22 103 Arjun Rao Finance 55000 2019-07-09 104 Neha Singh IT 75000 2022-05-01 105 Rohit Verma HR 48000 2023-02-10 106 Priya Nair IT 65000 2020-12-11"},{"location":"mysql/dql-basics/#1-select-fetch-all-columns","title":"1. SELECT \u2013 Fetch All Columns","text":"<pre><code>SELECT * FROM Employee;\n</code></pre> <p>Output | EmpID | Name        | Department | Salary | HireDate   | |-------|-------------|------------|--------|------------| | 101   | Amit Sharma | HR         | 50000  | 2020-01-15 | | 102   | Riya Mehta  | IT         | 65000  | 2021-03-22 | | 103   | Arjun Rao   | Finance    | 55000  | 2019-07-09 | | 104   | Neha Singh  | IT         | 75000  | 2022-05-01 | | 105   | Rohit Verma | HR         | 48000  | 2023-02-10 | | 106   | Priya Nair  | IT         | 65000  | 2020-12-11 |</p>"},{"location":"mysql/dql-basics/#2-where-filter-rows","title":"2. WHERE \u2013 Filter Rows","text":"<pre><code>SELECT Name, Department, Salary\nFROM Employee\nWHERE Department = 'IT';\n</code></pre> <p>Output | Name       | Department | Salary | |------------|------------|--------| | Riya Mehta | IT         | 65000  | | Neha Singh | IT         | 75000  | | Priya Nair | IT         | 65000  |</p>"},{"location":"mysql/dql-basics/#3-like-pattern-matching","title":"3. LIKE \u2013 Pattern Matching","text":""},{"location":"mysql/dql-basics/#a-starts-with-pattern","title":"a) Starts With Pattern","text":"<pre><code>SELECT Name FROM Employee\nWHERE Name LIKE 'R%';\n</code></pre> <p>Output | Name        | |-------------| | Riya Mehta  | | Rohit Verma |</p>"},{"location":"mysql/dql-basics/#b-ends-with-pattern","title":"b) Ends With Pattern","text":"<pre><code>SELECT Name FROM Employee\nWHERE Name LIKE '%a';\n</code></pre> <p>Output | Name       | |------------| | Riya Mehta | | Priya Nair |</p>"},{"location":"mysql/dql-basics/#c-contains-substring","title":"c) Contains Substring","text":"<pre><code>SELECT Name FROM Employee\nWHERE Name LIKE '%Singh%';\n</code></pre> <p>Output | Name       | |------------| | Neha Singh |</p>"},{"location":"mysql/dql-basics/#d-single-character-wildcard-_","title":"d) Single Character Wildcard (_)","text":"<pre><code>SELECT Name FROM Employee\nWHERE Name LIKE '_mit%';\n</code></pre> <p>Output | Name        | |-------------| | Amit Sharma |</p>"},{"location":"mysql/dql-basics/#e-combined-pattern","title":"e) Combined Pattern","text":"<pre><code>SELECT Name FROM Employee\nWHERE Name LIKE 'R%a';\n</code></pre> <p>Output | Name       | |------------| | Riya Mehta | | Priya Nair |</p>"},{"location":"mysql/dql-basics/#4-order-by-sort-results","title":"4. ORDER BY \u2013 Sort Results","text":"<pre><code>SELECT Name, Salary\nFROM Employee\nORDER BY Salary DESC;\n</code></pre> <p>Output | Name       | Salary | |------------|--------| | Neha Singh | 75000  | | Riya Mehta | 65000  | | Priya Nair | 65000  | | Arjun Rao  | 55000  | | Amit Sharma| 50000  | | Rohit Verma| 48000  |</p>"},{"location":"mysql/dql-basics/#5-distinct-unique-values","title":"5. DISTINCT \u2013 Unique Values","text":"<pre><code>SELECT DISTINCT Department\nFROM Employee;\n</code></pre> <p>Output | Department | |------------| | HR         | | IT         | | Finance    |</p>"},{"location":"mysql/dql-basics/#6-aliases-renaming-columns","title":"6. ALIASES \u2013 Renaming Columns","text":"<pre><code>SELECT Name AS EmployeeName,\n       Salary AS MonthlySalary\nFROM Employee;\n</code></pre> <p>Output | EmployeeName | MonthlySalary | |--------------|---------------| | Amit Sharma  | 50000         | | Riya Mehta   | 65000         | | Arjun Rao    | 55000         | | Neha Singh   | 75000         | | Rohit Verma  | 48000         | | Priya Nair   | 65000         |</p> <p>\u2705 In this part, we covered: - <code>SELECT *</code> \u2192 Fetch all columns - <code>WHERE</code> \u2192 Filter rows - <code>LIKE</code> \u2192 Pattern matching (starts, ends, contains, single char, combined) - <code>ORDER BY</code> \u2192 Sort results - <code>DISTINCT</code> \u2192 Get unique values - <code>ALIASES</code> \u2192 Rename output columns  </p> <p>Next: Part 2 (Joins) \u2013 Learn INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN with multiple tables.</p>"},{"location":"mysql/dql-commands/","title":"Data Query Language (DQL) in SQL","text":""},{"location":"mysql/dql-commands/#what-is-dql","title":"\ud83d\udd39 What is DQL?","text":"<p>DQL commands are used to retrieve data from database tables. It primarily deals with queries to fetch results.</p>"},{"location":"mysql/dql-commands/#key-dql-command","title":"\ud83d\udd39 Key DQL Command","text":""},{"location":"mysql/dql-commands/#1-select","title":"1. SELECT","text":"<ul> <li>Fetches data from tables with conditions, joins, and aggregations.</li> </ul> <pre><code>-- Get all employees\nSELECT * FROM Employee;\n\n-- Get employees with salary &gt; 50k\nSELECT Name, Salary FROM Employee WHERE Salary &gt; 50000;\n\n-- Aggregation\nSELECT DepartmentID, AVG(Salary) AS AvgSalary\nFROM Employee\nGROUP BY DepartmentID\nHAVING AVG(Salary) &gt; 50000;\n</code></pre>"},{"location":"mysql/dql-commands/#pros-cons-of-dql","title":"\ud83d\udd39 Pros &amp; Cons of DQL","text":""},{"location":"mysql/dql-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Powerful Retrieval \u2192 Fetch specific or aggregated data.  </li> <li>Flexible Queries \u2192 Supports joins, subqueries, aggregations.  </li> <li>Analytics Ready \u2192 Ideal for reporting.  </li> <li>Safe \u2192 Does not modify data (read-only).</li> </ol>"},{"location":"mysql/dql-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Performance Impact \u2192 Complex queries may be slow.  </li> <li>Requires Indexes \u2192 To optimize performance.  </li> <li>Read-only \u2192 Cannot insert/update/delete.  </li> <li>Locks \u2192 Long-running queries can block resources.</li> </ol>"},{"location":"mysql/dql-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage SELECT Retrieve data (query) N/A Get employees"},{"location":"mysql/dql-commands/#dql-command-feature-comparison","title":"\ud83d\udcca DQL Command \u2013 Feature Comparison","text":"Command Rollback Data Loss Structure Change Typical Use Case SELECT N/A \u274c No \u274c No Fetch rows of data"},{"location":"mysql/joins-command/","title":"Data Query Language (DQL) \u2013 Part 2: Joins","text":"<p>In this section, we will learn INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN with clear inputs and outputs. We\u2019ll use four sample tables: Employees, Departments, Projects, EmployeeProject.</p>"},{"location":"mysql/joins-command/#sample-tables","title":"Sample Tables","text":""},{"location":"mysql/joins-command/#employees","title":"Employees","text":"EmpID Name DeptID 101 Amit Sharma 1 102 Riya Mehta 2 103 Arjun Rao 3 104 Neha Singh 2 105 Rohit Verma nan 106 Priya Nair 5"},{"location":"mysql/joins-command/#departments","title":"Departments","text":"DeptID DeptName 1 HR 2 IT 3 Finance 4 Marketing"},{"location":"mysql/joins-command/#projects","title":"Projects","text":"ProjID ProjName DeptID 201 Portal Revamp 2 202 Payroll Cleanup 3 203 Hiring Sprint 1 204 Brand Campaign 4"},{"location":"mysql/joins-command/#employeeproject-many-to-many-hours","title":"EmployeeProject (many-to-many + hours)","text":"EmpID ProjID Hours 101 203 20 102 201 40 104 201 35 103 202 25 105 204 10 106 201 15"},{"location":"mysql/joins-command/#1-inner-join-only-matching-rows-in-both-tables","title":"1) INNER JOIN \u2013 Only matching rows in both tables","text":"<p>Get each employee\u2019s department name (employees without department are excluded).</p> <pre><code>SELECT e.EmpID, e.Name, d.DeptName\nFROM Employees e\nINNER JOIN Departments d ON e.DeptID = d.DeptID\nORDER BY e.EmpID;\n</code></pre> <p>Output |   EmpID | Name        | DeptName   | |--------:|:------------|:-----------| |     101 | Amit Sharma | HR         | |     102 | Riya Mehta  | IT         | |     103 | Arjun Rao   | Finance    | |     104 | Neha Singh  | IT         |</p>"},{"location":"mysql/joins-command/#2-left-join-all-rows-from-left-employees-matched-departments-if-any","title":"2) LEFT JOIN \u2013 All rows from left (Employees), matched Departments if any","text":"<p>Shows all employees; missing departments appear as NULL.</p> <pre><code>SELECT e.EmpID, e.Name, d.DeptName\nFROM Employees e\nLEFT JOIN Departments d ON e.DeptID = d.DeptID\nORDER BY e.EmpID;\n</code></pre> <p>Output |   EmpID | Name        | DeptName   | |--------:|:------------|:-----------| |     101 | Amit Sharma | HR         | |     102 | Riya Mehta  | IT         | |     103 | Arjun Rao   | Finance    | |     104 | Neha Singh  | IT         | |     105 | Rohit Verma | nan        | |     106 | Priya Nair  | nan        |</p>"},{"location":"mysql/joins-command/#3-right-join-all-rows-from-right-departments-matched-employees-if-any","title":"3) RIGHT JOIN \u2013 All rows from right (Departments), matched Employees if any","text":"<p>Shows all departments; departments without employees show NULLs for employee columns.</p> <pre><code>SELECT d.DeptID, d.DeptName, e.EmpID, e.Name\nFROM Employees e\nRIGHT JOIN Departments d ON e.DeptID = d.DeptID\nORDER BY d.DeptID, e.EmpID;\n</code></pre> <p>Output |   DeptID | DeptName   |   EmpID | Name        | |---------:|:-----------|--------:|:------------| |        1 | HR         |     101 | Amit Sharma | |        2 | IT         |     102 | Riya Mehta  | |        2 | IT         |     104 | Neha Singh  | |        3 | Finance    |     103 | Arjun Rao   | |        4 | Marketing  |     nan | nan         |</p>"},{"location":"mysql/joins-command/#4-full-outer-join-all-rows-from-both-sides","title":"4) FULL OUTER JOIN \u2013 All rows from both sides","text":"<p>Includes employees without departments and departments without employees.</p> <p>Note: Some databases (e.g., MySQL) don\u2019t support <code>FULL JOIN</code>. You can emulate it using <code>LEFT JOIN UNION RIGHT JOIN</code>.</p> <pre><code>-- Standard syntax (supported in SQL Server, PostgreSQL, etc.)\nSELECT e.EmpID, e.Name, e.DeptID, d.DeptName\nFROM Employees e\nFULL OUTER JOIN Departments d ON e.DeptID = d.DeptID\nORDER BY e.DeptID, e.EmpID;\n\n-- MySQL-compatible workaround\nSELECT e.EmpID, e.Name, e.DeptID, d.DeptName\nFROM Employees e\nLEFT JOIN Departments d ON e.DeptID = d.DeptID\nUNION\nSELECT e.EmpID, e.Name, e.DeptID, d.DeptName\nFROM Employees e\nRIGHT JOIN Departments d ON e.DeptID = d.DeptID\nORDER BY DeptID, EmpID;\n</code></pre> <p>Output |   EmpID | Name        |   DeptID | DeptName   | |--------:|:------------|---------:|:-----------| |     101 | Amit Sharma |        1 | HR         | |     102 | Riya Mehta  |        2 | IT         | |     104 | Neha Singh  |        2 | IT         | |     103 | Arjun Rao   |        3 | Finance    | |     nan | nan         |        4 | Marketing  | |     106 | Priya Nair  |        5 | nan        | |     105 | Rohit Verma |      nan | nan        |</p>"},{"location":"mysql/joins-command/#5-inner-join-with-filter-ordering","title":"5) INNER JOIN with filter + ordering","text":"<p>Employees in IT or Finance, sorted by department then name.</p> <pre><code>SELECT e.Name, d.DeptName, e.EmpID\nFROM Employees e\nINNER JOIN Departments d ON e.DeptID = d.DeptID\nWHERE d.DeptName IN ('IT','Finance')\nORDER BY d.DeptName, e.Name;\n</code></pre> <p>Output | Name       | DeptName   |   EmpID | |:-----------|:-----------|--------:| | Arjun Rao  | Finance    |     103 | | Neha Singh | IT         |     104 | | Riya Mehta | IT         |     102 |</p>"},{"location":"mysql/joins-command/#complex-examples","title":"Complex Examples","text":""},{"location":"mysql/joins-command/#complex-a-multi-join-aggregation","title":"Complex A) Multi-join + Aggregation","text":"<p>Total hours and unique contributors per project and department.</p> <pre><code>SELECT d.DeptName,\n       p.ProjName,\n       SUM(ep.Hours)    AS TotalHours,\n       COUNT(DISTINCT e.EmpID) AS Contributors\nFROM EmployeeProject ep\nJOIN Employees e   ON ep.EmpID = e.EmpID\nJOIN Projects  p   ON ep.ProjID = p.ProjID\nLEFT JOIN Departments d ON p.DeptID = d.DeptID\nGROUP BY d.DeptName, p.ProjName\nORDER BY d.DeptName, p.ProjName;\n</code></pre> <p>Output | DeptName   | ProjName        |   TotalHours |   Contributors | |:-----------|:----------------|-------------:|---------------:| | Finance    | Payroll Cleanup |           25 |              1 | | HR         | Hiring Sprint   |           20 |              1 | | IT         | Portal Revamp   |           90 |              3 | | Marketing  | Brand Campaign  |           10 |              1 |</p>"},{"location":"mysql/joins-command/#complex-b-self-join-coworker-pairs-in-the-same-department","title":"Complex B) Self-join \u2013 Coworker pairs in the same department","text":"<p>List all unique pairs of employees who are in the same department (NULL departments excluded).</p> <pre><code>SELECT a.DeptID, a.Name AS EmployeeA, b.Name AS EmployeeB\nFROM Employees a\nJOIN Employees b ON a.DeptID = b.DeptID AND a.EmpID &lt; b.EmpID\nWHERE a.DeptID IS NOT NULL\nORDER BY a.DeptID, EmployeeA, EmployeeB;\n</code></pre> <p>Output |   DeptID | EmployeeA   | EmployeeB   | |---------:|:------------|:------------| |        2 | Riya Mehta  | Neha Singh  |</p> <p>\u2705 In this part, we covered: - <code>INNER JOIN</code> \u2192 Only matching rows - <code>LEFT JOIN</code> \u2192 All left rows + matches - <code>RIGHT JOIN</code> \u2192 All right rows + matches - <code>FULL JOIN</code> \u2192 All rows from both sides (with MySQL workaround) - Complex joins \u2192 Multi-table joins with aggregation; Self-join for peer relationships</p>"},{"location":"mysql/sql-commands/","title":"SQL Commands: DDL, DML, DQL, TCL, DCL","text":""},{"location":"mysql/sql-commands/#types-of-sql-commands","title":"\ud83d\udccc Types of SQL Commands","text":"<p>SQL commands are divided into 5 main categories:  </p>"},{"location":"mysql/sql-commands/#1-ddl-data-definition-language","title":"1. DDL (Data Definition Language)","text":"<p>\ud83d\udc49 Used to define and manage the structure of the database (tables, schemas, indexes).  </p>"},{"location":"mysql/sql-commands/#commands","title":"Commands:","text":"<ul> <li><code>CREATE</code> \u2192 Create new objects (table, view, database, etc.)  </li> <li><code>ALTER</code> \u2192 Modify structure of existing objects  </li> <li><code>DROP</code> \u2192 Delete objects  </li> <li><code>TRUNCATE</code> \u2192 Remove all rows from a table (faster than DELETE, no rollback in some DBs)  </li> <li><code>COMMENT</code> \u2192 Add comments to schema objects  </li> <li><code>RENAME</code> \u2192 Rename objects  </li> </ul>"},{"location":"mysql/sql-commands/#example","title":"Example","text":"<pre><code>-- Create a new table\nCREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(50),\n    Salary DECIMAL(10,2),\n    Department VARCHAR(30)\n);\n\n-- Alter the table\nALTER TABLE Employee ADD Age INT;\n\n-- Drop the table\nDROP TABLE Employee;\n\n-- Remove all records but keep structure\nTRUNCATE TABLE Employee;\n</code></pre>"},{"location":"mysql/sql-commands/#2-dml-data-manipulation-language","title":"2. DML (Data Manipulation Language)","text":"<p>\ud83d\udc49 Used to manage and modify the data inside tables.  </p>"},{"location":"mysql/sql-commands/#commands_1","title":"Commands:","text":"<ul> <li><code>INSERT</code> \u2192 Insert new records  </li> <li><code>UPDATE</code> \u2192 Modify existing records  </li> <li><code>DELETE</code> \u2192 Remove records  </li> <li><code>MERGE</code> (in some DBs) \u2192 Insert/Update simultaneously  </li> </ul>"},{"location":"mysql/sql-commands/#example_1","title":"Example","text":"<pre><code>-- Insert data\nINSERT INTO Employee (EmpID, Name, Salary, Department, Age)\nVALUES (101, 'John Doe', 55000, 'IT', 28);\n\n-- Update data\nUPDATE Employee\nSET Salary = 60000\nWHERE EmpID = 101;\n\n-- Delete a record\nDELETE FROM Employee WHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/sql-commands/#3-dql-data-query-language","title":"3. DQL (Data Query Language)","text":"<p>\ud83d\udc49 Used to fetch/query data from database.  </p>"},{"location":"mysql/sql-commands/#command","title":"Command:","text":"<ul> <li><code>SELECT</code> </li> </ul>"},{"location":"mysql/sql-commands/#example_2","title":"Example","text":"<pre><code>-- Select all data\nSELECT * FROM Employee;\n\n-- Select specific columns\nSELECT Name, Salary FROM Employee;\n\n-- Select with condition\nSELECT * FROM Employee WHERE Department = 'IT';\n</code></pre>"},{"location":"mysql/sql-commands/#4-tcl-transaction-control-language","title":"4. TCL (Transaction Control Language)","text":"<p>\ud83d\udc49 Used to manage transactions (groups of SQL statements).  </p>"},{"location":"mysql/sql-commands/#commands_2","title":"Commands:","text":"<ul> <li><code>COMMIT</code> \u2192 Save changes permanently  </li> <li><code>ROLLBACK</code> \u2192 Undo changes  </li> <li><code>SAVEPOINT</code> \u2192 Set a point to rollback later  </li> <li><code>SET TRANSACTION</code> \u2192 Set transaction properties  </li> </ul>"},{"location":"mysql/sql-commands/#example_3","title":"Example","text":"<pre><code>BEGIN TRANSACTION;\n\nUPDATE Employee SET Salary = Salary + 5000 WHERE Department = 'IT';\n\n-- If everything is fine\nCOMMIT;\n\n-- If error, rollback\nROLLBACK;\n</code></pre>"},{"location":"mysql/sql-commands/#5-dcl-data-control-language","title":"5. DCL (Data Control Language)","text":"<p>\ud83d\udc49 Used to control access (security/permissions).  </p>"},{"location":"mysql/sql-commands/#commands_3","title":"Commands:","text":"<ul> <li><code>GRANT</code> \u2192 Give permissions  </li> <li><code>REVOKE</code> \u2192 Take back permissions  </li> </ul>"},{"location":"mysql/sql-commands/#example_4","title":"Example","text":"<pre><code>-- Grant permission\nGRANT SELECT, INSERT ON Employee TO user1;\n\n-- Revoke permission\nREVOKE INSERT ON Employee FROM user1;\n</code></pre>"},{"location":"mysql/sql-commands/#quick-summary-table","title":"\u2705 Quick Summary Table","text":"Type Full Form Purpose Examples DDL Data Definition Language Define database objects CREATE, ALTER, DROP, TRUNCATE DML Data Manipulation Language Modify data INSERT, UPDATE, DELETE DQL Data Query Language Query data SELECT TCL Transaction Control Language Manage transactions COMMIT, ROLLBACK, SAVEPOINT DCL Data Control Language Control access GRANT, REVOKE"},{"location":"mysql/sql-query-practice-1/","title":"Basic SQL Practice with Explanations","text":"<p>This file contains 20 SQL practice problems covering: - SELECT, FROM, WHERE - ORDER BY - DISTINCT - LIMIT / TOP / ROWNUM</p> <p>Each question includes: - Input Table(s) - Question - SQL Query - Explanation - Output Table</p>"},{"location":"mysql/sql-query-practice-1/#1-select-from-where","title":"1. SELECT, FROM, WHERE","text":""},{"location":"mysql/sql-query-practice-1/#q1-fetch-employees-from-department-hr","title":"Q1: Fetch employees from department <code>HR</code>","text":"<p>Input Table: employees | emp_id | name    | dept  | salary | |--------|---------|-------|--------| | 1      | Alice   | HR    | 50000  | | 2      | Bob     | IT    | 60000  | | 3      | Charlie | HR    | 55000  | | 4      | David   | Sales | 45000  |</p> <p>Query:</p> <pre><code>SELECT emp_id, name, dept, salary\nFROM employees\nWHERE dept = 'HR';\n</code></pre> <p>Explanation: We used <code>WHERE dept = 'HR'</code> to filter only HR employees.</p> <p>Output: | emp_id | name    | dept | salary | |--------|---------|------|--------| | 1      | Alice   | HR   | 50000  | | 3      | Charlie | HR   | 55000  |</p>"},{"location":"mysql/sql-query-practice-1/#q2-fetch-employees-earning-more-than-55000","title":"Q2: Fetch employees earning more than 55,000","text":"<p>Query:</p> <pre><code>SELECT name, salary\nFROM employees\nWHERE salary &gt; 55000;\n</code></pre> <p>Explanation: <code>&gt;</code> operator filters salaries above 55,000.</p> <p>Output: | name | salary | |------|--------| | Bob  | 60000  |</p>"},{"location":"mysql/sql-query-practice-1/#q3-employees-from-it-or-sales-department","title":"Q3: Employees from IT or Sales department","text":"<p>Query:</p> <pre><code>SELECT * \nFROM employees\nWHERE dept IN ('IT', 'Sales');\n</code></pre> <p>Explanation: The <code>IN</code> operator checks if dept is one of the listed values.</p> <p>Output: | emp_id | name  | dept  | salary | |--------|-------|-------|--------| | 2      | Bob   | IT    | 60000  | | 4      | David | Sales | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q4-employees-not-in-hr","title":"Q4: Employees not in HR","text":"<p>Query:</p> <pre><code>SELECT name, dept\nFROM employees\nWHERE dept &lt;&gt; 'HR';\n</code></pre> <p>Explanation: <code>&lt;&gt;</code> means NOT EQUAL.</p> <p>Output: | name  | dept  | |-------|-------| | Bob   | IT    | | David | Sales |</p>"},{"location":"mysql/sql-query-practice-1/#q5-fetch-employee-with-emp_id-2","title":"Q5: Fetch employee with emp_id = 2","text":"<p>Query:</p> <pre><code>SELECT * \nFROM employees\nWHERE emp_id = 2;\n</code></pre> <p>Explanation: Simple filter on primary key.</p> <p>Output: | emp_id | name | dept | salary | |--------|------|------|--------| | 2      | Bob  | IT   | 60000  |</p>"},{"location":"mysql/sql-query-practice-1/#2-order-by","title":"2. ORDER BY","text":""},{"location":"mysql/sql-query-practice-1/#q6-sort-employees-by-salary-ascending","title":"Q6: Sort employees by salary ascending","text":"<p>Query:</p> <pre><code>SELECT name, salary\nFROM employees\nORDER BY salary ASC;\n</code></pre> <p>Explanation: Default is ascending. Employees ordered by lowest salary first.</p> <p>Output: | name    | salary | |---------|--------| | David   | 45000  | | Alice   | 50000  | | Charlie | 55000  | | Bob     | 60000  |</p>"},{"location":"mysql/sql-query-practice-1/#q7-sort-employees-by-salary-descending","title":"Q7: Sort employees by salary descending","text":"<p>Query:</p> <pre><code>SELECT name, salary\nFROM employees\nORDER BY salary DESC;\n</code></pre> <p>Explanation: <code>DESC</code> shows highest salary first.</p> <p>Output: | name    | salary | |---------|--------| | Bob     | 60000  | | Charlie | 55000  | | Alice   | 50000  | | David   | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q8-sort-employees-by-department-then-salary","title":"Q8: Sort employees by department, then salary","text":"<p>Query:</p> <pre><code>SELECT name, dept, salary\nFROM employees\nORDER BY dept ASC, salary DESC;\n</code></pre> <p>Explanation: First sort alphabetically by dept, then within dept sort by salary high-to-low.</p> <p>Output: | name    | dept  | salary | |---------|-------|--------| | Alice   | HR    | 50000  | | Charlie | HR    | 55000  | | Bob     | IT    | 60000  | | David   | Sales | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q9-sort-by-name-alphabetically","title":"Q9: Sort by name alphabetically","text":"<p>Query:</p> <pre><code>SELECT * \nFROM employees\nORDER BY name;\n</code></pre> <p>Explanation: Alphabetical sort on <code>name</code> column.</p> <p>Output: | emp_id | name    | dept  | salary | |--------|---------|-------|--------| | 1      | Alice   | HR    | 50000  | | 2      | Bob     | IT    | 60000  | | 3      | Charlie | HR    | 55000  | | 4      | David   | Sales | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q10-sort-by-length-of-name","title":"Q10: Sort by length of name","text":"<p>Query:</p> <pre><code>SELECT name, LENGTH(name) AS name_length\nFROM employees\nORDER BY name_length;\n</code></pre> <p>Explanation: We calculated length of name, then ordered by it.</p> <p>Output: | name    | name_length | |---------|-------------| | Bob     | 3           | | Alice   | 5           | | David   | 5           | | Charlie | 7           |</p>"},{"location":"mysql/sql-query-practice-1/#3-distinct","title":"3. DISTINCT","text":""},{"location":"mysql/sql-query-practice-1/#q11-list-unique-departments","title":"Q11: List unique departments","text":"<p>Query:</p> <pre><code>SELECT DISTINCT dept\nFROM employees;\n</code></pre> <p>Explanation: Removes duplicate department names.</p> <p>Output: | dept  | |-------| | HR    | | IT    | | Sales |</p>"},{"location":"mysql/sql-query-practice-1/#q12-unique-salary-values","title":"Q12: Unique salary values","text":"<p>Query:</p> <pre><code>SELECT DISTINCT salary\nFROM employees;\n</code></pre> <p>Explanation: Shows only unique salary numbers.</p> <p>Output: | salary | |--------| | 50000  | | 60000  | | 55000  | | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q13-unique-combinations-of-dept-and-salary","title":"Q13: Unique combinations of dept and salary","text":"<p>Query:</p> <pre><code>SELECT DISTINCT dept, salary\nFROM employees;\n</code></pre> <p>Explanation: Checks uniqueness across multiple columns.</p> <p>Output: | dept  | salary | |-------|--------| | HR    | 50000  | | HR    | 55000  | | IT    | 60000  | | Sales | 45000  |</p>"},{"location":"mysql/sql-query-practice-1/#q14-unique-first-letters-of-names","title":"Q14: Unique first letters of names","text":"<p>Query:</p> <pre><code>SELECT DISTINCT SUBSTR(name,1,1) AS first_letter\nFROM employees;\n</code></pre> <p>Explanation: Takes the first character from each name and removes duplicates.</p> <p>Output: | first_letter | |--------------| | A            | | B            | | C            | | D            |</p>"},{"location":"mysql/sql-query-practice-1/#q15-unique-job-roles-assume-another-column-exists","title":"Q15: Unique job roles (assume another column exists)","text":"<p>Input Table with job column: | emp_id | name    | dept  | salary | job        | |--------|---------|-------|--------|------------| | 1      | Alice   | HR    | 50000  | Analyst    | | 2      | Bob     | IT    | 60000  | Developer  | | 3      | Charlie | HR    | 55000  | Analyst    | | 4      | David   | Sales | 45000  | Sales Rep  |</p> <p>Query:</p> <pre><code>SELECT DISTINCT job\nFROM employees;\n</code></pre> <p>Output: | job       | |-----------| | Analyst   | | Developer | | Sales Rep |</p>"},{"location":"mysql/sql-query-practice-1/#4-limit-top-rownum","title":"4. LIMIT / TOP / ROWNUM","text":""},{"location":"mysql/sql-query-practice-1/#q16-get-first-2-employees","title":"Q16: Get first 2 employees","text":"<p>Query (MySQL/Postgres):</p> <pre><code>SELECT * \nFROM employees\nLIMIT 2;\n</code></pre> <p>Explanation: Fetches only first 2 rows.</p> <p>Output: | emp_id | name  | dept | salary | |--------|-------|------|--------| | 1      | Alice | HR   | 50000  | | 2      | Bob   | IT   | 60000  |</p>"},{"location":"mysql/sql-query-practice-1/#q17-get-top-1-highest-salary-employee-sql-server","title":"Q17: Get top 1 highest salary employee (SQL Server)","text":"<p>Query:</p> <pre><code>SELECT TOP 1 name, salary\nFROM employees\nORDER BY salary DESC;\n</code></pre> <p>Explanation: SQL Server uses <code>TOP</code> instead of LIMIT.</p> <p>Output: | name | salary | |------|--------| | Bob  | 60000  |</p>"},{"location":"mysql/sql-query-practice-1/#q18-get-employees-with-rownum-3-oracle","title":"Q18: Get employees with ROWNUM &lt;= 3 (Oracle)","text":"<p>Query:</p> <pre><code>SELECT * \nFROM employees\nWHERE ROWNUM &lt;= 3;\n</code></pre> <p>Explanation: Oracle uses <code>ROWNUM</code> pseudo column.</p> <p>Output: | emp_id | name    | dept | salary | |--------|---------|------|--------| | 1      | Alice   | HR   | 50000  | | 2      | Bob     | IT   | 60000  | | 3      | Charlie | HR   | 55000  |</p>"},{"location":"mysql/sql-query-practice-1/#q19-get-top-2-employees-by-salary-postgres","title":"Q19: Get top 2 employees by salary (Postgres)","text":"<p>Query:</p> <pre><code>SELECT name, salary\nFROM employees\nORDER BY salary DESC\nLIMIT 2;\n</code></pre> <p>Explanation: Orders by salary then limits to 2.</p> <p>Output: | name    | salary | |---------|--------| | Bob     | 60000  | | Charlie | 55000  |</p>"},{"location":"mysql/sql-query-practice-1/#q20-skip-first-1-row-and-fetch-next-2-offset","title":"Q20: Skip first 1 row and fetch next 2 (OFFSET)","text":"<p>Query (Postgres):</p> <pre><code>SELECT name, salary\nFROM employees\nORDER BY emp_id\nOFFSET 1 ROWS FETCH NEXT 2 ROWS ONLY;\n</code></pre> <p>Explanation: Skips first record and fetches next 2.</p> <p>Output: | name    | salary | |---------|--------| | Bob     | 60000  | | Charlie | 55000  |</p>"},{"location":"mysql/sql-query-practice-2/","title":"SQL Practice: Filtering &amp; Conditions with Explanations","text":"<p>This file contains 20 SQL practice problems covering filtering and conditional operators:</p> <ul> <li>Comparison operators: =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=</li> <li>Logical operators: AND, OR, NOT</li> <li>BETWEEN, IN, LIKE</li> <li>IS NULL / IS NOT NULL</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-2/#1-comparison-operators","title":"1. Comparison Operators","text":""},{"location":"mysql/sql-query-practice-2/#q1-employees-with-salary-50000","title":"Q1: Employees with salary = 50000","text":"<p>Input Table: employees</p> emp_id name dept salary 1 Alice HR 50000 2 Bob IT 60000 3 Charlie HR 55000 4 David Sales 45000 <p>Query:</p> <pre><code>SELECT *\nFROM employees\nWHERE salary = 50000;\n</code></pre> <p>Explanation: <code>=</code> operator selects rows where salary equals 50000.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000"},{"location":"mysql/sql-query-practice-2/#q2-employees-with-salary-60000","title":"Q2: Employees with salary &lt;&gt; 60000","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary &lt;&gt; 60000;\n</code></pre> <p>Explanation: <code>&lt;&gt;</code> selects rows not equal to 60000.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 3 Charlie HR 55000 4 David Sales 45000"},{"location":"mysql/sql-query-practice-2/#q3-employees-with-salary-50000","title":"Q3: Employees with salary &gt; 50000","text":"<pre><code>SELECT name, salary\nFROM employees\nWHERE salary &gt; 50000;\n</code></pre> <p>Explanation: <code>&gt;</code> selects rows with salary greater than 50000.</p> <p>Output:</p> name salary Bob 60000 Charlie 55000"},{"location":"mysql/sql-query-practice-2/#q4-employees-with-salary-50000","title":"Q4: Employees with salary &lt;= 50000","text":"<pre><code>SELECT name, salary\nFROM employees\nWHERE salary &lt;= 50000;\n</code></pre> <p>Explanation: <code>&lt;=</code> selects salaries less than or equal to 50000.</p> <p>Output:</p> name salary Alice 50000 David 45000"},{"location":"mysql/sql-query-practice-2/#q5-employees-with-salary-55000","title":"Q5: Employees with salary &gt;= 55000","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary &gt;= 55000;\n</code></pre> <p>Explanation: <code>&gt;=</code> selects salaries 55000 or more.</p> <p>Output:</p> emp_id name dept salary 2 Bob IT 60000 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#2-logical-operators-and-or-not","title":"2. Logical Operators (AND, OR, NOT)","text":""},{"location":"mysql/sql-query-practice-2/#q6-employees-in-hr-and-salary-50000","title":"Q6: Employees in HR AND salary &gt; 50000","text":"<pre><code>SELECT *\nFROM employees\nWHERE dept = 'HR' AND salary &gt; 50000;\n</code></pre> <p>Explanation: <code>AND</code> ensures both conditions are true.</p> <p>Output:</p> emp_id name dept salary 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#q7-employees-in-hr-or-salary-55000","title":"Q7: Employees in HR OR salary &gt; 55000","text":"<pre><code>SELECT *\nFROM employees\nWHERE dept = 'HR' OR salary &gt; 55000;\n</code></pre> <p>Explanation: <code>OR</code> selects rows matching either condition.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 2 Bob IT 60000 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#q8-employees-not-in-hr","title":"Q8: Employees NOT in HR","text":"<pre><code>SELECT *\nFROM employees\nWHERE NOT dept = 'HR';\n</code></pre> <p>Explanation: <code>NOT</code> inverts the condition.</p> <p>Output:</p> emp_id name dept salary 2 Bob IT 60000 4 David Sales 45000"},{"location":"mysql/sql-query-practice-2/#q9-employees-in-it-and-salary-60000","title":"Q9: Employees in IT AND salary &gt;= 60000","text":"<pre><code>SELECT name, dept, salary\nFROM employees\nWHERE dept = 'IT' AND salary &gt;= 60000;\n</code></pre> <p>Explanation: Both conditions must be true.</p> <p>Output:</p> name dept salary Bob IT 60000"},{"location":"mysql/sql-query-practice-2/#q10-employees-in-sales-or-hr-with-salary-50000","title":"Q10: Employees in Sales OR HR with salary &lt; 50000","text":"<pre><code>SELECT *\nFROM employees\nWHERE (dept = 'Sales' OR dept = 'HR') AND salary &lt; 50000;\n</code></pre> <p>Explanation: Parentheses control precedence: OR is evaluated first.</p> <p>Output:</p> emp_id name dept salary 4 David Sales 45000"},{"location":"mysql/sql-query-practice-2/#3-between-in-like","title":"3. BETWEEN, IN, LIKE","text":""},{"location":"mysql/sql-query-practice-2/#q11-employees-with-salary-between-50000-and-60000","title":"Q11: Employees with salary BETWEEN 50000 AND 60000","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary BETWEEN 50000 AND 60000;\n</code></pre> <p>Explanation: <code>BETWEEN</code> includes the boundary values.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 3 Charlie HR 55000 2 Bob IT 60000"},{"location":"mysql/sql-query-practice-2/#q12-employees-in-specific-departments-in","title":"Q12: Employees in specific departments (IN)","text":"<pre><code>SELECT *\nFROM employees\nWHERE dept IN ('HR', 'Sales');\n</code></pre> <p>Explanation: <code>IN</code> filters multiple discrete values.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 3 Charlie HR 55000 4 David Sales 45000"},{"location":"mysql/sql-query-practice-2/#q13-employees-whose-name-starts-with-a-like","title":"Q13: Employees whose name starts with 'A' (LIKE)","text":"<pre><code>SELECT *\nFROM employees\nWHERE name LIKE 'A%';\n</code></pre> <p>Explanation: <code>%</code> is wildcard for any number of characters.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000"},{"location":"mysql/sql-query-practice-2/#q14-employees-whose-name-contains-a-like","title":"Q14: Employees whose name contains 'a' (LIKE)","text":"<pre><code>SELECT *\nFROM employees\nWHERE name LIKE '%a%';\n</code></pre> <p>Explanation: <code>%</code> before and after 'a' matches any string containing 'a'.</p> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 2 Bob IT 60000 3 Charlie HR 55000 4 David Sales 45000"},{"location":"mysql/sql-query-practice-2/#q15-employees-whose-name-ends-with-e","title":"Q15: Employees whose name ends with 'e'","text":"<pre><code>SELECT *\nFROM employees\nWHERE name LIKE '%e';\n</code></pre> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#4-is-null-is-not-null","title":"4. IS NULL / IS NOT NULL","text":""},{"location":"mysql/sql-query-practice-2/#q16-employees-with-null-salary","title":"Q16: Employees with NULL salary","text":"<p>Input Table: employees</p> emp_id name dept salary 1 Alice HR 50000 2 Bob IT NULL 3 Charlie HR 55000 4 David Sales NULL <p>Query:</p> <pre><code>SELECT *\nFROM employees\nWHERE salary IS NULL;\n</code></pre> <p>Explanation: <code>IS NULL</code> selects rows where value is NULL.</p> <p>Output:</p> emp_id name dept salary 2 Bob IT NULL 4 David Sales NULL"},{"location":"mysql/sql-query-practice-2/#q17-employees-with-not-null-salary","title":"Q17: Employees with NOT NULL salary","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary IS NOT NULL;\n</code></pre> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#q18-employees-with-salary-null-or-less-than-50000","title":"Q18: Employees with salary NULL or less than 50000","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary IS NULL OR salary &lt; 50000;\n</code></pre> <p>Output:</p> emp_id name dept salary 2 Bob IT NULL 4 David Sales NULL"},{"location":"mysql/sql-query-practice-2/#q19-employees-with-salary-not-null-and-50000","title":"Q19: Employees with salary NOT NULL AND &gt; 50000","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary IS NOT NULL AND salary &gt; 50000;\n</code></pre> <p>Output:</p> emp_id name dept salary 2 Bob IT 60000 3 Charlie HR 55000"},{"location":"mysql/sql-query-practice-2/#q20-employees-with-salary-is-null-or-department-hr","title":"Q20: Employees with salary IS NULL OR department = 'HR'","text":"<pre><code>SELECT *\nFROM employees\nWHERE salary IS NULL OR dept = 'HR';\n</code></pre> <p>Output:</p> emp_id name dept salary 1 Alice HR 50000 2 Bob IT NULL 3 Charlie HR 55000 <pre><code></code></pre>"},{"location":"mysql/sql-query-practice-3/","title":"SQL Practice: Functions (String, Date, Numeric) with Explanations","text":"<p>This file contains 20 SQL practice problems covering:</p> <ul> <li>String functions: TRIM, SUBSTR, CONCAT, LENGTH, UPPER, LOWER</li> <li>Date functions: NOW, GETDATE, DATEADD, DATEDIFF, TO_DATE</li> <li>Numeric functions: ROUND, CEIL, FLOOR, ABS</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-3/#1-string-functions","title":"1. String Functions","text":""},{"location":"mysql/sql-query-practice-3/#q1-remove-spaces-from-names-using-trim","title":"Q1: Remove spaces from names using TRIM","text":"<p>Input Table: employees</p> emp_id name 1 ' Alice ' 2 ' Bob ' 3 ' Charlie ' <p>Query:</p> <pre><code>SELECT emp_id, TRIM(name) AS name_clean\nFROM employees;\n</code></pre> <p>Explanation: <code>TRIM</code> removes leading and trailing spaces.</p> <p>Output:</p> emp_id name_clean 1 Alice 2 Bob 3 Charlie"},{"location":"mysql/sql-query-practice-3/#q2-extract-first-3-letters-of-name-using-substr","title":"Q2: Extract first 3 letters of name using SUBSTR","text":"<p>Input Table: employees</p> emp_id name 1 Alice 2 Bob 3 Charlie <pre><code>SELECT emp_id, SUBSTR(name,1,3) AS short_name\nFROM employees;\n</code></pre> <p>Output:</p> emp_id short_name 1 Ali 2 Bob 3 Cha"},{"location":"mysql/sql-query-practice-3/#q3-concatenate-name-with-department","title":"Q3: Concatenate name with department","text":"<p>Input Table: employees</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie Sales <pre><code>SELECT emp_id, CONCAT(name, ' - ', dept) AS name_dept\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name_dept 1 Alice - HR 2 Bob - IT 3 Charlie - Sales"},{"location":"mysql/sql-query-practice-3/#q4-get-length-of-each-name","title":"Q4: Get length of each name","text":"<p>Input Table: employees</p> emp_id name 1 Alice 2 Bob 3 Charlie <pre><code>SELECT emp_id, LENGTH(name) AS name_length\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name_length 1 5 2 3 3 7"},{"location":"mysql/sql-query-practice-3/#q5-convert-name-to-uppercase-and-lowercase","title":"Q5: Convert name to uppercase and lowercase","text":"<p>Input Table: employees</p> emp_id name 1 Alice 2 Bob 3 Charlie <pre><code>SELECT emp_id, UPPER(name) AS upper_name, LOWER(name) AS lower_name\nFROM employees;\n</code></pre> <p>Output:</p> emp_id upper_name lower_name 1 ALICE alice 2 BOB bob 3 CHARLIE charlie"},{"location":"mysql/sql-query-practice-3/#2-date-functions","title":"2. Date Functions","text":""},{"location":"mysql/sql-query-practice-3/#q6-get-current-date-using-now-mysql-getdate-sql-server","title":"Q6: Get current date using NOW (MySQL) / GETDATE (SQL Server)","text":"<pre><code>SELECT NOW() AS current_date; -- MySQL\n-- SELECT GETDATE() AS current_date; -- SQL Server\n</code></pre> <p>Output Example:</p> current_date 2025-09-20 11:00"},{"location":"mysql/sql-query-practice-3/#q7-add-5-days-to-current-date","title":"Q7: Add 5 days to current date","text":"<pre><code>SELECT DATEADD(day, 5, GETDATE()) AS future_date; -- SQL Server\n</code></pre> <p>Output Example:</p> future_date 2025-09-25 11:00"},{"location":"mysql/sql-query-practice-3/#q8-difference-between-two-dates-in-days","title":"Q8: Difference between two dates (in days)","text":"<p>Input Table: projects</p> project_id start_date end_date 1 2025-09-01 2025-09-10 2 2025-09-05 2025-09-20 <pre><code>SELECT project_id, DATEDIFF(day, start_date, end_date) AS duration_days\nFROM projects; -- SQL Server\n</code></pre> <p>Output:</p> project_id duration_days 1 9 2 15"},{"location":"mysql/sql-query-practice-3/#q9-convert-string-to-date-using-to_date-oracle","title":"Q9: Convert string to date using TO_DATE (Oracle)","text":"<pre><code>SELECT TO_DATE('20-09-2025','DD-MM-YYYY') AS date_val FROM dual;\n</code></pre> <p>Output:</p> date_val 20-SEP-25"},{"location":"mysql/sql-query-practice-3/#q10-extract-year-month-from-date","title":"Q10: Extract year, month from date","text":"<p>Input Table: employees</p> emp_id name joining_date 1 Alice 2020-05-10 2 Bob 2021-08-15 3 Charlie 2022-01-20 <pre><code>SELECT emp_id, YEAR(joining_date) AS year_joined, MONTH(joining_date) AS month_joined\nFROM employees;\n</code></pre> <p>Output:</p> emp_id year_joined month_joined 1 2020 5 2 2021 8 3 2022 1"},{"location":"mysql/sql-query-practice-3/#3-numeric-functions","title":"3. Numeric Functions","text":""},{"location":"mysql/sql-query-practice-3/#q11-round-salary-to-nearest-1000","title":"Q11: Round salary to nearest 1000","text":"<p>Input Table: employees</p> emp_id salary 1 52345 2 60789 3 55432 <pre><code>SELECT emp_id, ROUND(salary, -3) AS rounded_salary\nFROM employees;\n</code></pre> <p>Output:</p> emp_id rounded_salary 1 52000 2 61000 3 55000"},{"location":"mysql/sql-query-practice-3/#q12-ceiling-function","title":"Q12: Ceiling function","text":"<pre><code>SELECT emp_id, CEIL(salary/1000.0) AS ceil_k_salary\nFROM employees;\n</code></pre> <p>Output:</p> emp_id ceil_k_salary 1 53 2 61 3 56"},{"location":"mysql/sql-query-practice-3/#q13-floor-function","title":"Q13: Floor function","text":"<pre><code>SELECT emp_id, FLOOR(salary/1000.0) AS floor_k_salary\nFROM employees;\n</code></pre> <p>Output:</p> emp_id floor_k_salary 1 52 2 60 3 55"},{"location":"mysql/sql-query-practice-3/#q14-absolute-value","title":"Q14: Absolute value","text":"<p>Input Table: transactions</p> trans_id amount 1 -500 2 300 3 -1000 <pre><code>SELECT trans_id, ABS(amount) AS abs_amount\nFROM transactions;\n</code></pre> <p>Output:</p> trans_id abs_amount 1 500 2 300 3 1000"},{"location":"mysql/sql-query-practice-3/#q15-multiply-salary-by-11-and-round","title":"Q15: Multiply salary by 1.1 and round","text":"<pre><code>SELECT emp_id, ROUND(salary*1.1,0) AS increased_salary\nFROM employees;\n</code></pre> <p>Output:</p> emp_id increased_salary 1 57579 2 66868 3 60975"},{"location":"mysql/sql-query-practice-3/#q16-add-7-days-to-date-using-dateadd","title":"Q16: Add 7 days to date using DATEADD","text":"<pre><code>SELECT emp_id, DATEADD(day,7,joining_date) AS next_week\nFROM employees;\n</code></pre> <p>Output:</p> emp_id next_week 1 2020-05-17 2 2021-08-22 3 2022-01-27"},{"location":"mysql/sql-query-practice-3/#q17-difference-in-years-from-today","title":"Q17: Difference in years from today","text":"<pre><code>SELECT emp_id, DATEDIFF(year, joining_date, GETDATE()) AS years_with_company\nFROM employees;\n</code></pre> <p>Output Example:</p> emp_id years_with_company 1 5 2 4 3 3"},{"location":"mysql/sql-query-practice-3/#q18-concatenate-numeric-and-string","title":"Q18: Concatenate numeric and string","text":"<pre><code>SELECT emp_id, CONCAT('Salary: ', salary) AS salary_text\nFROM employees;\n</code></pre> <p>Output:</p> emp_id salary_text 1 Salary: 52345 2 Salary: 60789 3 Salary: 55432"},{"location":"mysql/sql-query-practice-3/#q19-lowercase-department","title":"Q19: Lowercase department","text":"<p>Input Table: employees</p> emp_id dept 1 HR 2 IT 3 Sales <pre><code>SELECT emp_id, LOWER(dept) AS lower_dept\nFROM employees;\n</code></pre> <p>Output:</p> emp_id lower_dept 1 hr 2 it 3 sales"},{"location":"mysql/sql-query-practice-3/#q20-uppercase-department","title":"Q20: Uppercase department","text":"<pre><code>SELECT emp_id, UPPER(dept) AS upper_dept\nFROM employees;\n</code></pre> <p>Output:</p> emp_id upper_dept 1 HR 2 IT 3 SALES"},{"location":"mysql/sql-query-practice-4/","title":"SQL Practice: Joins with Explanations","text":"<p>This file contains 20 SQL practice problems covering:</p> <ul> <li>INNER JOIN</li> <li>LEFT JOIN</li> <li>RIGHT JOIN</li> <li>FULL OUTER JOIN</li> <li>SELF JOIN</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-4/#1-inner-join","title":"1. INNER JOIN","text":""},{"location":"mysql/sql-query-practice-4/#q1-employees-with-their-department-names","title":"Q1: Employees with their department names","text":"<p>Input Tables: employees</p> emp_id name dept_id 1 Alice 10 2 Bob 20 3 Charlie 30 <p>departments</p> dept_id dept_name 10 HR 20 IT 30 Sales 40 Marketing <p>Query:</p> <pre><code>SELECT e.emp_id, e.name, d.dept_name\nFROM employees e\nINNER JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Explanation: INNER JOIN returns rows where there is a match in both tables.</p> <p>Output:</p> emp_id name dept_name 1 Alice HR 2 Bob IT 3 Charlie Sales"},{"location":"mysql/sql-query-practice-4/#q2-employees-with-salary-50000-and-their-departments","title":"Q2: Employees with salary &gt; 50000 and their departments","text":"<p>Input Table: salaries</p> emp_id salary 1 50000 2 60000 3 55000 <pre><code>SELECT e.name, s.salary, d.dept_name\nFROM employees e\nINNER JOIN salaries s ON e.emp_id = s.emp_id\nINNER JOIN departments d ON e.dept_id = d.dept_id\nWHERE s.salary &gt; 50000;\n</code></pre> <p>Output:</p> name salary dept_name Bob 60000 IT Charlie 55000 Sales"},{"location":"mysql/sql-query-practice-4/#q3-employees-who-have-a-project-assigned","title":"Q3: Employees who have a project assigned","text":"<p>Input Table: projects</p> project_id emp_id project_name 101 1 Alpha 102 3 Beta <pre><code>SELECT e.name, p.project_name\nFROM employees e\nINNER JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name project_name Alice Alpha Charlie Beta"},{"location":"mysql/sql-query-practice-4/#q4-employees-with-matching-departments-example-with-missing-dept","title":"Q4: Employees with matching departments (example with missing dept)","text":"<p>Input Table: employees same as above, departments without dept_id 30</p> dept_id dept_name 10 HR 20 IT 40 Marketing <pre><code>SELECT e.name, d.dept_name\nFROM employees e\nINNER JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Output:</p> name dept_name Alice HR Bob IT"},{"location":"mysql/sql-query-practice-4/#q5-inner-join-on-multiple-conditions","title":"Q5: Inner join on multiple conditions","text":"<p>Input Table: employee_projects</p> emp_id project_id role 1 101 Developer 2 102 Manager <pre><code>SELECT e.name, ep.role, p.project_name\nFROM employees e\nINNER JOIN employee_projects ep ON e.emp_id = ep.emp_id\nINNER JOIN projects p ON ep.project_id = p.project_id;\n</code></pre> <p>Output:</p> name role project_name Alice Developer Alpha Bob Manager Beta"},{"location":"mysql/sql-query-practice-4/#2-left-join","title":"2. LEFT JOIN","text":""},{"location":"mysql/sql-query-practice-4/#q6-all-employees-and-their-departments-include-those-without-dept","title":"Q6: All employees and their departments (include those without dept)","text":"<p>Input Tables: employees and departments</p> <pre><code>SELECT e.name, d.dept_name\nFROM employees e\nLEFT JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Explanation: LEFT JOIN returns all rows from left table (employees), NULL if no match in right table.</p> <p>Output:</p> name dept_name Alice HR Bob IT Charlie Sales"},{"location":"mysql/sql-query-practice-4/#q7-employees-with-projects-include-those-without-projects","title":"Q7: Employees with projects (include those without projects)","text":"<p>Query:</p> <pre><code>SELECT e.name, p.project_name\nFROM employees e\nLEFT JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name project_name Alice Alpha Bob NULL Charlie Beta"},{"location":"mysql/sql-query-practice-4/#q8-left-join-with-condition","title":"Q8: Left join with condition","text":"<pre><code>SELECT e.name, s.salary\nFROM employees e\nLEFT JOIN salaries s ON e.emp_id = s.emp_id\nWHERE s.salary &gt; 50000 OR s.salary IS NULL;\n</code></pre> <p>Output:</p> name salary Alice 50000 Bob 60000 Charlie 55000"},{"location":"mysql/sql-query-practice-4/#q9-left-join-multiple-tables","title":"Q9: Left join multiple tables","text":"<pre><code>SELECT e.name, d.dept_name, p.project_name\nFROM employees e\nLEFT JOIN departments d ON e.dept_id = d.dept_id\nLEFT JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name dept_name project_name Alice HR Alpha Bob IT NULL Charlie Sales Beta"},{"location":"mysql/sql-query-practice-4/#q10-left-join-with-filtering","title":"Q10: Left join with filtering","text":"<pre><code>SELECT e.name, d.dept_name\nFROM employees e\nLEFT JOIN departments d ON e.dept_id = d.dept_id\nWHERE d.dept_name IS NULL;\n</code></pre> <p>Output:</p> name dept_name (none if all matched)"},{"location":"mysql/sql-query-practice-4/#3-right-join","title":"3. RIGHT JOIN","text":""},{"location":"mysql/sql-query-practice-4/#q11-all-departments-and-employees-include-depts-without-employees","title":"Q11: All departments and employees (include depts without employees)","text":"<pre><code>SELECT e.name, d.dept_name\nFROM employees e\nRIGHT JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Output:</p> name dept_name Alice HR Bob IT Charlie Sales NULL Marketing"},{"location":"mysql/sql-query-practice-4/#q12-right-join-with-projects","title":"Q12: Right join with projects","text":"<pre><code>SELECT e.name, p.project_name\nFROM employees e\nRIGHT JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name project_name Alice Alpha Charlie Beta"},{"location":"mysql/sql-query-practice-4/#q13-right-join-multiple-tables","title":"Q13: Right join multiple tables","text":"<pre><code>SELECT e.name, s.salary, d.dept_name\nFROM employees e\nRIGHT JOIN salaries s ON e.emp_id = s.emp_id\nRIGHT JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Output:</p> name salary dept_name Alice 50000 HR Bob 60000 IT Charlie 55000 Sales NULL NULL Marketing"},{"location":"mysql/sql-query-practice-4/#q14-right-join-with-condition","title":"Q14: Right join with condition","text":"<pre><code>SELECT e.name, d.dept_name\nFROM employees e\nRIGHT JOIN departments d ON e.dept_id = d.dept_id\nWHERE e.name IS NULL;\n</code></pre> <p>Output:</p> name dept_name NULL Marketing"},{"location":"mysql/sql-query-practice-4/#q15-right-join-with-filtering-on-null","title":"Q15: Right join with filtering on NULL","text":"<pre><code>SELECT e.name, p.project_name\nFROM employees e\nRIGHT JOIN projects p ON e.emp_id = p.emp_id\nWHERE e.name IS NULL;\n</code></pre> <p>Output:</p> name project_name (none)"},{"location":"mysql/sql-query-practice-4/#4-full-outer-join","title":"4. FULL OUTER JOIN","text":""},{"location":"mysql/sql-query-practice-4/#q16-employees-and-departments-all-records","title":"Q16: Employees and departments (all records)","text":"<pre><code>SELECT e.name, d.dept_name\nFROM employees e\nFULL OUTER JOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Output:</p> name dept_name Alice HR Bob IT Charlie Sales NULL Marketing"},{"location":"mysql/sql-query-practice-4/#q17-employees-and-projects-all-records","title":"Q17: Employees and projects (all records)","text":"<pre><code>SELECT e.name, p.project_name\nFROM employees e\nFULL OUTER JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name project_name Alice Alpha Bob NULL Charlie Beta"},{"location":"mysql/sql-query-practice-4/#q18-full-join-with-multiple-tables","title":"Q18: Full join with multiple tables","text":"<pre><code>SELECT e.name, d.dept_name, p.project_name\nFROM employees e\nFULL OUTER JOIN departments d ON e.dept_id = d.dept_id\nFULL OUTER JOIN projects p ON e.emp_id = p.emp_id;\n</code></pre> <p>Output:</p> name dept_name project_name Alice HR Alpha Bob IT NULL Charlie Sales Beta NULL Marketing NULL"},{"location":"mysql/sql-query-practice-4/#5-self-join","title":"5. SELF JOIN","text":""},{"location":"mysql/sql-query-practice-4/#q19-employees-and-their-manager-self-join","title":"Q19: Employees and their manager (self join)","text":"<p>Input Table: employees</p> emp_id name manager_id 1 Alice NULL 2 Bob 1 3 Charlie 1 <pre><code>SELECT e1.name AS employee, e2.name AS manager\nFROM employees e1\nLEFT JOIN employees e2 ON e1.manager_id = e2.emp_id;\n</code></pre> <p>Output:</p> employee manager Alice NULL Bob Alice Charlie Alice"},{"location":"mysql/sql-query-practice-4/#q20-employees-reporting-to-the-same-manager","title":"Q20: Employees reporting to the same manager","text":"<pre><code>SELECT e1.name AS emp1, e2.name AS emp2, e1.manager_id\nFROM employees e1\nINNER JOIN employees e2 ON e1.manager_id = e2.manager_id\nWHERE e1.emp_id &lt; e2.emp_id;\n</code></pre> <p>Output:</p> emp1 emp2 manager_id Bob Charlie 1"},{"location":"mysql/sql-query-practice-5/","title":"SQL Practice: Set Operators with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>UNION / UNION ALL</li> <li>INTERSECT</li> <li>MINUS / EXCEPT</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-5/#1-union","title":"1. UNION","text":""},{"location":"mysql/sql-query-practice-5/#q1-combine-employees-from-two-departments","title":"Q1: Combine employees from two departments","text":"<p>Input Tables: dept_hr</p> emp_id name 1 Alice 2 Bob <p>dept_it</p> emp_id name 3 Charlie 4 David <p>Query:</p> <pre><code>SELECT name FROM dept_hr\nUNION\nSELECT name FROM dept_it;\n</code></pre> <p>Explanation: UNION combines results and removes duplicates.</p> <p>Output:</p> name Alice Bob Charlie David"},{"location":"mysql/sql-query-practice-5/#q2-union-all-keep-duplicates","title":"Q2: UNION ALL (keep duplicates)","text":"<p>Input Tables: dept_sales</p> emp_id name 5 Eve 6 Frank <p>dept_marketing</p> emp_id name 6 Frank 7 Grace <pre><code>SELECT name FROM dept_sales\nUNION ALL\nSELECT name FROM dept_marketing;\n</code></pre> <p>Output:</p> name Eve Frank Frank Grace"},{"location":"mysql/sql-query-practice-5/#2-intersect","title":"2. INTERSECT","text":""},{"location":"mysql/sql-query-practice-5/#q3-employees-present-in-both-departments","title":"Q3: Employees present in both departments","text":"<p>Input Tables: dept_a</p> emp_id name 1 Alice 2 Bob 3 Charlie <p>dept_b</p> emp_id name 2 Bob 3 Charlie 4 David <pre><code>SELECT name FROM dept_a\nINTERSECT\nSELECT name FROM dept_b;\n</code></pre> <p>Explanation: INTERSECT returns only rows present in both tables.</p> <p>Output:</p> name Bob Charlie"},{"location":"mysql/sql-query-practice-5/#q4-intersect-multiple-conditions","title":"Q4: INTERSECT multiple conditions","text":"<pre><code>SELECT emp_id, name FROM dept_a\nINTERSECT\nSELECT emp_id, name FROM dept_b;\n</code></pre> <p>Output:</p> emp_id name 2 Bob 3 Charlie"},{"location":"mysql/sql-query-practice-5/#3-minus-except","title":"3. MINUS / EXCEPT","text":""},{"location":"mysql/sql-query-practice-5/#q5-employees-in-dept_a-but-not-in-dept_b","title":"Q5: Employees in dept_a but not in dept_b","text":"<pre><code>SELECT name FROM dept_a\nMINUS\nSELECT name FROM dept_b; -- Oracle\n-- EXCEPT in SQL Server\n</code></pre> <p>Output:</p> name Alice"},{"location":"mysql/sql-query-practice-5/#q6-employees-in-dept_b-but-not-in-dept_a","title":"Q6: Employees in dept_b but not in dept_a","text":"<pre><code>SELECT name FROM dept_b\nMINUS\nSELECT name FROM dept_a;\n</code></pre> <p>Output:</p> name David"},{"location":"mysql/sql-query-practice-5/#q7-union-and-minus-combined","title":"Q7: UNION and MINUS combined","text":"<p>Input Tables: dept_x</p> emp_id name 1 Alice 2 Bob <p>dept_y</p> emp_id name 2 Bob 3 Charlie <pre><code>SELECT name FROM (\n  SELECT name FROM dept_x\n  UNION\n  SELECT name FROM dept_y\n) combined\nMINUS\nSELECT name FROM dept_x;\n</code></pre> <p>Explanation: Combine both tables, then remove names already in dept_x.</p> <p>Output:</p> name Charlie"},{"location":"mysql/sql-query-practice-5/#q8-check-mismatched-records-between-source-and-target","title":"Q8: Check mismatched records between source and target","text":"<p>Input Tables: source_employees</p> emp_id name 1 Alice 2 Bob 3 Charlie <p>target_employees</p> emp_id name 2 Bob 3 Charlie 4 David <pre><code>SELECT name FROM source_employees\nMINUS\nSELECT name FROM target_employees;\n</code></pre> <p>Output:</p> name Alice"},{"location":"mysql/sql-query-practice-5/#q9-except-example-sql-server","title":"Q9: EXCEPT example (SQL Server)","text":"<pre><code>SELECT name FROM target_employees\nEXCEPT\nSELECT name FROM source_employees;\n</code></pre> <p>Output:</p> name David"},{"location":"mysql/sql-query-practice-5/#q10-find-common-employees-and-unique-employees-in-one-query","title":"Q10: Find common employees and unique employees in one query","text":"<pre><code>SELECT name FROM source_employees\nINTERSECT\nSELECT name FROM target_employees; -- common\n\nSELECT name FROM source_employees\nMINUS\nSELECT name FROM target_employees; -- in source only\n\nSELECT name FROM target_employees\nMINUS\nSELECT name FROM source_employees; -- in target only\n</code></pre> <p>Output: Common:</p> name Bob Charlie <p>Source only:</p> name Alice <p>Target only:</p> name David"},{"location":"mysql/sql-query-practice-6/","title":"SQL Practice: Subqueries (Single-row, Multi-row, Correlated) with Explanations","text":"<p>This file contains 20 SQL practice problems covering:</p> <ul> <li>Single-row subquery (=, &lt;, &gt;)</li> <li>Multi-row subquery (IN, ANY, ALL)</li> <li>Correlated subquery</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-6/#1-single-row-subqueries","title":"1. Single-row Subqueries","text":""},{"location":"mysql/sql-query-practice-6/#q1-find-employees-with-salary-equal-to-the-highest-salary","title":"Q1: Find employees with salary equal to the highest salary","text":"<p>Input Table: employees</p> emp_id name salary 1 Alice 48000 2 Bob 60000 3 Charlie 55000 4 David 45000 5 Eva 70000 <pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary = (SELECT MAX(salary) FROM employees);\n</code></pre> <p>Explanation: Single-row subquery returns MAX(salary). The outer query selects employee(s) with that salary.</p> <p>Output:</p> emp_id name salary 5 Eva 70000"},{"location":"mysql/sql-query-practice-6/#q2-employees-with-salary-less-than-the-average-salary","title":"Q2: Employees with salary less than the average salary","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary &lt; (SELECT AVG(salary) FROM employees);\n</code></pre> <p>Output:</p> emp_id name salary 1 Alice 48000 4 David 45000"},{"location":"mysql/sql-query-practice-6/#q3-employees-with-minimum-salary","title":"Q3: Employee(s) with minimum salary","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary = (SELECT MIN(salary) FROM employees);\n</code></pre> <p>Output:</p> emp_id name salary 4 David 45000"},{"location":"mysql/sql-query-practice-6/#q4-employees-with-salary-just-above-50000","title":"Q4: Employee(s) with salary just above 50000","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary = (SELECT MIN(salary) FROM employees WHERE salary &gt; 50000);\n</code></pre> <p>Output:</p> emp_id name salary 3 Charlie 55000"},{"location":"mysql/sql-query-practice-6/#q5-employees-having-salary-greater-than-60000","title":"Q5: Employee(s) having salary greater than 60000","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary &gt; (SELECT MAX(salary) - 10000 FROM employees);\n</code></pre> <p>Output:</p> emp_id name salary 2 Bob 60000 5 Eva 70000"},{"location":"mysql/sql-query-practice-6/#2-multi-row-subqueries","title":"2. Multi-row Subqueries","text":""},{"location":"mysql/sql-query-practice-6/#q6-employees-in-departments-with-more-than-one-employee","title":"Q6: Employees in departments with more than one employee","text":"<p>Input Table: employees</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie HR 4 David IT 5 Eva Sales <pre><code>SELECT emp_id, name, dept\nFROM employees\nWHERE dept IN (\n    SELECT dept\n    FROM employees\n    GROUP BY dept\n    HAVING COUNT(*) &gt; 1\n);\n</code></pre> <p>Explanation: Multi-row subquery returns departments with more than 1 employee. Outer query selects employees in those departments.</p> <p>Output:</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie HR 4 David IT"},{"location":"mysql/sql-query-practice-6/#q7-employees-with-salary-in-top-3-salaries","title":"Q7: Employees with salary in top 3 salaries","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary IN (\n    SELECT DISTINCT salary\n    FROM employees\n    ORDER BY salary DESC\n    LIMIT 3\n);\n</code></pre> <p>Output:</p> emp_id name salary 2 Bob 60000 3 Charlie 55000 5 Eva 70000"},{"location":"mysql/sql-query-practice-6/#q8-employees-in-departments-hr-or-it","title":"Q8: Employees in departments 'HR' or 'IT'","text":"<pre><code>SELECT emp_id, name, dept\nFROM employees\nWHERE dept IN ('HR','IT');\n</code></pre> <p>Output:</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie HR 4 David IT"},{"location":"mysql/sql-query-practice-6/#q9-employees-not-in-department-with-only-one-employee","title":"Q9: Employees not in department with only one employee","text":"<pre><code>SELECT emp_id, name, dept\nFROM employees\nWHERE dept NOT IN (\n    SELECT dept\n    FROM employees\n    GROUP BY dept\n    HAVING COUNT(*) = 1\n);\n</code></pre> <p>Output:</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie HR 4 David IT"},{"location":"mysql/sql-query-practice-6/#q10-employees-with-salary-greater-than-any-employee-in-hr","title":"Q10: Employees with salary greater than any employee in HR","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees\nWHERE salary &gt; ANY (\n    SELECT salary\n    FROM employees\n    WHERE dept='HR'\n);\n</code></pre> <p>Output:</p> emp_id name salary 2 Bob 60000 5 Eva 70000"},{"location":"mysql/sql-query-practice-6/#3-correlated-subqueries","title":"3. Correlated Subqueries","text":""},{"location":"mysql/sql-query-practice-6/#q11-employees-with-salary-greater-than-average-salary-of-their-department","title":"Q11: Employees with salary greater than average salary of their department","text":"<pre><code>SELECT e1.emp_id, e1.name, e1.salary, e1.dept\nFROM employees e1\nWHERE e1.salary &gt; (\n    SELECT AVG(e2.salary)\n    FROM employees e2\n    WHERE e2.dept = e1.dept\n);\n</code></pre> <p>Output:</p> emp_id name salary dept 3 Charlie 55000 HR 2 Bob 60000 IT"},{"location":"mysql/sql-query-practice-6/#q12-employees-who-earn-the-maximum-salary-in-their-department","title":"Q12: Employees who earn the maximum salary in their department","text":"<pre><code>SELECT e1.emp_id, e1.name, e1.salary, e1.dept\nFROM employees e1\nWHERE e1.salary = (\n    SELECT MAX(e2.salary)\n    FROM employees e2\n    WHERE e2.dept = e1.dept\n);\n</code></pre> <p>Output:</p> emp_id name salary dept 3 Charlie 55000 HR 2 Bob 60000 IT 5 Eva 70000 Sales"},{"location":"mysql/sql-query-practice-6/#q13-employees-whose-salary-is-greater-than-all-employees-in-hr","title":"Q13: Employees whose salary is greater than all employees in HR","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees e\nWHERE salary &gt; ALL (\n    SELECT salary\n    FROM employees\n    WHERE dept='HR'\n);\n</code></pre> <p>Output:</p> emp_id name salary 2 Bob 60000 5 Eva 70000"},{"location":"mysql/sql-query-practice-6/#q14-employees-with-salary-less-than-the-maximum-salary-of-it-department","title":"Q14: Employees with salary less than the maximum salary of IT department","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees e\nWHERE salary &lt; (\n    SELECT MAX(salary)\n    FROM employees\n    WHERE dept='IT'\n);\n</code></pre> <p>Output:</p> emp_id name salary 1 Alice 48000 3 Charlie 55000 4 David 45000"},{"location":"mysql/sql-query-practice-6/#q15-employees-earning-below-average-salary-of-sales-department","title":"Q15: Employees earning below average salary of Sales department","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees e\nWHERE salary &lt; (\n    SELECT AVG(salary)\n    FROM employees\n    WHERE dept='Sales'\n);\n</code></pre> <p>Output:</p> emp_id name salary (none)"},{"location":"mysql/sql-query-practice-6/#q16-employees-who-earn-more-than-any-employee-in-sales","title":"Q16: Employees who earn more than any employee in Sales","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees e\nWHERE salary &gt; ANY (\n    SELECT salary\n    FROM employees\n    WHERE dept='Sales'\n);\n</code></pre> <p>Output:</p> emp_id name salary 1 Alice 48000 2 Bob 60000 3 Charlie 55000 4 David 45000"},{"location":"mysql/sql-query-practice-6/#q17-employees-who-earn-less-than-any-employee-in-it","title":"Q17: Employees who earn less than any employee in IT","text":"<pre><code>SELECT emp_id, name, salary\nFROM employees e\nWHERE salary &lt; ANY (\n    SELECT salary\n    FROM employees\n    WHERE dept='IT'\n);\n</code></pre> <p>Output:</p> emp_id name salary 1 Alice 48000 4 David 45000"},{"location":"mysql/sql-query-practice-6/#q18-employees-earning-equal-to-average-of-their-department","title":"Q18: Employees earning equal to average of their department","text":"<pre><code>SELECT e1.emp_id, e1.name, e1.salary, e1.dept\nFROM employees e1\nWHERE e1.salary = (\n    SELECT AVG(e2.salary)\n    FROM employees e2\n    WHERE e2.dept = e1.dept\n);\n</code></pre> <p>Output:</p> emp_id name salary dept (none)"},{"location":"mysql/sql-query-practice-6/#q19-employees-earning-less-than-maximum-salary-in-their-department","title":"Q19: Employees earning less than maximum salary in their department","text":"<pre><code>SELECT e1.emp_id, e1.name, e1.salary, e1.dept\nFROM employees e1\nWHERE e1.salary &lt; (\n    SELECT MAX(e2.salary)\n    FROM employees e2\n    WHERE e2.dept = e1.dept\n);\n</code></pre> <p>Output:</p> emp_id name salary dept 1 Alice 48000 HR 4 David 45000 IT"},{"location":"mysql/sql-query-practice-6/#q20-employees-earning-more-than-minimum-salary-in-their-department","title":"Q20: Employees earning more than minimum salary in their department","text":"<pre><code>SELECT e1.emp_id, e1.name, e1.salary, e1.dept\nFROM employees e1\nWHERE e1.salary &gt; (\n    SELECT MIN(e2.salary)\n    FROM employees e2\n    WHERE e2.dept = e1.dept\n);\n</code></pre> <p>Output:</p> emp_id name salary dept 1 Alice 48000 HR 3 Charlie 55000 HR 2 Bob 60000 IT"},{"location":"mysql/sql-query-practice-7/","title":"SQL Practice: Aggregations (GROUP BY, Aggregate Functions, HAVING) with Explanations","text":"<p>This file contains 20 SQL practice problems covering:</p> <ul> <li>GROUP BY</li> <li>Aggregate functions: COUNT, SUM, AVG, MIN, MAX</li> <li>HAVING clause</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/sql-query-practice-7/#1-group-by-and-count","title":"1. GROUP BY and COUNT","text":""},{"location":"mysql/sql-query-practice-7/#q1-count-employees-in-each-department","title":"Q1: Count employees in each department","text":"<p>Input Table: employees</p> emp_id name dept 1 Alice HR 2 Bob IT 3 Charlie HR 4 David IT 5 Eva Sales <pre><code>SELECT dept, COUNT(*) AS emp_count\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Explanation: <code>COUNT(*)</code> counts rows in each department.</p> <p>Output:</p> dept emp_count HR 2 IT 2 Sales 1"},{"location":"mysql/sql-query-practice-7/#q2-count-employees-with-salary-50000-in-each-department","title":"Q2: Count employees with salary &gt; 50000 in each department","text":"<p>Input Table: employees</p> emp_id name dept salary 1 Alice HR 48000 2 Bob IT 60000 3 Charlie HR 55000 4 David IT 45000 5 Eva Sales 70000 <pre><code>SELECT dept, COUNT(*) AS emp_count_high_salary\nFROM employees\nWHERE salary &gt; 50000\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept emp_count_high_salary HR 1 IT 1 Sales 1"},{"location":"mysql/sql-query-practice-7/#q3-count-distinct-departments","title":"Q3: Count distinct departments","text":"<pre><code>SELECT COUNT(DISTINCT dept) AS distinct_departments\nFROM employees;\n</code></pre> <p>Output:</p> distinct_departments 3"},{"location":"mysql/sql-query-practice-7/#q4-count-employees-per-department-having-more-than-1-employee","title":"Q4: Count employees per department having more than 1 employee","text":"<pre><code>SELECT dept, COUNT(*) AS emp_count\nFROM employees\nGROUP BY dept\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Output:</p> dept emp_count HR 2 IT 2"},{"location":"mysql/sql-query-practice-7/#q5-count-employees-whose-name-starts-with-a-per-department","title":"Q5: Count employees whose name starts with 'A' per department","text":"<pre><code>SELECT dept, COUNT(*) AS count_A\nFROM employees\nWHERE name LIKE 'A%'\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept count_A HR 1"},{"location":"mysql/sql-query-practice-7/#2-sum","title":"2. SUM","text":""},{"location":"mysql/sql-query-practice-7/#q6-total-salary-per-department","title":"Q6: Total salary per department","text":"<pre><code>SELECT dept, SUM(salary) AS total_salary\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept total_salary HR 103000 IT 105000 Sales 70000"},{"location":"mysql/sql-query-practice-7/#q7-total-salary-of-employees-with-salary-50000-per-department","title":"Q7: Total salary of employees with salary &gt; 50000 per department","text":"<pre><code>SELECT dept, SUM(salary) AS high_salary_sum\nFROM employees\nWHERE salary &gt; 50000\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept high_salary_sum HR 55000 IT 60000 Sales 70000"},{"location":"mysql/sql-query-practice-7/#q8-total-salary-across-company","title":"Q8: Total salary across company","text":"<pre><code>SELECT SUM(salary) AS total_company_salary\nFROM employees;\n</code></pre> <p>Output:</p> total_company_salary 278000"},{"location":"mysql/sql-query-practice-7/#q9-sum-of-salary-per-department-having-sum-100000","title":"Q9: Sum of salary per department having sum &gt; 100000","text":"<pre><code>SELECT dept, SUM(salary) AS total_salary\nFROM employees\nGROUP BY dept\nHAVING SUM(salary) &gt; 100000;\n</code></pre> <p>Output:</p> dept total_salary HR 103000 IT 105000"},{"location":"mysql/sql-query-practice-7/#q10-sum-salary-where-employee-name-contains-a","title":"Q10: Sum salary where employee name contains 'a'","text":"<pre><code>SELECT SUM(salary) AS total_a_salary\nFROM employees\nWHERE name LIKE '%a%';\n</code></pre> <p>Output:</p> total_a_salary 178000"},{"location":"mysql/sql-query-practice-7/#3-avg","title":"3. AVG","text":""},{"location":"mysql/sql-query-practice-7/#q11-average-salary-per-department","title":"Q11: Average salary per department","text":"<pre><code>SELECT dept, AVG(salary) AS avg_salary\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept avg_salary HR 51500 IT 52500 Sales 70000"},{"location":"mysql/sql-query-practice-7/#q12-average-salary-of-employees-with-salary-50000","title":"Q12: Average salary of employees with salary &gt; 50000","text":"<pre><code>SELECT AVG(salary) AS avg_high_salary\nFROM employees\nWHERE salary &gt; 50000;\n</code></pre> <p>Output:</p> avg_high_salary 61666.67"},{"location":"mysql/sql-query-practice-7/#q13-average-salary-per-department-having-more-than-1-employee","title":"Q13: Average salary per department having more than 1 employee","text":"<pre><code>SELECT dept, AVG(salary) AS avg_salary\nFROM employees\nGROUP BY dept\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Output:</p> dept avg_salary HR 51500 IT 52500"},{"location":"mysql/sql-query-practice-7/#q14-average-salary-of-employees-whose-name-starts-with-c","title":"Q14: Average salary of employees whose name starts with 'C'","text":"<pre><code>SELECT AVG(salary) AS avg_C_salary\nFROM employees\nWHERE name LIKE 'C%';\n</code></pre> <p>Output:</p> avg_C_salary 55000"},{"location":"mysql/sql-query-practice-7/#q15-average-salary-across-company","title":"Q15: Average salary across company","text":"<pre><code>SELECT AVG(salary) AS avg_salary_company\nFROM employees;\n</code></pre> <p>Output:</p> avg_salary_company 55600"},{"location":"mysql/sql-query-practice-7/#4-minmax","title":"4. MIN/MAX","text":""},{"location":"mysql/sql-query-practice-7/#q16-minimum-and-maximum-salary-per-department","title":"Q16: Minimum and Maximum salary per department","text":"<pre><code>SELECT dept, MIN(salary) AS min_salary, MAX(salary) AS max_salary\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept min_salary max_salary HR 48000 55000 IT 45000 60000 Sales 70000 70000"},{"location":"mysql/sql-query-practice-7/#q17-minimum-salary-in-company","title":"Q17: Minimum salary in company","text":"<pre><code>SELECT MIN(salary) AS min_salary_company\nFROM employees;\n</code></pre> <p>Output:</p> min_salary_company 45000"},{"location":"mysql/sql-query-practice-7/#q18-maximum-salary-in-company","title":"Q18: Maximum salary in company","text":"<pre><code>SELECT MAX(salary) AS max_salary_company\nFROM employees;\n</code></pre> <p>Output:</p> max_salary_company 70000"},{"location":"mysql/sql-query-practice-7/#q19-maximum-salary-per-department-having-more-than-1-employee","title":"Q19: Maximum salary per department having more than 1 employee","text":"<pre><code>SELECT dept, MAX(salary) AS max_salary\nFROM employees\nGROUP BY dept\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Output:</p> dept max_salary HR 55000 IT 60000"},{"location":"mysql/sql-query-practice-7/#q20-minimum-salary-for-employees-with-salary-50000","title":"Q20: Minimum salary for employees with salary &gt; 50000","text":"<pre><code>SELECT MIN(salary) AS min_high_salary\nFROM employees\nWHERE salary &gt; 50000;\n</code></pre> <p>Output:</p> min_high_salary 55000"},{"location":"mysql/sub-query/","title":"Data Query Language (DQL) \u2013 Part 4: Subqueries &amp; CTE (WITH)","text":"<p>This part dives into Subqueries and CTEs (Common Table Expressions) with 6 core examples and 3 complex cases. Each example shows input tables, the SQL query, and the expected output.</p>"},{"location":"mysql/sub-query/#sample-tables","title":"Sample Tables","text":""},{"location":"mysql/sub-query/#employees","title":"Employees","text":"EmpID Name DeptID Salary ManagerID 101 Amit Sharma 1 50000 nan 102 Riya Mehta 2 70000 101 103 Arjun Rao 3 55000 101 104 Neha Singh 2 80000 102 105 Rohit Verma 1 48000 101 106 Priya Nair 2 65000 102"},{"location":"mysql/sub-query/#departments","title":"Departments","text":"DeptID DeptName 1 HR 2 IT 3 Finance 4 Marketing"},{"location":"mysql/sub-query/#orders","title":"Orders","text":"OrderID EmpID Customer OrderDate 1 102 Acme 2023-01-10 2 104 Bolt 2023-01-15 3 102 Crown 2023-02-02 4 106 Acme 2023-02-18 5 103 Delta 2023-03-05 6 106 Acme 2023-03-12"},{"location":"mysql/sub-query/#orderitems","title":"OrderItems","text":"OrderID Product Qty UnitPrice 1 Laptop 1 60000 1 Mouse 2 1000 2 Tablet 3 15000 3 Laptop 1 60000 3 Phone 2 20000 4 Phone 1 20000 5 Laptop 1 60000 6 Mouse 5 1000"},{"location":"mysql/sub-query/#1-scalar-subquery-employees-earning-above-company-average","title":"1) Scalar Subquery \u2013 Employees earning above company average","text":"<pre><code>SELECT EmpID, Name, Salary\nFROM Employees\nWHERE Salary &gt; (SELECT AVG(Salary) FROM Employees)\nORDER BY Salary DESC;\n</code></pre> <p>Output |   EmpID | Name       |   Salary | |--------:|:-----------|---------:| |     104 | Neha Singh |    80000 | |     102 | Riya Mehta |    70000 | |     106 | Priya Nair |    65000 |</p>"},{"location":"mysql/sub-query/#2-in-subquery-employees-in-departments-having-more-than-1-employee","title":"2) IN Subquery \u2013 Employees in departments having more than 1 employee","text":"<pre><code>SELECT e.EmpID, e.Name, e.DeptID, d.DeptName\nFROM Employees e\nJOIN Departments d ON e.DeptID = d.DeptID\nWHERE e.DeptID IN (\n  SELECT DeptID\n  FROM Employees\n  GROUP BY DeptID\n  HAVING COUNT(*) &gt; 1\n)\nORDER BY e.DeptID, e.Name;\n</code></pre> <p>Output |   EmpID | Name        |   DeptID | DeptName   | |--------:|:------------|---------:|:-----------| |     101 | Amit Sharma |        1 | HR         | |     105 | Rohit Verma |        1 | HR         | |     104 | Neha Singh  |        2 | IT         | |     106 | Priya Nair  |        2 | IT         | |     102 | Riya Mehta  |        2 | IT         |</p>"},{"location":"mysql/sub-query/#3-exists-correlated-employees-who-have-placed-at-least-one-order","title":"3) EXISTS (Correlated) \u2013 Employees who have placed at least one order","text":"<pre><code>SELECT e.EmpID, e.Name\nFROM Employees e\nWHERE EXISTS (\n  SELECT 1\n  FROM Orders o\n  WHERE o.EmpID = e.EmpID\n)\nORDER BY e.EmpID;\n</code></pre> <p>Output |   EmpID | Name       | |--------:|:-----------| |     102 | Riya Mehta | |     103 | Arjun Rao  | |     104 | Neha Singh | |     106 | Priya Nair |</p>"},{"location":"mysql/sub-query/#4-not-exists-departments-with-no-employees","title":"4) NOT EXISTS \u2013 Departments with no employees","text":"<pre><code>SELECT d.DeptID, d.DeptName\nFROM Departments d\nWHERE NOT EXISTS (\n  SELECT 1\n  FROM Employees e\n  WHERE e.DeptID = d.DeptID\n)\nORDER BY d.DeptID;\n</code></pre> <p>Output |   DeptID | DeptName   | |---------:|:-----------| |        4 | Marketing  |</p>"},{"location":"mysql/sub-query/#5-subquery-in-from-derived-table-revenue-by-product","title":"5) Subquery in FROM (Derived Table) \u2013 Revenue by product","text":"<pre><code>SELECT t.Product, t.TotalRevenue\nFROM (\n  SELECT oi.Product,\n         SUM(oi.Qty * oi.UnitPrice) AS TotalRevenue\n  FROM OrderItems oi\n  GROUP BY oi.Product\n) AS t\nORDER BY t.TotalRevenue DESC;\n</code></pre> <p>Output | Product   |   TotalRevenue | |:----------|---------------:| | Laptop    |         180000 | | Phone     |          60000 | | Tablet    |          45000 | | Mouse     |           7000 |</p>"},{"location":"mysql/sub-query/#6-anyall-salary-greater-than-all-salaries-in-hr","title":"6) ANY/ALL \u2013 Salary greater than ALL salaries in HR","text":"<pre><code>SELECT Name, Salary\nFROM Employees\nWHERE Salary &gt; ALL (\n  SELECT Salary FROM Employees WHERE DeptID = 1\n)\nORDER BY Salary DESC;\n</code></pre> <p>Output | Name       |   Salary | |:-----------|---------:| | Neha Singh |    80000 | | Riya Mehta |    70000 | | Priya Nair |    65000 | | Arjun Rao  |    55000 |</p>"},{"location":"mysql/sub-query/#ctes-with-clause","title":"CTEs (WITH clause)","text":""},{"location":"mysql/sub-query/#7-cte-revenue-per-employee","title":"7) CTE \u2013 Revenue per employee","text":"<pre><code>WITH OrderTotals AS (\n  SELECT oi.OrderID, SUM(oi.Qty * oi.UnitPrice) AS OrderTotal\n  FROM OrderItems oi\n  GROUP BY oi.OrderID\n)\nSELECT e.Name, SUM(ot.OrderTotal) AS Revenue\nFROM Orders o\nJOIN OrderTotals ot ON o.OrderID = ot.OrderID\nJOIN Employees e ON o.EmpID = e.EmpID\nGROUP BY e.Name\nORDER BY Revenue DESC;\n</code></pre> <p>Output | Name       |   Revenue | |:-----------|----------:| | Riya Mehta |    162000 | | Arjun Rao  |     60000 | | Neha Singh |     45000 | | Priya Nair |     25000 |</p>"},{"location":"mysql/sub-query/#8-multiple-ctes-per-customer-orders-revenue","title":"8) Multiple CTEs \u2013 Per-customer orders &amp; revenue","text":"<pre><code>WITH OrderTotals AS (\n  SELECT oi.OrderID, SUM(oi.Qty * oi.UnitPrice) AS OrderTotal\n  FROM OrderItems oi\n  GROUP BY oi.OrderID\n),\nCustomerOrders AS (\n  SELECT o.Customer, o.OrderID, ot.OrderTotal\n  FROM Orders o\n  JOIN OrderTotals ot ON o.OrderID = ot.OrderID\n)\nSELECT Customer,\n       COUNT(DISTINCT OrderID) AS Orders,\n       SUM(OrderTotal)         AS Revenue\nFROM CustomerOrders\nGROUP BY Customer\nORDER BY Revenue DESC;\n</code></pre> <p>Output | Customer   |   Orders |   Revenue | |:-----------|---------:|----------:| | Crown      |        1 |    100000 | | Acme       |        3 |     87000 | | Delta      |        1 |     60000 | | Bolt       |        1 |     45000 |</p>"},{"location":"mysql/sub-query/#9-recursive-cte-organization-levels","title":"9) Recursive CTE \u2013 Organization levels","text":"<pre><code>WITH RECURSIVE Org AS (\n  SELECT EmpID, Name, ManagerID, 0 AS Level\n  FROM Employees\n  WHERE ManagerID IS NULL\n  UNION ALL\n  SELECT e.EmpID, e.Name, e.ManagerID, o.Level + 1\n  FROM Employees e\n  JOIN Org o ON e.ManagerID = o.EmpID\n)\nSELECT EmpID, Name, Level\nFROM Org\nORDER BY Level, EmpID;\n</code></pre> <p>Output |   EmpID | Name        |   Level | |--------:|:------------|--------:| |     101 | Amit Sharma |       0 | |     102 | Riya Mehta  |       1 | |     103 | Arjun Rao   |       1 | |     105 | Rohit Verma |       1 | |     104 | Neha Singh  |       2 | |     106 | Priya Nair  |       2 |</p>"},{"location":"mysql/sub-query/#complex-examples","title":"Complex Examples","text":""},{"location":"mysql/sub-query/#complex-a-top-2-earners-per-department-cte-window-function","title":"Complex A) Top 2 earners per department (CTE + window function)","text":"<pre><code>WITH Ranked AS (\n  SELECT d.DeptName, e.Name, e.Salary,\n         ROW_NUMBER() OVER (PARTITION BY e.DeptID ORDER BY e.Salary DESC) AS rn\n  FROM Employees e\n  LEFT JOIN Departments d ON e.DeptID = d.DeptID\n)\nSELECT DeptName, Name, Salary, rn AS Rank\nFROM Ranked\nWHERE rn &lt;= 2\nORDER BY DeptName, Rank, Name;\n</code></pre> <p>Output | DeptName   | Name        |   Salary |   Rank | |:-----------|:------------|---------:|-------:| | Finance    | Arjun Rao   |    55000 |      1 | | HR         | Amit Sharma |    50000 |      1 | | HR         | Rohit Verma |    48000 |      2 | | IT         | Neha Singh  |    80000 |      1 | | IT         | Riya Mehta  |    70000 |      2 |</p>"},{"location":"mysql/sub-query/#complex-b-highest-revenue-product-per-customer-cte-ranking","title":"Complex B) Highest revenue product per customer (CTE + ranking)","text":"<pre><code>WITH CustProd AS (\n  SELECT o.Customer, oi.Product,\n         SUM(oi.Qty * oi.UnitPrice) AS Revenue\n  FROM Orders o\n  JOIN OrderItems oi ON o.OrderID = oi.OrderID\n  GROUP BY o.Customer, oi.Product\n),\nRanked AS (\n  SELECT Customer, Product, Revenue,\n         ROW_NUMBER() OVER (PARTITION BY Customer ORDER BY Revenue DESC) AS rk\n  FROM CustProd\n)\nSELECT Customer, Product, Revenue\nFROM Ranked\nWHERE rk = 1\nORDER BY Customer;\n</code></pre> <p>Output | Customer   | Product   |   Revenue | |:-----------|:----------|----------:| | Acme       | Laptop    |     60000 | | Bolt       | Tablet    |     45000 | | Crown      | Laptop    |     60000 | | Delta      | Laptop    |     60000 |</p>"},{"location":"mysql/sub-query/#complex-c-manager-employee-pairs-recursive-cte-for-relationships","title":"Complex C) Manager \u2192 Employee pairs (recursive CTE for relationships)","text":"<pre><code>WITH RECURSIVE Tree AS (\n  SELECT EmpID, Name, ManagerID, CAST(Name AS VARCHAR(200)) AS Path\n  FROM Employees\n  WHERE ManagerID IS NULL\n  UNION ALL\n  SELECT e.EmpID, e.Name, e.ManagerID, CAST(t.Path || ' &gt; ' || e.Name AS VARCHAR(200))\n  FROM Employees e\n  JOIN Tree t ON e.ManagerID = t.EmpID\n)\nSELECT * FROM Tree ORDER BY Path;\n</code></pre> <p>Output | Manager     | Employee    | |:------------|:------------| | Amit Sharma | Arjun Rao   | | Amit Sharma | Riya Mehta  | | Amit Sharma | Rohit Verma | | Riya Mehta  | Neha Singh  | | Riya Mehta  | Priya Nair  |</p> <p>\u2705 In this part, you learned: - Scalar, IN, EXISTS/NOT EXISTS, ANY/ALL subqueries - Derived tables (subquery in FROM) - CTEs (single, multiple) and recursive CTEs for hierarchies - Complex patterns using window functions + CTEs</p>"},{"location":"mysql/tcl-commands/","title":"Transaction Control Language (TCL) in SQL","text":""},{"location":"mysql/tcl-commands/#what-is-tcl","title":"\ud83d\udd39 What is TCL?","text":"<p>TCL commands manage transactions in the database. They ensure data integrity and control how changes are saved or undone.</p>"},{"location":"mysql/tcl-commands/#key-tcl-commands-in-depth","title":"\ud83d\udd39 Key TCL Commands (in depth)","text":""},{"location":"mysql/tcl-commands/#1-commit","title":"1. COMMIT","text":"<ul> <li>Saves changes permanently.</li> </ul> <pre><code>COMMIT;\n</code></pre>"},{"location":"mysql/tcl-commands/#2-rollback","title":"2. ROLLBACK","text":"<ul> <li>Undo changes since last commit.</li> </ul> <pre><code>ROLLBACK;\n</code></pre>"},{"location":"mysql/tcl-commands/#3-savepoint","title":"3. SAVEPOINT","text":"<ul> <li>Creates a point to rollback partially.</li> </ul> <pre><code>SAVEPOINT sp1;\nROLLBACK TO sp1;\n</code></pre>"},{"location":"mysql/tcl-commands/#4-set-transaction","title":"4. SET TRANSACTION","text":"<ul> <li>Sets transaction properties like isolation level.</li> </ul> <pre><code>SET TRANSACTION READ ONLY;\n</code></pre>"},{"location":"mysql/tcl-commands/#pros-cons-of-tcl","title":"\ud83d\udd39 Pros &amp; Cons of TCL","text":""},{"location":"mysql/tcl-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Transaction Safety \u2192 Prevents accidental data loss.  </li> <li>Consistency \u2192 Maintains ACID properties.  </li> <li>Flexibility \u2192 Can rollback fully or partially.  </li> <li>Control \u2192 Developers control when to save changes.</li> </ol>"},{"location":"mysql/tcl-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Complexity \u2192 Misuse can cause locks.  </li> <li>Performance \u2192 Frequent rollbacks may reduce speed.  </li> <li>Overhead \u2192 Managing multiple savepoints may be costly.  </li> <li>Limited Scope \u2192 Works only with DML changes.</li> </ol>"},{"location":"mysql/tcl-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage COMMIT Save all changes permanently \u274c No End transaction ROLLBACK Undo changes \u2705 Yes Revert mistaken updates SAVEPOINT Partial rollback \u2705 Yes Rollback to checkpoint SET TRANSACTION Define transaction behavior N/A Read-only transaction"},{"location":"mysql/tcl-commands/#tcl-commands-feature-comparison","title":"\ud83d\udcca TCL Commands \u2013 Feature Comparison","text":"Command Rollback Data Loss Structure Change Typical Use Case COMMIT \u274c No \u274c No \u274c No Save all operations ROLLBACK \u2705 Yes \u274c No \u274c No Undo operations SAVEPOINT \u2705 Yes \u274c No \u274c No Rollback to savepoint SET TRANSACTION N/A \u274c No \u274c No Define isolation level"},{"location":"mysql/advance-for-etl/","title":"SQL Practice: Performance / Index Considerations for ETL Testing","text":"<p>This file contains 5 SQL practice problems covering:</p> <ul> <li>Using EXPLAIN PLAN to understand query execution</li> <li>Identify heavy queries</li> <li>Index usage</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query / Commands</li> <li>Explanation</li> <li>Output / Expected Result</li> </ul>"},{"location":"mysql/advance-for-etl/#1-explain-plan-for-simple-select","title":"1. EXPLAIN PLAN for simple SELECT","text":""},{"location":"mysql/advance-for-etl/#q1-analyze-query-execution-for-employee-selection","title":"Q1: Analyze query execution for employee selection","text":"<p>Input Table: employees</p> emp_id name dept_id salary 1 Alice 10 50000 2 Bob 20 60000 3 Charlie 10 55000 <p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT * FROM employees WHERE dept_id = 10;\n</code></pre> <p>Explanation:</p> <ul> <li><code>EXPLAIN PLAN</code> shows how the database executes a query.</li> <li>Helps identify if indexes are being used.</li> <li>ETL use case: Ensure queries on large staging tables are optimized.</li> </ul> <p>Output / Result:</p> <ul> <li>Shows full table scan or index usage depending on table structure.</li> </ul>"},{"location":"mysql/advance-for-etl/#2-create-index-and-test-performance","title":"2. Create Index and Test Performance","text":""},{"location":"mysql/advance-for-etl/#q2-add-index-on-dept_id-to-improve-query","title":"Q2: Add index on dept_id to improve query","text":"<p>Query:</p> <pre><code>CREATE INDEX idx_dept_id ON employees(dept_id);\nSELECT * FROM employees WHERE dept_id = 10;\n</code></pre> <p>Explanation:</p> <ul> <li>Index improves performance on WHERE filters.</li> <li>ETL use case: Optimized queries in large source/target tables.</li> </ul> <p>Output:</p> <ul> <li>Faster execution compared to full table scan.</li> </ul>"},{"location":"mysql/advance-for-etl/#3-identify-heavy-query-using-explain-plan","title":"3. Identify Heavy Query Using EXPLAIN PLAN","text":""},{"location":"mysql/advance-for-etl/#q3-join-query-on-large-tables","title":"Q3: Join query on large tables","text":"<p>Input Tables:</p> <ul> <li>employees (1M rows)</li> <li>departments (100 rows)</li> </ul> <p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT e.name, d.dept_name\nFROM employees e\nJOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Explanation:</p> <ul> <li>EXPLAIN PLAN shows estimated rows, join type, cost.</li> <li>Helps detect if query is heavy before running in ETL.</li> </ul> <p>Output / Result:</p> <ul> <li>Details of join order, estimated cost, potential need for indexes.</li> </ul>"},{"location":"mysql/advance-for-etl/#4-detect-queries-without-indexes","title":"4. Detect Queries Without Indexes","text":""},{"location":"mysql/advance-for-etl/#q4-check-if-a-query-uses-index","title":"Q4: Check if a query uses index","text":"<p>Query:</p> <pre><code>SELECT * FROM employees WHERE salary &gt; 50000;\n</code></pre> <p>Explanation:</p> <ul> <li>If no index on salary, query may perform full table scan.</li> <li>ETL use case: Avoid heavy queries in large data loads.</li> </ul> <p>Output / Result:</p> <ul> <li>Execution plan indicates full table scan.</li> <li>Recommendation: Create index if this query is frequent.</li> </ul>"},{"location":"mysql/advance-for-etl/#5-identify-and-optimize-heavy-queries","title":"5. Identify and Optimize Heavy Queries","text":""},{"location":"mysql/advance-for-etl/#q5-aggregation-on-large-table","title":"Q5: Aggregation on large table","text":"<p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT dept_id, COUNT(*) AS emp_count, AVG(salary) AS avg_salary\nFROM employees\nGROUP BY dept_id;\n</code></pre> <p>Explanation:</p> <ul> <li>EXPLAIN PLAN shows aggregation cost.</li> <li>Using indexes or partitioning may improve performance.</li> <li>ETL use case: Validate that aggregate queries are efficient for staging to target comparisons.</li> </ul> <p>Output / Result:</p> <ul> <li>Execution plan with row estimates, table access type, and cost.</li> <li>Helps ETL testers identify bottlen</li> </ul>"},{"location":"mysql/advance-for-etl/case-statements/","title":"SQL Practice: CASE Statements / Conditional Logic with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>CASE WHEN ... THEN ... ELSE ... END</li> <li>Using CASE inside aggregations</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/case-statements/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: employees</p> emp_id name dept salary 1 Alice HR 48000 2 Bob IT 60000 3 Charlie HR 55000 4 David IT 45000 5 Eva Sales 70000"},{"location":"mysql/advance-for-etl/case-statements/#2-simple-case-statements","title":"2. Simple CASE Statements","text":""},{"location":"mysql/advance-for-etl/case-statements/#q1-assign-salary-grade-based-on-salary","title":"Q1: Assign salary grade based on salary","text":"<pre><code>SELECT emp_id, name, salary,\n       CASE\n           WHEN salary &lt; 50000 THEN 'Low'\n           WHEN salary BETWEEN 50000 AND 60000 THEN 'Medium'\n           ELSE 'High'\n       END AS salary_grade\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name salary salary_grade 1 Alice 48000 Low 2 Bob 60000 Medium 3 Charlie 55000 Medium 4 David 45000 Low 5 Eva 70000 High"},{"location":"mysql/advance-for-etl/case-statements/#q2-mark-department-type","title":"Q2: Mark department type","text":"<pre><code>SELECT emp_id, name, dept,\n       CASE dept\n           WHEN 'HR' THEN 'Admin'\n           WHEN 'IT' THEN 'Technical'\n           ELSE 'Business'\n       END AS dept_type\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name dept dept_type 1 Alice HR Admin 2 Bob IT Technical 3 Charlie HR Admin 4 David IT Technical 5 Eva Sales Business"},{"location":"mysql/advance-for-etl/case-statements/#q3-flag-high-earners","title":"Q3: Flag high earners","text":"<pre><code>SELECT emp_id, name, salary,\n       CASE WHEN salary &gt; 60000 THEN 'Yes' ELSE 'No' END AS high_earner\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name salary high_earner 1 Alice 48000 No 2 Bob 60000 No 3 Charlie 55000 No 4 David 45000 No 5 Eva 70000 Yes"},{"location":"mysql/advance-for-etl/case-statements/#q4-combine-multiple-conditions","title":"Q4: Combine multiple conditions","text":"<pre><code>SELECT emp_id, name, dept, salary,\n       CASE\n           WHEN dept='IT' AND salary &gt; 50000 THEN 'Tech High'\n           WHEN dept='IT' THEN 'Tech Low'\n           ELSE 'Other'\n       END AS category\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name dept salary category 1 Alice HR 48000 Other 2 Bob IT 60000 Tech High 3 Charlie HR 55000 Other 4 David IT 45000 Tech Low 5 Eva Sales 70000 Other"},{"location":"mysql/advance-for-etl/case-statements/#q5-case-with-null-check","title":"Q5: CASE with NULL check","text":"<pre><code>SELECT emp_id, name, dept, salary,\n       CASE WHEN salary IS NULL THEN 'Missing' ELSE 'Available' END AS salary_status\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name dept salary salary_status 1 Alice HR 48000 Available 2 Bob IT 60000 Available 3 Charlie HR 55000 Available 4 David IT 45000 Available 5 Eva Sales 70000 Available"},{"location":"mysql/advance-for-etl/case-statements/#3-using-case-inside-aggregations","title":"3. Using CASE inside Aggregations","text":""},{"location":"mysql/advance-for-etl/case-statements/#q6-count-high-and-low-salary-employees","title":"Q6: Count high and low salary employees","text":"<pre><code>SELECT\n       SUM(CASE WHEN salary &gt; 60000 THEN 1 ELSE 0 END) AS high_salary_count,\n       SUM(CASE WHEN salary &lt;= 60000 THEN 1 ELSE 0 END) AS low_salary_count\nFROM employees;\n</code></pre> <p>Output:</p> high_salary_count low_salary_count 1 4"},{"location":"mysql/advance-for-etl/case-statements/#q7-total-salary-per-dept-with-conditional-bonus","title":"Q7: Total salary per dept with conditional bonus","text":"<pre><code>SELECT dept,\n       SUM(salary + CASE WHEN salary &gt; 50000 THEN 500 ELSE 200 END) AS total_with_bonus\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept total_with_bonus HR 108700 IT 105700 Sales 70500"},{"location":"mysql/advance-for-etl/case-statements/#q8-average-salary-grade-calculation","title":"Q8: Average salary grade calculation","text":"<pre><code>SELECT dept,\n       AVG(CASE WHEN salary &gt; 60000 THEN 3\n                WHEN salary BETWEEN 50000 AND 60000 THEN 2\n                ELSE 1 END) AS avg_salary_grade\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept avg_salary_grade HR 1.5 IT 2.5 Sales 3"},{"location":"mysql/advance-for-etl/case-statements/#q9-count-employees-by-category-using-case","title":"Q9: Count employees by category using CASE","text":"<pre><code>SELECT\n       SUM(CASE WHEN dept='IT' THEN 1 ELSE 0 END) AS IT_count,\n       SUM(CASE WHEN dept='HR' THEN 1 ELSE 0 END) AS HR_count,\n       SUM(CASE WHEN dept='Sales' THEN 1 ELSE 0 END) AS Sales_count\nFROM employees;\n</code></pre> <p>Output:</p> IT_count HR_count Sales_count 2 2 1"},{"location":"mysql/advance-for-etl/case-statements/#q10-conditional-max-salary-per-dept","title":"Q10: Conditional MAX salary per dept","text":"<pre><code>SELECT dept,\n       MAX(CASE WHEN salary &gt; 50000 THEN salary ELSE 0 END) AS max_high_salary\nFROM employees\nGROUP BY dept;\n</code></pre> <p>Output:</p> dept max_high_salary HR 55000 IT 60000 Sales 70000"},{"location":"mysql/advance-for-etl/case-statements/#explanation","title":"Explanation:","text":"<ol> <li>CASE WHEN ... THEN ... ELSE ... END lets you apply conditional logic in SELECT.</li> <li>Inside aggregations, CASE allows counting, summing, or calculating values conditionally.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Transform raw data values based on conditions.</li> <li>Validate that business rules (e.g., salary grade, bonus) are applied correctly.</li> <li>Count or sum values based on conditional logic.</li> </ul>"},{"location":"mysql/advance-for-etl/data-comparison-techniques/","title":"SQL Practice: Validation Queries / Data Comparison Techniques with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>Check for missing or extra records between source and target</li> <li>Validate record counts per key or per group</li> <li>Identify duplicates</li> <li>Compare aggregates (SUM, AVG) between source and target</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#1-input-table-examples","title":"1. Input Table Examples","text":"<p>Table: source_orders</p> order_id customer_id amount 101 1 500 102 2 600 103 3 700 104 4 800 <p>Table: target_orders</p> order_id customer_id amount 101 1 500 102 2 600 104 4 800 105 5 900"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#2-check-for-missing-records-in-target","title":"2. Check for missing records in target","text":""},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q1-identify-source-orders-missing-in-target","title":"Q1: Identify source orders missing in target","text":"<pre><code>SELECT *\nFROM source_orders s\nWHERE NOT EXISTS (\n    SELECT 1 FROM target_orders t WHERE s.order_id = t.order_id\n);\n</code></pre> <p>Output:</p> order_id customer_id amount 103 3 700"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q2-identify-extra-records-in-target","title":"Q2: Identify extra records in target","text":"<pre><code>SELECT *\nFROM target_orders t\nWHERE NOT EXISTS (\n    SELECT 1 FROM source_orders s WHERE t.order_id = s.order_id\n);\n</code></pre> <p>Output:</p> order_id customer_id amount 105 5 900"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#3-validate-record-counts-per-keygroup","title":"3. Validate record counts per key/group","text":""},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q3-count-orders-per-customer-in-source","title":"Q3: Count orders per customer in source","text":"<pre><code>SELECT customer_id, COUNT(*) AS order_count\nFROM source_orders\nGROUP BY customer_id;\n</code></pre> <p>Output:</p> customer_id order_count 1 1 2 1 3 1 4 1"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q4-compare-counts-between-source-and-target","title":"Q4: Compare counts between source and target","text":"<pre><code>SELECT s.customer_id, COUNT(s.order_id) AS src_count, COUNT(t.order_id) AS tgt_count\nFROM source_orders s\nLEFT JOIN target_orders t ON s.order_id = t.order_id\nGROUP BY s.customer_id;\n</code></pre> <p>Output:</p> customer_id src_count tgt_count 1 1 1 2 1 1 3 1 0 4 1 1"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#4-identify-duplicates","title":"4. Identify duplicates","text":""},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q5-find-duplicate-orders-in-source","title":"Q5: Find duplicate orders in source","text":"<pre><code>SELECT order_id, COUNT(*) AS cnt\nFROM source_orders\nGROUP BY order_id\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Output:</p> order_id cnt -- No duplicates --"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q6-find-duplicate-customer-entries-in-target","title":"Q6: Find duplicate customer entries in target","text":"<pre><code>SELECT customer_id, COUNT(*) AS cnt\nFROM target_orders\nGROUP BY customer_id\nHAVING COUNT(*) &gt; 1;\n</code></pre> <p>Output:</p> customer_id cnt -- No duplicates --"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#5-compare-aggregates-sum-avg","title":"5. Compare aggregates (SUM, AVG)","text":""},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q7-total-sales-amount-source-vs-target","title":"Q7: Total sales amount source vs target","text":"<pre><code>SELECT SUM(amount) AS source_total FROM source_orders;\nSELECT SUM(amount) AS target_total FROM target_orders;\n</code></pre> <p>Output:</p> source_total target_total 2600 2300"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q8-average-order-amount-comparison","title":"Q8: Average order amount comparison","text":"<pre><code>SELECT AVG(amount) AS avg_source FROM source_orders;\nSELECT AVG(amount) AS avg_target FROM target_orders;\n</code></pre> <p>Output:</p> avg_source avg_target 650 766.67"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q9-compare-per-customer-amount","title":"Q9: Compare per customer amount","text":"<pre><code>SELECT s.customer_id, s.amount AS source_amount, t.amount AS target_amount\nFROM source_orders s\nLEFT JOIN target_orders t ON s.order_id = t.order_id;\n</code></pre> <p>Output:</p> customer_id source_amount target_amount 1 500 500 2 600 600 3 700 NULL 4 800 800"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#q10-validate-sum-per-customer-group","title":"Q10: Validate sum per customer group","text":"<pre><code>SELECT s.customer_id, SUM(s.amount) AS src_sum, SUM(t.amount) AS tgt_sum\nFROM source_orders s\nLEFT JOIN target_orders t ON s.order_id = t.order_id\nGROUP BY s.customer_id;\n</code></pre> <p>Output:</p> customer_id src_sum tgt_sum 1 500 500 2 600 600 3 700 NULL 4 800 800"},{"location":"mysql/advance-for-etl/data-comparison-techniques/#explanation","title":"Explanation:","text":"<ol> <li>Missing/Extra Records: Identifies discrepancies between source and target.</li> <li>Record Counts: Ensures no loss or duplication in ETL.</li> <li>Duplicates: Detects incorrect multiple entries.</li> <li>Aggregate Comparisons: Checks that sums and averages match expectations.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Core ETL validation: ensure completeness, accuracy, and consistency of transformed data.</li> <li>Compare source and target tables for all key metrics.</li> <li>Detect and resolve anomalies before loading</li> </ul>"},{"location":"mysql/advance-for-etl/data-type-conversion/","title":"SQL Practice: Data Type Conversions with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>CAST() and CONVERT()</li> <li>Implicit vs Explicit conversion</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/data-type-conversion/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: employees</p> emp_id name salary join_date 1 Alice 48000 2025-01-10 2 Bob 60000 2024-12-15 3 Charlie 55000 2025-03-01 4 David 45000 2025-02-20 5 Eva 70000 2024-11-05"},{"location":"mysql/advance-for-etl/data-type-conversion/#2-cast-convert-examples","title":"2. CAST() / CONVERT() Examples","text":""},{"location":"mysql/advance-for-etl/data-type-conversion/#q1-convert-salary-to-string","title":"Q1: Convert salary to string","text":"<pre><code>SELECT emp_id, name, CAST(salary AS VARCHAR(10)) AS salary_str\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name salary_str 1 Alice 48000 2 Bob 60000 3 Charlie 55000 4 David 45000 5 Eva 70000"},{"location":"mysql/advance-for-etl/data-type-conversion/#q2-convert-join_date-to-string","title":"Q2: Convert join_date to string","text":"<pre><code>SELECT emp_id, name, CONVERT(VARCHAR(10), join_date, 120) AS join_date_str\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name join_date_str 1 Alice 2025-01-10 2 Bob 2024-12-15 3 Charlie 2025-03-01 4 David 2025-02-20 5 Eva 2024-11-05"},{"location":"mysql/advance-for-etl/data-type-conversion/#q3-convert-string-to-date","title":"Q3: Convert string to date","text":"<pre><code>SELECT emp_id, name, CAST('2025-09-20' AS DATE) AS example_date\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name example_date 1 Alice 2025-09-20 2 Bob 2025-09-20 3 Charlie 2025-09-20 4 David 2025-09-20 5 Eva 2025-09-20"},{"location":"mysql/advance-for-etl/data-type-conversion/#q4-convert-salary-to-float-and-calculate-bonus","title":"Q4: Convert salary to float and calculate bonus","text":"<pre><code>SELECT emp_id, name, CAST(salary AS FLOAT) * 0.10 AS bonus\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name bonus 1 Alice 4800 2 Bob 6000 3 Charlie 5500 4 David 4500 5 Eva 7000"},{"location":"mysql/advance-for-etl/data-type-conversion/#q5-implicit-conversion-in-concatenation","title":"Q5: Implicit conversion in concatenation","text":"<pre><code>SELECT emp_id, name + ' earns ' + salary AS description\nFROM employees;\n</code></pre> <p>Output:</p> emp_id description 1 Alice earns 48000 2 Bob earns 60000 3 Charlie earns 55000 4 David earns 45000 5 Eva earns 70000"},{"location":"mysql/advance-for-etl/data-type-conversion/#q6-convert-numeric-string-to-integer","title":"Q6: Convert numeric string to integer","text":"<pre><code>SELECT emp_id, name, CAST('12345' AS INT) AS num_value\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name num_value 1 Alice 12345 2 Bob 12345 3 Charlie 12345 4 David 12345 5 Eva 12345"},{"location":"mysql/advance-for-etl/data-type-conversion/#q7-convert-date-to-datetime","title":"Q7: Convert date to datetime","text":"<pre><code>SELECT emp_id, name, CAST(join_date AS DATETIME) AS join_datetime\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name join_datetime 1 Alice 2025-01-10 00:00:00 2 Bob 2024-12-15 00:00:00 3 Charlie 2025-03-01 00:00:00 4 David 2025-02-20 00:00:00 5 Eva 2024-11-05 00:00:00"},{"location":"mysql/advance-for-etl/data-type-conversion/#q8-convert-integer-to-decimal","title":"Q8: Convert integer to decimal","text":"<pre><code>SELECT emp_id, name, CONVERT(DECIMAL(10,2), salary) AS salary_decimal\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name salary_decimal 1 Alice 48000.00 2 Bob 60000.00 3 Charlie 55000.00 4 David 45000.00 5 Eva 70000.00"},{"location":"mysql/advance-for-etl/data-type-conversion/#q9-implicit-conversion-in-comparison","title":"Q9: Implicit conversion in comparison","text":"<pre><code>SELECT emp_id, name\nFROM employees\nWHERE salary &gt; '50000';\n</code></pre> <p>Output:</p> emp_id name 2 Bob 3 Charlie 5 Eva"},{"location":"mysql/advance-for-etl/data-type-conversion/#q10-convert-string-date-to-different-format","title":"Q10: Convert string date to different format","text":"<pre><code>SELECT emp_id, name, CONVERT(VARCHAR(10), join_date, 101) AS join_date_us\nFROM employees;\n</code></pre> <p>Output:</p> emp_id name join_date_us 1 Alice 01/10/2025 2 Bob 12/15/2024 3 Charlie 03/01/2025 4 David 02/20/2025 5 Eva 11/05/2024"},{"location":"mysql/advance-for-etl/data-type-conversion/#explanation","title":"Explanation:","text":"<ol> <li>CAST() explicitly converts data from one type to another.</li> <li>CONVERT() can change types and formats (especially for dates).</li> <li>Implicit conversion happens automatically when data types are compatible.</li> <li>Explicit conversion is safer and avoids errors in ETL.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Verify numeric \u2192 string conversions for reporting.</li> <li>Ensure string \u2192 date conversions match target format.</li> <li>Validate ETL handles type changes correctly during t</li> </ul>"},{"location":"mysql/advance-for-etl/error-exception-handling/","title":"SQL Practice: Exception / Error Handling with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>Detecting NULLs and invalid data</li> <li>Handling negative values</li> <li>Identifying orphan records (foreign key violations)</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/error-exception-handling/#1-input-table-examples","title":"1. Input Table Examples","text":"<p>Table: employees</p> emp_id name salary dept_id 1 Alice 48000 10 2 Bob NULL 20 3 Charlie 55000 NULL 4 David -45000 10 5 Eva 70000 30 <p>Table: departments</p> dept_id dept_name 10 HR 20 IT 30 Sales"},{"location":"mysql/advance-for-etl/error-exception-handling/#2-detect-nulls","title":"2. Detect NULLs","text":""},{"location":"mysql/advance-for-etl/error-exception-handling/#q1-employees-with-null-salary","title":"Q1: Employees with NULL salary","text":"<pre><code>SELECT * FROM employees WHERE salary IS NULL;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 2 Bob NULL 20"},{"location":"mysql/advance-for-etl/error-exception-handling/#q2-employees-with-null-department","title":"Q2: Employees with NULL department","text":"<pre><code>SELECT * FROM employees WHERE dept_id IS NULL;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 3 Charlie 55000 NULL"},{"location":"mysql/advance-for-etl/error-exception-handling/#q3-employees-with-null-name-or-salary","title":"Q3: Employees with NULL name or salary","text":"<pre><code>SELECT * FROM employees WHERE name IS NULL OR salary IS NULL;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 2 Bob NULL 20"},{"location":"mysql/advance-for-etl/error-exception-handling/#3-detect-invalid-or-negative-values","title":"3. Detect invalid or negative values","text":""},{"location":"mysql/advance-for-etl/error-exception-handling/#q4-employees-with-negative-salary","title":"Q4: Employees with negative salary","text":"<pre><code>SELECT * FROM employees WHERE salary &lt; 0;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 4 David -45000 10"},{"location":"mysql/advance-for-etl/error-exception-handling/#q5-employees-with-salary-outside-valid-range-eg-0-or-100000","title":"Q5: Employees with salary outside valid range (e.g., &lt;0 or &gt;100000)","text":"<pre><code>SELECT * FROM employees WHERE salary &lt; 0 OR salary &gt; 100000;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 4 David -45000 10"},{"location":"mysql/advance-for-etl/error-exception-handling/#4-identify-orphan-records-fk-violations","title":"4. Identify orphan records (FK violations)","text":""},{"location":"mysql/advance-for-etl/error-exception-handling/#q6-employees-with-invalid-department","title":"Q6: Employees with invalid department","text":"<pre><code>SELECT * FROM employees e\nLEFT JOIN departments d ON e.dept_id = d.dept_id\nWHERE d.dept_id IS NULL;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 3 Charlie 55000 NULL"},{"location":"mysql/advance-for-etl/error-exception-handling/#q7-employees-not-assigned-to-a-valid-department","title":"Q7: Employees not assigned to a valid department","text":"<pre><code>SELECT * FROM employees WHERE dept_id NOT IN (SELECT dept_id FROM departments);\n</code></pre> <p>Output:</p> emp_id name salary dept_id 3 Charlie 55000 NULL"},{"location":"mysql/advance-for-etl/error-exception-handling/#5-combined-checks","title":"5. Combined checks","text":""},{"location":"mysql/advance-for-etl/error-exception-handling/#q8-detect-nulls-or-negative-salaries","title":"Q8: Detect NULLs or negative salaries","text":"<pre><code>SELECT * FROM employees WHERE salary IS NULL OR salary &lt; 0;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 2 Bob NULL 20 4 David -45000 10"},{"location":"mysql/advance-for-etl/error-exception-handling/#q9-employees-with-null-dept_id-or-invalid-department","title":"Q9: Employees with NULL dept_id or invalid department","text":"<pre><code>SELECT * FROM employees e\nWHERE dept_id IS NULL OR dept_id NOT IN (SELECT dept_id FROM departments);\n</code></pre> <p>Output:</p> emp_id name salary dept_id 3 Charlie 55000 NULL"},{"location":"mysql/advance-for-etl/error-exception-handling/#q10-detect-all-data-issues","title":"Q10: Detect all data issues","text":"<pre><code>SELECT * FROM employees e\nLEFT JOIN departments d ON e.dept_id = d.dept_id\nWHERE salary IS NULL OR salary &lt; 0 OR d.dept_id IS NULL;\n</code></pre> <p>Output:</p> emp_id name salary dept_id 2 Bob NULL 20 3 Charlie 55000 NULL 4 David -45000 10"},{"location":"mysql/advance-for-etl/error-exception-handling/#explanation","title":"Explanation:","text":"<ol> <li>NULL checks: Detect missing values.</li> <li>Negative or invalid values: Ensure business rules for numeric fields.</li> <li>Orphan records: Detect foreign key violations (departments missing).</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Ensures data quality and integrity before loading into target.</li> <li>Detects anomalies like missing keys, invalid values, or broken relationships.</li> <li>Helps prevent downstream errors in analytics or reporting.</li> </ul>"},{"location":"mysql/advance-for-etl/joins/","title":"SQL Practice: Advanced / Complex Joins for ETL Testing","text":"<p>This file contains 10 SQL practice problems covering:</p> <ul> <li>Cross Join (Cartesian product)</li> <li>Self-join with multiple conditions</li> <li>Join with subqueries</li> <li>Join multiple tables (3\u20134 tables)</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/joins/#1-cross-join","title":"1. CROSS JOIN","text":""},{"location":"mysql/advance-for-etl/joins/#q1-generate-all-combinations-of-employees-and-projects","title":"Q1: Generate all combinations of employees and projects","text":"<p>Input Tables:</p> <p>employees</p> emp_id name 1 Alice 2 Bob <p>projects</p> project_id project_name 101 Alpha 102 Beta <p>Query:</p> <pre><code>SELECT e.name, p.project_name\nFROM employees e\nCROSS JOIN projects p;\n</code></pre> <p>Explanation:</p> <ul> <li><code>CROSS JOIN</code> generates all possible combinations between two tables.</li> <li>Useful in ETL testing when validating assignment of employees to all possible project slots.</li> </ul> <p>Output:</p> name project_name Alice Alpha Alice Beta Bob Alpha Bob Beta"},{"location":"mysql/advance-for-etl/joins/#2-self-join-single-condition","title":"2. SELF JOIN (single condition)","text":""},{"location":"mysql/advance-for-etl/joins/#q2-find-employees-with-the-same-department","title":"Q2: Find employees with the same department","text":"<p>Input Table: employees</p> emp_id name dept_id 1 Alice 10 2 Bob 10 3 Charlie 20 4 David 10 <p>Query:</p> <pre><code>SELECT e1.name AS emp1, e2.name AS emp2, e1.dept_id\nFROM employees e1\nJOIN employees e2\n  ON e1.dept_id = e2.dept_id\n  AND e1.emp_id &lt; e2.emp_id;\n</code></pre> <p>Explanation:</p> <ul> <li>Self-join compares a table with itself.</li> <li><code>e1.emp_id &lt; e2.emp_id</code> avoids duplicate pairs and self-pairing.</li> <li>ETL use case: Validate peer relationships in the same group.</li> </ul> <p>Output:</p> emp1 emp2 dept_id Alice Bob 10 Alice David 10 Bob David 10"},{"location":"mysql/advance-for-etl/joins/#3-self-join-multiple-conditions","title":"3. SELF JOIN (multiple conditions)","text":""},{"location":"mysql/advance-for-etl/joins/#q3-employees-reporting-to-same-manager-and-in-same-department","title":"Q3: Employees reporting to same manager and in same department","text":"<p>Input Table: employees</p> emp_id name dept_id manager_id 1 Alice 10 100 2 Bob 10 100 3 Charlie 20 200 4 David 10 100 <p>Query:</p> <pre><code>SELECT e1.name AS emp1, e2.name AS emp2, e1.dept_id, e1.manager_id\nFROM employees e1\nJOIN employees e2\n  ON e1.dept_id = e2.dept_id\n  AND e1.manager_id = e2.manager_id\n  AND e1.emp_id &lt; e2.emp_id;\n</code></pre> <p>Output:</p> emp1 emp2 dept_id manager_id Alice Bob 10 100 Alice David 10 100 Bob David 10 100"},{"location":"mysql/advance-for-etl/joins/#4-join-with-subquery","title":"4. JOIN WITH SUBQUERY","text":""},{"location":"mysql/advance-for-etl/joins/#q4-select-employees-working-on-highest-salary-projects","title":"Q4: Select employees working on highest salary projects","text":"<p>Input Tables:</p> <p>employees</p> emp_id name project_id 1 Alice 101 2 Bob 102 3 Charlie 101 <p>projects</p> project_id project_name budget 101 Alpha 5000 102 Beta 10000 <p>Query:</p> <pre><code>SELECT e.name, p.project_name, p.budget\nFROM employees e\nJOIN projects p\n  ON e.project_id = p.project_id\nWHERE p.budget = (SELECT MAX(budget) FROM projects);\n</code></pre> <p>Explanation:</p> <ul> <li>Subquery <code>(SELECT MAX(budget) FROM projects)</code> returns the largest project budget.</li> <li>ETL use case: Validate transformation logic based on derived values from another table.</li> </ul> <p>Output:</p> name project_name budget Bob Beta 10000"},{"location":"mysql/advance-for-etl/joins/#5-join-multiple-tables-3-tables","title":"5. JOIN MULTIPLE TABLES (3 tables)","text":""},{"location":"mysql/advance-for-etl/joins/#q5-employee-assignments-with-department-and-project-names","title":"Q5: Employee assignments with department and project names","text":"<p>Input Tables:</p> <p>employees</p> emp_id name dept_id project_id 1 Alice 10 101 2 Bob 20 102 <p>departments</p> dept_id dept_name 10 HR 20 IT <p>projects</p> project_id project_name 101 Alpha 102 Beta <p>Query:</p> <pre><code>SELECT e.name, d.dept_name, p.project_name\nFROM employees e\nJOIN departments d ON e.dept_id = d.dept_id\nJOIN projects p ON e.project_id = p.project_id;\n</code></pre> <p>Explanation:</p> <ul> <li>Joining 3 tables to get full contextual information</li> <li>ETL use case: Validate final transformed fact table combining multiple sources</li> </ul> <p>Output:</p> name dept_name project_name Alice HR Alpha Bob IT Beta"},{"location":"mysql/advance-for-etl/joins/#6-join-multiple-tables-with-conditions","title":"6. JOIN MULTIPLE TABLES WITH CONDITIONS","text":""},{"location":"mysql/advance-for-etl/joins/#q6-employees-in-hr-department-working-on-budget-5000-projects","title":"Q6: Employees in HR department working on budget &gt; 5000 projects","text":"<p>Query:</p> <pre><code>SELECT e.name, d.dept_name, p.project_name, p.budget\nFROM employees e\nJOIN departments d ON e.dept_id = d.dept_id\nJOIN projects p ON e.project_id = p.project_id\nWHERE d.dept_name = 'HR' AND p.budget &gt; 5000;\n</code></pre> <p>Output:</p> name dept_name project_name budget Alice HR Alpha 5000"},{"location":"mysql/advance-for-etl/pivot_unpivot/","title":"SQL Practice: Pivot / Unpivot with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>PIVOT (convert rows to columns)</li> <li>UNPIVOT (convert columns to rows)</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/pivot_unpivot/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: sales_data</p> emp_id dept month sales_amount 101 IT Jan 5000 101 IT Feb 6000 102 HR Jan 3000 102 HR Feb 3500 103 IT Jan 4000 103 IT Feb 4500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#2-pivot-examples","title":"2. PIVOT Examples","text":""},{"location":"mysql/advance-for-etl/pivot_unpivot/#q1-pivot-sales-per-employee-for-each-month","title":"Q1: Pivot sales per employee for each month","text":"<pre><code>SELECT emp_id, [Jan], [Feb]\nFROM (\n    SELECT emp_id, month, sales_amount\n    FROM sales_data\n) src\nPIVOT (\n    SUM(sales_amount) FOR month IN ([Jan], [Feb])\n) pvt;\n</code></pre> <p>Output:</p> emp_id Jan Feb 101 5000 6000 102 3000 3500 103 4000 4500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q2-pivot-sales-per-department-per-month","title":"Q2: Pivot sales per department per month","text":"<pre><code>SELECT dept, [Jan], [Feb]\nFROM (\n    SELECT dept, month, sales_amount\n    FROM sales_data\n) src\nPIVOT (\n    SUM(sales_amount) FOR month IN ([Jan], [Feb])\n) pvt;\n</code></pre> <p>Output:</p> dept Jan Feb IT 9000 10500 HR 3000 3500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q3-pivot-using-case-for-months-alternative","title":"Q3: Pivot using CASE for months (alternative)","text":"<pre><code>SELECT emp_id,\n       SUM(CASE WHEN month='Jan' THEN sales_amount ELSE 0 END) AS Jan,\n       SUM(CASE WHEN month='Feb' THEN sales_amount ELSE 0 END) AS Feb\nFROM sales_data\nGROUP BY emp_id;\n</code></pre> <p>Output:</p> emp_id Jan Feb 101 5000 6000 102 3000 3500 103 4000 4500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q4-pivot-sales-for-it-department-only","title":"Q4: Pivot sales for IT department only","text":"<pre><code>SELECT emp_id, [Jan], [Feb]\nFROM (\n    SELECT emp_id, month, sales_amount\n    FROM sales_data\n    WHERE dept='IT'\n) src\nPIVOT (\n    SUM(sales_amount) FOR month IN ([Jan], [Feb])\n) pvt;\n</code></pre> <p>Output:</p> emp_id Jan Feb 101 5000 6000 103 4000 4500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q5-pivot-with-dynamic-aggregation-by-department-and-month","title":"Q5: Pivot with dynamic aggregation by department and month","text":"<pre><code>SELECT dept, [Jan], [Feb]\nFROM (\n    SELECT dept, month, sales_amount\n    FROM sales_data\n) src\nPIVOT (\n    SUM(sales_amount) FOR month IN ([Jan], [Feb])\n) pvt;\n</code></pre> <p>Output:</p> dept Jan Feb IT 9000 10500 HR 3000 3500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#3-unpivot-examples","title":"3. UNPIVOT Examples","text":""},{"location":"mysql/advance-for-etl/pivot_unpivot/#q6-unpivot-columns-jan-and-feb-into-rows","title":"Q6: Unpivot columns Jan and Feb into rows","text":"<pre><code>SELECT emp_id, month, sales_amount\nFROM (\n    SELECT emp_id, [Jan], [Feb]\n    FROM (\n        SELECT emp_id, month, sales_amount\n        FROM sales_data\n    ) src\n    PIVOT (\n        SUM(sales_amount) FOR month IN ([Jan], [Feb])\n    ) pvt\n) unpvt\nUNPIVOT (\n    sales_amount FOR month IN ([Jan], [Feb])\n) AS unp;\n</code></pre> <p>Output:</p> emp_id month sales_amount 101 Jan 5000 101 Feb 6000 102 Jan 3000 102 Feb 3500 103 Jan 4000 103 Feb 4500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q7-unpivot-department-sales-per-month","title":"Q7: Unpivot department sales per month","text":"<pre><code>SELECT month, dept, sales_amount\nFROM (\n    SELECT dept, [Jan], [Feb]\n    FROM (\n        SELECT dept, month, sales_amount FROM sales_data\n    ) src\n    PIVOT (SUM(sales_amount) FOR month IN ([Jan], [Feb])) pvt\n) unpvt\nUNPIVOT (\n    sales_amount FOR month IN ([Jan], [Feb])\n) AS u;\n</code></pre> <p>Output:</p> month dept sales_amount Jan IT 9000 Feb IT 10500 Jan HR 3000 Feb HR 3500"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q8-unpivot-for-a-single-employee","title":"Q8: Unpivot for a single employee","text":"<pre><code>SELECT emp_id, month, sales_amount\nFROM (\n    SELECT emp_id, [Jan], [Feb]\n    FROM (\n        SELECT emp_id, month, sales_amount FROM sales_data\n        WHERE emp_id=101\n    ) src\n    PIVOT (SUM(sales_amount) FOR month IN ([Jan], [Feb])) pvt\n) unpvt\nUNPIVOT (\n    sales_amount FOR month IN ([Jan], [Feb])\n) AS u;\n</code></pre> <p>Output:</p> emp_id month sales_amount 101 Jan 5000 101 Feb 6000"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q9-unpivot-to-calculate-monthly-totals","title":"Q9: Unpivot to calculate monthly totals","text":"<pre><code>SELECT month, SUM(sales_amount) AS total_sales\nFROM (\n    SELECT emp_id, [Jan], [Feb]\n    FROM (\n        SELECT emp_id, month, sales_amount FROM sales_data\n    ) src\n    PIVOT (SUM(sales_amount) FOR month IN ([Jan], [Feb])) pvt\n) unpvt\nUNPIVOT (\n    sales_amount FOR month IN ([Jan], [Feb])\n) AS u\nGROUP BY month;\n</code></pre> <p>Output:</p> month total_sales Jan 12000 Feb 14000"},{"location":"mysql/advance-for-etl/pivot_unpivot/#q10-alternative-unpivot-using-union-all","title":"Q10: Alternative UNPIVOT using UNION ALL","text":"<pre><code>SELECT emp_id, 'Jan' AS month, [Jan] AS sales_amount FROM (\n    SELECT emp_id, month, sales_amount FROM sales_data\n) src\nPIVOT (SUM(sales_amount) FOR month IN ([Jan], [Feb])) pvt\nUNION ALL\nSELECT emp_id, 'Feb', [Feb] FROM (\n    SELECT emp_id, month, sales_amount FROM sales_data\n) src\nPIVOT (SUM(sales_amount) FOR month IN ([Jan], [Feb])) pvt;\n</code></pre> <p>Output: Same as previous unpivot examples.</p>"},{"location":"mysql/advance-for-etl/pivot_unpivot/#explanation","title":"Explanation:","text":"<ol> <li>PIVOT transforms rows into columns, useful to reshape data for reporting.</li> <li>UNPIVOT transforms columns into rows, useful for normalization or comparison.</li> <li>Both are helpful in ETL testing to validate reshaped warehouse data matches source data.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Validate that monthly sales totals pivot correctly per employee or department.</li> <li>Compare reshaped data with raw transactional data.</li> <li>Transform wide tables to long tables or vice versa for reporting or downstream processing.</li> </ul>"},{"location":"mysql/advance-for-etl/store-procedure/","title":"SQL Practice: Stored Procedures / Functions with Explanations","text":"<p>This file contains 10 SQL practice problems covering:</p> <ul> <li>Stored Procedures</li> <li>User Defined Functions (UDFs)</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query / Procedure / Function</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/store-procedure/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: employees</p> emp_id name salary dept 1 Alice 48000 HR 2 Bob 60000 IT 3 Charlie 55000 HR 4 David 45000 IT 5 Eva 70000 Sales"},{"location":"mysql/advance-for-etl/store-procedure/#2-stored-procedure-examples","title":"2. Stored Procedure Examples","text":""},{"location":"mysql/advance-for-etl/store-procedure/#q1-create-procedure-to-give-10-bonus-to-employee","title":"Q1: Create procedure to give 10% bonus to employee","text":"<pre><code>CREATE PROCEDURE give_bonus(IN emp INT, OUT bonus_amt DECIMAL(10,2))\nBEGIN\n    SELECT salary*0.10 INTO bonus_amt FROM employees WHERE emp_id=emp;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL give_bonus(2, @b);\nSELECT @b;\n</code></pre> <p>Output:</p> @b 6000"},{"location":"mysql/advance-for-etl/store-procedure/#q2-procedure-to-increase-salary-by-for-a-department","title":"Q2: Procedure to increase salary by % for a department","text":"<pre><code>CREATE PROCEDURE increase_salary(IN dept_name VARCHAR(20), IN increment DECIMAL(5,2))\nBEGIN\n    UPDATE employees\n    SET salary = salary + (salary * increment/100)\n    WHERE dept = dept_name;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL increase_salary('HR', 5);\nSELECT * FROM employees WHERE dept='HR';\n</code></pre> <p>Output:</p> emp_id name salary dept 1 Alice 50400 HR 3 Charlie 57750 HR"},{"location":"mysql/advance-for-etl/store-procedure/#q3-procedure-to-get-total-salary-of-department","title":"Q3: Procedure to get total salary of department","text":"<pre><code>CREATE PROCEDURE dept_total_salary(IN dept_name VARCHAR(20), OUT total_salary DECIMAL(10,2))\nBEGIN\n    SELECT SUM(salary) INTO total_salary FROM employees WHERE dept=dept_name;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL dept_total_salary('IT', @ts);\nSELECT @ts;\n</code></pre> <p>Output:</p> @ts 105000"},{"location":"mysql/advance-for-etl/store-procedure/#q4-procedure-to-get-employee-details-by-id","title":"Q4: Procedure to get employee details by ID","text":"<pre><code>CREATE PROCEDURE emp_details(IN emp INT)\nBEGIN\n    SELECT * FROM employees WHERE emp_id = emp;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL emp_details(5);\n</code></pre> <p>Output:</p> emp_id name salary dept 5 Eva 70000 Sales"},{"location":"mysql/advance-for-etl/store-procedure/#3-user-defined-function-examples","title":"3. User Defined Function Examples","text":""},{"location":"mysql/advance-for-etl/store-procedure/#q5-function-to-calculate-bonus","title":"Q5: Function to calculate bonus","text":"<pre><code>CREATE FUNCTION calc_bonus(sal DECIMAL(10,2)) RETURNS DECIMAL(10,2)\nBEGIN\n    RETURN sal * 0.10;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>SELECT name, calc_bonus(salary) AS bonus FROM employees;\n</code></pre> <p>Output:</p> name bonus Alice 5040 Bob 6000 Charlie 5775 David 4500 Eva 7000"},{"location":"mysql/advance-for-etl/store-procedure/#q6-function-to-check-if-salary-threshold","title":"Q6: Function to check if salary &gt; threshold","text":"<pre><code>CREATE FUNCTION is_high_salary(sal DECIMAL(10,2)) RETURNS VARCHAR(3)\nBEGIN\n    RETURN IF(sal&gt;60000,'YES','NO');\nEND;\n</code></pre> <p>Usage:</p> <pre><code>SELECT name, is_high_salary(salary) AS high_sal FROM employees;\n</code></pre> <p>Output:</p> name high_sal Alice NO Bob NO Charlie NO David NO Eva YES"},{"location":"mysql/advance-for-etl/store-procedure/#q7-procedure-to-insert-new-employee","title":"Q7: Procedure to insert new employee","text":"<pre><code>CREATE PROCEDURE add_employee(IN ename VARCHAR(50), IN esal DECIMAL(10,2), IN edept VARCHAR(20))\nBEGIN\n    INSERT INTO employees(name,salary,dept) VALUES(ename,esal,edept);\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL add_employee('Frank', 48000, 'IT');\nSELECT * FROM employees WHERE name='Frank';\n</code></pre> <p>Output:</p> emp_id name salary dept 6 Frank 48000 IT"},{"location":"mysql/advance-for-etl/store-procedure/#q8-function-to-convert-salary-to-string-with-currency","title":"Q8: Function to convert salary to string with currency","text":"<pre><code>CREATE FUNCTION salary_str(sal DECIMAL(10,2)) RETURNS VARCHAR(20)\nBEGIN\n    RETURN CONCAT('$', CAST(sal AS CHAR));\nEND;\n</code></pre> <p>Usage:</p> <pre><code>SELECT name, salary_str(salary) AS salary_display FROM employees;\n</code></pre> <p>Output:</p> name salary_display Alice \\$50400 Bob \\$60000 Charlie \\$57750 David \\$45000 Eva \\$70000"},{"location":"mysql/advance-for-etl/store-procedure/#q9-procedure-to-delete-employee-by-id","title":"Q9: Procedure to delete employee by ID","text":"<pre><code>CREATE PROCEDURE delete_employee(IN emp INT)\nBEGIN\n    DELETE FROM employees WHERE emp_id = emp;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>CALL delete_employee(6);\nSELECT * FROM employees WHERE emp_id=6;\n</code></pre> <p>Output: | -- No rows -- |</p>"},{"location":"mysql/advance-for-etl/store-procedure/#q10-function-to-calculate-tax-at-10","title":"Q10: Function to calculate tax at 10%","text":"<pre><code>CREATE FUNCTION calc_tax(sal DECIMAL(10,2)) RETURNS DECIMAL(10,2)\nBEGIN\n    RETURN sal * 0.10;\nEND;\n</code></pre> <p>Usage:</p> <pre><code>SELECT name, calc_tax(salary) AS tax FROM employees;\n</code></pre> <p>Output:</p> name tax Alice 5040 Bob 6000 Charlie 5775 David 4500 Eva 7000"},{"location":"mysql/advance-for-etl/store-procedure/#explanation","title":"Explanation:","text":"<ol> <li>Stored Procedures: Encapsulate SQL logic; can take input/output parameters.</li> <li>Functions: Return a value; can be used inside SELECT statements.</li> <li>Useful for ETL testing when transformations are done via procedural logic.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Validate bonus calculations, salary increments, or other business rules.</li> <li>Check the correctness of procedural logic applied on data.</li> <li>Ensure outputs match expected results before moving to production.</li> </ul>"},{"location":"mysql/advance-for-etl/temp-table/","title":"SQL Practice: Temporary Tables / CTEs (Common Table Expressions) with Explanations","text":"<p>This file contains 15 SQL practice problems covering:</p> <ul> <li>WITH clause (CTEs)</li> <li>Recursive CTEs</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/temp-table/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: employees</p> emp_id name dept salary manager_id 1 Alice HR 48000 NULL 2 Bob IT 60000 1 3 Charlie HR 55000 1 4 David IT 45000 2 5 Eva Sales 70000 1"},{"location":"mysql/advance-for-etl/temp-table/#2-simple-ctes-with-clause","title":"2. Simple CTEs (WITH clause)","text":""},{"location":"mysql/advance-for-etl/temp-table/#q1-list-all-employees-with-salary-above-50000","title":"Q1: List all employees with salary above 50000","text":"<pre><code>WITH high_salary AS (\n    SELECT emp_id, name, salary\n    FROM employees\n    WHERE salary &gt; 50000\n)\nSELECT * FROM high_salary;\n</code></pre> <p>Output:</p> emp_id name salary 2 Bob 60000 3 Charlie 55000 5 Eva 70000"},{"location":"mysql/advance-for-etl/temp-table/#q2-calculate-average-salary-per-department-using-cte","title":"Q2: Calculate average salary per department using CTE","text":"<pre><code>WITH dept_avg AS (\n    SELECT dept, AVG(salary) AS avg_salary\n    FROM employees\n    GROUP BY dept\n)\nSELECT e.name, e.dept, e.salary, d.avg_salary\nFROM employees e\nJOIN dept_avg d ON e.dept = d.dept;\n</code></pre> <p>Output:</p> name dept salary avg_salary Alice HR 48000 51500 Charlie HR 55000 51500 Bob IT 60000 52500 David IT 45000 52500 Eva Sales 70000 70000"},{"location":"mysql/advance-for-etl/temp-table/#q3-employees-earning-more-than-department-average","title":"Q3: Employees earning more than department average","text":"<pre><code>WITH dept_avg AS (\n    SELECT dept, AVG(salary) AS avg_salary\n    FROM employees\n    GROUP BY dept\n)\nSELECT e.name, e.dept, e.salary\nFROM employees e\nJOIN dept_avg d ON e.dept = d.dept\nWHERE e.salary &gt; d.avg_salary;\n</code></pre> <p>Output:</p> name dept salary Charlie HR 55000 Bob IT 60000"},{"location":"mysql/advance-for-etl/temp-table/#q4-using-multiple-ctes","title":"Q4: Using multiple CTEs","text":"<pre><code>WITH dept_avg AS (\n    SELECT dept, AVG(salary) AS avg_salary\n    FROM employees\n    GROUP BY dept\n),\nhigh_salary AS (\n    SELECT * FROM employees WHERE salary &gt; 50000\n)\nSELECT h.name, h.salary, d.avg_salary\nFROM high_salary h\nJOIN dept_avg d ON h.dept = d.dept;\n</code></pre> <p>Output:</p> name salary avg_salary Bob 60000 52500 Charlie 55000 51500 Eva 70000 70000"},{"location":"mysql/advance-for-etl/temp-table/#q5-using-cte-for-filtering-employees-with-manager","title":"Q5: Using CTE for filtering employees with manager","text":"<pre><code>WITH has_manager AS (\n    SELECT emp_id, name, manager_id\n    FROM employees\n    WHERE manager_id IS NOT NULL\n)\nSELECT * FROM has_manager;\n</code></pre> <p>Output:</p> emp_id name manager_id 2 Bob 1 3 Charlie 1 4 David 2 5 Eva 1"},{"location":"mysql/advance-for-etl/temp-table/#3-recursive-ctes","title":"3. Recursive CTEs","text":""},{"location":"mysql/advance-for-etl/temp-table/#q6-hierarchy-list-employees-under-manager-alice","title":"Q6: Hierarchy - List employees under manager Alice","text":"<pre><code>WITH RECURSIVE emp_hierarchy AS (\n    SELECT emp_id, name, manager_id\n    FROM employees\n    WHERE manager_id IS NULL  -- top-level manager\n    UNION ALL\n    SELECT e.emp_id, e.name, e.manager_id\n    FROM employees e\n    JOIN emp_hierarchy h ON e.manager_id = h.emp_id\n)\nSELECT * FROM emp_hierarchy;\n</code></pre> <p>Output:</p> emp_id name manager_id 1 Alice NULL 2 Bob 1 3 Charlie 1 5 Eva 1 4 David 2"},{"location":"mysql/advance-for-etl/temp-table/#q7-calculate-cumulative-salary-under-each-manager","title":"Q7: Calculate cumulative salary under each manager","text":"<pre><code>WITH RECURSIVE emp_hierarchy AS (\n    SELECT emp_id, name, salary, manager_id\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.emp_id, e.name, e.salary, e.manager_id\n    FROM employees e\n    JOIN emp_hierarchy h ON e.manager_id = h.emp_id\n)\nSELECT manager_id, SUM(salary) AS total_salary\nFROM emp_hierarchy\nGROUP BY manager_id;\n</code></pre> <p>Output:</p> manager_id total_salary NULL 48000 1 190000 2 45000"},{"location":"mysql/advance-for-etl/temp-table/#q8-depth-of-hierarchy-per-employee","title":"Q8: Depth of hierarchy per employee","text":"<pre><code>WITH RECURSIVE emp_hierarchy AS (\n    SELECT emp_id, name, manager_id, 1 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.emp_id, e.name, e.manager_id, h.level + 1\n    FROM employees e\n    JOIN emp_hierarchy h ON e.manager_id = h.emp_id\n)\nSELECT * FROM emp_hierarchy;\n</code></pre> <p>Output:</p> emp_id name manager_id level 1 Alice NULL 1 2 Bob 1 2 3 Charlie 1 2 5 Eva 1 2 4 David 2 3"},{"location":"mysql/advance-for-etl/temp-table/#q9-employees-at-level-2-or-deeper","title":"Q9: Employees at level 2 or deeper","text":"<pre><code>WITH RECURSIVE emp_hierarchy AS (\n    SELECT emp_id, name, manager_id, 1 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.emp_id, e.name, e.manager_id, h.level + 1\n    FROM employees e\n    JOIN emp_hierarchy h ON e.manager_id = h.emp_id\n)\nSELECT * FROM emp_hierarchy\nWHERE level &gt;= 2;\n</code></pre> <p>Output:</p> emp_id name manager_id level 2 Bob 1 2 3 Charlie 1 2 5 Eva 1 2 4 David 2 3"},{"location":"mysql/advance-for-etl/temp-table/#q10-total-salary-per-hierarchy-level","title":"Q10: Total salary per hierarchy level","text":"<pre><code>WITH RECURSIVE emp_hierarchy AS (\n    SELECT emp_id, name, salary, manager_id, 1 AS level\n    FROM employees\n    WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.emp_id, e.name, e.salary, e.manager_id, h.level + 1\n    FROM employees e\n    JOIN emp_hierarchy h ON e.manager_id = h.emp_id\n)\nSELECT level, SUM(salary) AS total_salary\nFROM emp_hierarchy\nGROUP BY level;\n</code></pre> <p>Output:</p> level total_salary 1 48000 2 165000 3 45000"},{"location":"mysql/advance-for-etl/temp-table/#explanation","title":"Explanation:","text":"<ol> <li>WITH / CTE allows creating a temporary result set for easier querying.</li> <li>Recursive CTE iterates over hierarchy, useful for tree structures.</li> <li>Break complex transformations into smaller queries to validate each step.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Validate intermediate transformations using CTEs.</li> <li>Build hierarchical views for aggregation or validation.</li> <li>Simplify complex queries into readable step</li> </ul>"},{"location":"mysql/advance-for-etl/views/","title":"SQL Practice: Performance / Index Considerations for ETL Testing","text":"<p>This file contains 5 SQL practice problems covering:</p> <ul> <li>Using EXPLAIN PLAN to understand query execution</li> <li>Identify heavy queries</li> <li>Index usage</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query / Commands</li> <li>Explanation</li> <li>Output / Expected Result</li> </ul>"},{"location":"mysql/advance-for-etl/views/#1-explain-plan-for-simple-select","title":"1. EXPLAIN PLAN for simple SELECT","text":""},{"location":"mysql/advance-for-etl/views/#q1-analyze-query-execution-for-employee-selection","title":"Q1: Analyze query execution for employee selection","text":"<p>Input Table: employees</p> emp_id name dept_id salary 1 Alice 10 50000 2 Bob 20 60000 3 Charlie 10 55000 <p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT * FROM employees WHERE dept_id = 10;\n</code></pre> <p>Explanation:</p> <ul> <li><code>EXPLAIN PLAN</code> shows how the database executes a query.</li> <li>Helps identify if indexes are being used.</li> <li>ETL use case: Ensure queries on large staging tables are optimized.</li> </ul> <p>Output / Result:</p> <ul> <li>Shows full table scan or index usage depending on table structure.</li> </ul>"},{"location":"mysql/advance-for-etl/views/#2-create-index-and-test-performance","title":"2. Create Index and Test Performance","text":""},{"location":"mysql/advance-for-etl/views/#q2-add-index-on-dept_id-to-improve-query","title":"Q2: Add index on dept_id to improve query","text":"<p>Query:</p> <pre><code>CREATE INDEX idx_dept_id ON employees(dept_id);\nSELECT * FROM employees WHERE dept_id = 10;\n</code></pre> <p>Explanation:</p> <ul> <li>Index improves performance on WHERE filters.</li> <li>ETL use case: Optimized queries in large source/target tables.</li> </ul> <p>Output:</p> <ul> <li>Faster execution compared to full table scan.</li> </ul>"},{"location":"mysql/advance-for-etl/views/#3-identify-heavy-query-using-explain-plan","title":"3. Identify Heavy Query Using EXPLAIN PLAN","text":""},{"location":"mysql/advance-for-etl/views/#q3-join-query-on-large-tables","title":"Q3: Join query on large tables","text":"<p>Input Tables:</p> <ul> <li>employees (1M rows)</li> <li>departments (100 rows)</li> </ul> <p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT e.name, d.dept_name\nFROM employees e\nJOIN departments d ON e.dept_id = d.dept_id;\n</code></pre> <p>Explanation:</p> <ul> <li>EXPLAIN PLAN shows estimated rows, join type, cost.</li> <li>Helps detect if query is heavy before running in ETL.</li> </ul> <p>Output / Result:</p> <ul> <li>Details of join order, estimated cost, potential need for indexes.</li> </ul>"},{"location":"mysql/advance-for-etl/views/#4-detect-queries-without-indexes","title":"4. Detect Queries Without Indexes","text":""},{"location":"mysql/advance-for-etl/views/#q4-check-if-a-query-uses-index","title":"Q4: Check if a query uses index","text":"<p>Query:</p> <pre><code>SELECT * FROM employees WHERE salary &gt; 50000;\n</code></pre> <p>Explanation:</p> <ul> <li>If no index on salary, query may perform full table scan.</li> <li>ETL use case: Avoid heavy queries in large data loads.</li> </ul> <p>Output / Result:</p> <ul> <li>Execution plan indicates full table scan.</li> <li>Recommendation: Create index if this query is frequent.</li> </ul>"},{"location":"mysql/advance-for-etl/views/#5-identify-and-optimize-heavy-queries","title":"5. Identify and Optimize Heavy Queries","text":""},{"location":"mysql/advance-for-etl/views/#q5-aggregation-on-large-table","title":"Q5: Aggregation on large table","text":"<p>Query:</p> <pre><code>EXPLAIN PLAN FOR\nSELECT dept_id, COUNT(*) AS emp_count, AVG(salary) AS avg_salary\nFROM employees\nGROUP BY dept_id;\n</code></pre> <p>Explanation:</p> <ul> <li>EXPLAIN PLAN shows aggregation cost.</li> <li>Using indexes or partitioning may improve performance.</li> <li>ETL use case: Validate that aggregate queries are efficient for staging to target comparisons.</li> </ul> <p>Output / Result:</p> <ul> <li>Execution plan with row estimates, table access type, and cost.</li> <li>Helps ETL testers identify bottlen</li> </ul>"},{"location":"mysql/advance-for-etl/windows_analytics/","title":"SQL Practice: Window / Analytic Functions with Explanations","text":"<p>This file contains 20 SQL practice problems covering:</p> <ul> <li>ROW_NUMBER(), RANK(), DENSE_RANK()</li> <li>NTILE(), LAG(), LEAD()</li> <li>SUM()/AVG() OVER (PARTITION BY \u2026)</li> </ul> <p>Each question includes:</p> <ul> <li>Input Table(s)</li> <li>Question</li> <li>SQL Query</li> <li>Explanation</li> <li>Output Table</li> </ul>"},{"location":"mysql/advance-for-etl/windows_analytics/#1-input-table-example","title":"1. Input Table Example","text":"<p>Table: sales</p> sale_id emp_id dept sale_amount sale_date 1 101 IT 5000 2025-09-01 2 102 HR 3000 2025-09-01 3 101 IT 7000 2025-09-02 4 103 IT 4000 2025-09-02 5 102 HR 3500 2025-09-03 6 101 IT 6000 2025-09-03"},{"location":"mysql/advance-for-etl/windows_analytics/#2-row_number","title":"2. ROW_NUMBER()","text":""},{"location":"mysql/advance-for-etl/windows_analytics/#q1-assign-row-number-per-employee-based-on-sale_date","title":"Q1: Assign row number per employee based on sale_date","text":"<pre><code>SELECT sale_id, emp_id, sale_date,\n       ROW_NUMBER() OVER (PARTITION BY emp_id ORDER BY sale_date) AS row_num\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id sale_date row_num 1 101 2025-09-01 1 3 101 2025-09-02 2 6 101 2025-09-03 3 2 102 2025-09-01 1 5 102 2025-09-03 2 4 103 2025-09-02 1"},{"location":"mysql/advance-for-etl/windows_analytics/#3-rank-and-dense_rank","title":"3. RANK() and DENSE_RANK()","text":""},{"location":"mysql/advance-for-etl/windows_analytics/#q2-rank-sales-per-department","title":"Q2: Rank sales per department","text":"<pre><code>SELECT sale_id, emp_id, dept, sale_amount,\n       RANK() OVER (PARTITION BY dept ORDER BY sale_amount DESC) AS dept_rank,\n       DENSE_RANK() OVER (PARTITION BY dept ORDER BY sale_amount DESC) AS dense_rank\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id dept sale_amount dept_rank dense_rank 3 101 IT 7000 1 1 1 101 IT 5000 2 2 4 103 IT 4000 3 3 5 102 HR 3500 1 1 2 102 HR 3000 2 2"},{"location":"mysql/advance-for-etl/windows_analytics/#4-ntile","title":"4. NTILE()","text":""},{"location":"mysql/advance-for-etl/windows_analytics/#q3-divide-it-department-sales-into-2-buckets","title":"Q3: Divide IT department sales into 2 buckets","text":"<pre><code>SELECT sale_id, emp_id, dept, sale_amount,\n       NTILE(2) OVER (PARTITION BY dept ORDER BY sale_amount DESC) AS bucket\nFROM sales\nWHERE dept='IT';\n</code></pre> <p>Output:</p> sale_id emp_id dept sale_amount bucket 3 101 IT 7000 1 1 101 IT 5000 1 4 103 IT 4000 2 6 101 IT 6000 1"},{"location":"mysql/advance-for-etl/windows_analytics/#5-lag-and-lead","title":"5. LAG() and LEAD()","text":""},{"location":"mysql/advance-for-etl/windows_analytics/#q4-previous-sale-amount-per-employee","title":"Q4: Previous sale amount per employee","text":"<pre><code>SELECT sale_id, emp_id, sale_amount,\n       LAG(sale_amount,1) OVER (PARTITION BY emp_id ORDER BY sale_date) AS prev_sale\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id sale_amount prev_sale 1 101 5000 NULL 3 101 7000 5000 6 101 6000 7000 2 102 3000 NULL 5 102 3500 3000 4 103 4000 NULL"},{"location":"mysql/advance-for-etl/windows_analytics/#q5-next-sale-amount-per-employee","title":"Q5: Next sale amount per employee","text":"<pre><code>SELECT sale_id, emp_id, sale_amount,\n       LEAD(sale_amount,1) OVER (PARTITION BY emp_id ORDER BY sale_date) AS next_sale\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id sale_amount next_sale 1 101 5000 7000 3 101 7000 6000 6 101 6000 NULL 2 102 3000 3500 5 102 3500 NULL 4 103 4000 NULL"},{"location":"mysql/advance-for-etl/windows_analytics/#6-sumavg-overpartition-by","title":"6. SUM()/AVG() OVER(PARTITION BY \u2026)","text":""},{"location":"mysql/advance-for-etl/windows_analytics/#q6-running-total-per-employee","title":"Q6: Running total per employee","text":"<pre><code>SELECT sale_id, emp_id, sale_amount,\n       SUM(sale_amount) OVER (PARTITION BY emp_id ORDER BY sale_date) AS running_total\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id sale_amount running_total 1 101 5000 5000 3 101 7000 12000 6 101 6000 18000 2 102 3000 3000 5 102 3500 6500 4 103 4000 4000"},{"location":"mysql/advance-for-etl/windows_analytics/#q7-average-sale-per-department","title":"Q7: Average sale per department","text":"<pre><code>SELECT sale_id, emp_id, dept, sale_amount,\n       AVG(sale_amount) OVER (PARTITION BY dept) AS avg_dept_sale\nFROM sales;\n</code></pre> <p>Output:</p> sale_id emp_id dept sale_amount avg_dept_sale 1 101 IT 5000 5666.67 3 101 IT 7000 5666.67 4 103 IT 4000 5666.67 6 101 IT 6000 5666.67 2 102 HR 3000 3250 5 102 HR 3500 3250"},{"location":"mysql/advance-for-etl/windows_analytics/#explanation","title":"Explanation:","text":"<ol> <li>ROW_NUMBER(): Assigns unique numbers to rows within a partition.</li> <li>RANK()/DENSE_RANK(): Rank rows within a partition, with/without gaps.</li> <li>NTILE(): Divides rows into specified number of buckets.</li> <li>LAG()/LEAD(): Access previous/next row values.</li> <li>SUM()/AVG() OVER(PARTITION BY \u2026): Cumulative or group-based aggregates without collapsing rows.</li> </ol> <p>Use case in ETL Testing:</p> <ul> <li>Detect duplicate records using <code>ROW_NUMBER()</code>.</li> <li>Validate ranking and top-N using <code>RANK()/DENSE_RANK()</code>.</li> <li>Check cumulative aggregates for correctness.</li> <li>Compare current row with previous/next row for trends or anomalies.</li> </ul>"},{"location":"playwright-Java/alerts-promt/","title":"9. Handling Dialogs, Alerts, and Prompts in Playwright (Java)","text":"<p>Web applications often use dialogs like Alerts, Confirms, and Prompts for user interaction. Playwright provides APIs to handle these dialogs by listening to the <code>dialog</code> event.</p>"},{"location":"playwright-Java/alerts-promt/#types-of-javascript-dialogs","title":"\u2705 Types of JavaScript Dialogs","text":"<ol> <li>Alert</li> <li>Simple message with OK button.</li> <li> <p>Example: <code>alert(\"This is an alert!\");</code></p> </li> <li> <p>Confirm</p> </li> <li>Message with OK and Cancel buttons.</li> <li> <p>Example: <code>confirm(\"Are you sure?\");</code></p> </li> <li> <p>Prompt</p> </li> <li>Message with input field + OK/Cancel buttons.</li> <li> <p>Example: <code>prompt(\"Enter your name:\");</code></p> </li> <li> <p>BeforeUnload</p> </li> <li>Triggered when a user tries to close or reload a page.</li> <li>Example: <code>window.onbeforeunload = () =&gt; true;</code></li> </ol>"},{"location":"playwright-Java/alerts-promt/#playwright-dialog-api","title":"\ud83d\udccc Playwright Dialog API","text":"<ul> <li>Event Listener for Dialog</li> </ul> <pre><code>page.onDialog(dialog -&gt; {\n    System.out.println(\"Dialog message: \" + dialog.message());\n    dialog.accept(); // or dialog.dismiss()\n});\n</code></pre> <ul> <li>Dialog Methods</li> <li><code>dialog.message()</code> \u2192 Get text of the dialog.</li> <li><code>dialog.type()</code> \u2192 Returns type (<code>alert</code>, <code>confirm</code>, <code>prompt</code>, <code>beforeunload</code>).</li> <li><code>dialog.accept([promptText])</code> \u2192 Accept the dialog (for prompt, send text).</li> <li><code>dialog.dismiss()</code> \u2192 Dismiss the dialog (Cancel).</li> </ul>"},{"location":"playwright-Java/alerts-promt/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class DialogsExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to sample page with dialogs\n            page.navigate(\"https://the-internet.herokuapp.com/javascript_alerts\");\n\n            // --- Handle Alert ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Alert Text: \" + dialog.message());\n                dialog.accept();\n            });\n            page.click(\"text=Click for JS Alert\");\n\n            // --- Handle Confirm (OK) ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Confirm Text: \" + dialog.message());\n                dialog.accept(); // choose OK\n            });\n            page.click(\"text=Click for JS Confirm\");\n\n            // --- Handle Confirm (Cancel) ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Confirm Text: \" + dialog.message());\n                dialog.dismiss(); // choose Cancel\n            });\n            page.click(\"text=Click for JS Confirm\");\n\n            // --- Handle Prompt with input ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Prompt Text: \" + dialog.message());\n                dialog.accept(\"PlaywrightUser\"); // enter text\n            });\n            page.click(\"text=Click for JS Prompt\");\n\n            // --- Handle BeforeUnload ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"BeforeUnload triggered\");\n                dialog.accept();\n            });\n            page.evaluate(\"() =&gt; window.onbeforeunload = () =&gt; true;\");\n            page.reload();\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/alerts-promt/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Use <code>page.onDialog()</code> for handling dialogs globally (persistent listener).</li> <li>Use <code>page.onceDialog()</code> for handling a single occurrence.</li> <li>For prompt dialogs, always provide text inside <code>dialog.accept(\"yourText\")</code>.</li> <li>Playwright will auto-wait until dialog is shown before executing callback.</li> <li>If dialogs are not handled \u2192 tests will fail (dialogs block execution).</li> </ul> <p>\u2705 With these APIs, you can handle Alerts, Confirms, Prompts, and BeforeUnload dialogs in Playwright tests using Java.</p>"},{"location":"playwright-Java/checkbox-radio-button/","title":"7. Checkbox &amp; Radio Button in Playwright (Java)","text":"<p>Checkboxes and Radio buttons are common form elements used for binary selections (true/false, yes/no, option A/B). Playwright provides a clean API to handle these elements.</p>"},{"location":"playwright-Java/checkbox-radio-button/#key-playwright-methods","title":"\u2705 Key Playwright Methods","text":""},{"location":"playwright-Java/checkbox-radio-button/#1-locatorcheck","title":"1. <code>locator.check()</code>","text":"<ul> <li>Ensures the checkbox or radio button is checked.</li> <li>If it\u2019s already checked \u2192 does nothing.</li> <li>If it\u2019s disabled or hidden \u2192 Playwright waits until it\u2019s actionable.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#2-locatoruncheck","title":"2. <code>locator.uncheck()</code>","text":"<ul> <li>Ensures the checkbox is unchecked.</li> <li>Applicable only to checkboxes (not radio buttons).</li> <li>If already unchecked \u2192 does nothing.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#3-locatorischecked","title":"3. <code>locator.isChecked()</code>","text":"<ul> <li>Returns a boolean (<code>true/false</code>) if the checkbox or radio button is selected.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class CheckboxRadioExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to sample page\n            page.navigate(\"https://the-internet.herokuapp.com/checkboxes\");\n\n            // \u2705 Locate checkbox\n            Locator checkbox1 = page.locator(\"//form[@id='checkboxes']/input[1]\");\n\n            // --- Check a checkbox ---\n            checkbox1.check();\n            System.out.println(\"Checkbox 1 checked: \" + checkbox1.isChecked());\n\n            // --- Uncheck a checkbox ---\n            checkbox1.uncheck();\n            System.out.println(\"Checkbox 1 checked after uncheck: \" + checkbox1.isChecked());\n\n            // \u2705 Radio button example\n            page.navigate(\"https://demoqa.com/radio-button\");\n\n            Locator yesRadio = page.locator(\"input[id='yesRadio']\");\n\n            // --- Select radio button ---\n            yesRadio.check();\n            System.out.println(\"Yes Radio selected: \" + yesRadio.isChecked());\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/checkbox-radio-button/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Radio buttons: You can only select one option in a group.</li> <li>Checkboxes: Can select multiple options unless restricted by form logic.</li> <li>Use <code>.isChecked()</code> to verify the state before performing an action if needed.</li> <li>Playwright automatically waits for the element to be visible, enabled, and ready for action.</li> </ul> <p>\u2705 With these methods, you can reliably handle checkboxes and radio buttons in Playwright tests using Java.</p>"},{"location":"playwright-Java/dropdown_handling/","title":"Playwright -- Handling Dropdowns (Java)","text":""},{"location":"playwright-Java/dropdown_handling/#1-classic-select-dropdown","title":"1\ufe0f\u20e3 Classic <code>&lt;select&gt;</code> Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;select id=\"country\"&gt;\n  &lt;option value=\"IN\"&gt;India&lt;/option&gt;\n  &lt;option value=\"US\"&gt;USA&lt;/option&gt;\n  &lt;option value=\"UK\"&gt;UK&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-select-by-value","title":"a) Select by Value","text":"<pre><code>page.locator(\"#country\").selectOption(\"IN\");  \n// Select India by value\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-select-by-label-visible-text","title":"b) Select by Label (Visible Text)","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setLabel(\"USA\"));  \n// Select USA by visible text\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-select-by-index","title":"c) Select by Index","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setIndex(2));  \n// Select 3rd option (UK) \u2013 index starts from 0\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-select-multiple-values","title":"d) Select Multiple Values","text":"<pre><code>page.locator(\"#country\").selectOption(new String[]{\"IN\", \"US\"});  \n// Select India and USA (multi-select dropdowns only)\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#e-iterate-all-options-get-count","title":"e) Iterate All Options &amp; Get Count","text":"<pre><code>Locator options = page.locator(\"#country option\");\nint count = options.count();\nSystem.out.println(\"Total options in dropdown: \" + count);\n\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre> <ul> <li>Explanation:<ul> <li><code>count()</code> \u2192 total number of options.</li> <li><code>.nth(i).innerText()</code> \u2192 retrieves text of each option.</li> </ul> </li> </ul>"},{"location":"playwright-Java/dropdown_handling/#f-example-full-flow","title":"f) Example Full Flow","text":"<pre><code>// Select India by value\npage.locator(\"#country\").selectOption(\"IN\");\n\n// Select USA by label\npage.locator(\"#country\").selectOption(new SelectOption().setLabel(\"USA\"));\n\n// Select multiple (India &amp; UK)\npage.locator(\"#country\").selectOption(new String[]{\"IN\", \"UK\"});\n\n// Iterate and print all options\nLocator options = page.locator(\"#country option\");\nfor (int i = 0; i &lt; options.count(); i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#2-auto-suggestion-custom-dropdown","title":"2\ufe0f\u20e3 Auto-suggestion / Custom Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;input id=\"searchCity\" type=\"text\" placeholder=\"Enter city\" /&gt;\n&lt;ul id=\"cityList\"&gt;\n  &lt;li&gt;New York&lt;/li&gt;\n  &lt;li&gt;London&lt;/li&gt;\n  &lt;li&gt;Delhi&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-type-to-filter-suggestions","title":"a) Type to Filter Suggestions","text":"<pre><code>page.locator(\"#searchCity\").fill(\"Del\");\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-click-on-desired-option","title":"b) Click on Desired Option","text":"<pre><code>page.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-full-auto-suggestion-flow","title":"c) Full Auto-suggestion Flow","text":"<pre><code>// Type in search box\npage.locator(\"#searchCity\").fill(\"Del\");\n\n// Wait for suggestion and click\npage.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-iterate-all-auto-suggestion-options-get-count","title":"d) Iterate All Auto-suggestion Options &amp; Get Count","text":"<pre><code>Locator cities = page.locator(\"#cityList li\");\nint totalCities = cities.count();\nSystem.out.println(\"Total suggestions: \" + totalCities);\n\nfor (int i = 0; i &lt; totalCities; i++) {\n    System.out.println(cities.nth(i).innerText());\n}\n</code></pre> <ul> <li>Retrieves all suggestions and their total count.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#e-tips-for-auto-suggestion-dropdowns","title":"e) Tips for Auto-suggestion Dropdowns","text":"<ul> <li>Use <code>fill()</code> instead of <code>type()</code> if you want instant input.</li> <li>Use <code>.locator(...).filter(...).click()</code> to select the correct     option.</li> <li>Playwright handles auto-waiting automatically.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#summary","title":"\u2705 Summary","text":"<ul> <li>Classic <code>&lt;select&gt;</code> dropdowns:<ul> <li><code>selectOption(\"value\")</code> \u2192 select by value.</li> <li><code>selectOption(new SelectOption().setLabel(\"...\"))</code> \u2192 select by     visible text.</li> <li><code>selectOption(new SelectOption().setIndex(i))</code> \u2192 select by     index.</li> <li><code>selectOption(new String[]{...})</code> \u2192 select multiple values.</li> <li>Iterate options with <code>.count()</code> &amp; <code>.nth()</code>.</li> </ul> </li> <li>Auto-suggestion / custom dropdowns:<ul> <li>Use <code>fill()</code> to type, then locate the suggestion and <code>click()</code>.</li> <li>Iterate options with <code>.count()</code> &amp; <code>.nth()</code>.</li> </ul> </li> <li>Pro tips:<ul> <li>Playwright auto-waits for dropdowns.</li> <li>Prefer semantic locators (<code>getByLabel</code>, <code>getByText</code>) for     stability.</li> </ul> </li> </ul>"},{"location":"playwright-Java/exceptions/","title":"Java Playwright \u2013 Common Exceptions and How to Handle Them","text":"<p>Playwright in Java provides powerful automation features, but you may encounter exceptions during execution. This guide lists the most common exceptions, their causes, and solutions with code snippets.</p>"},{"location":"playwright-Java/exceptions/#1-timeouterror","title":"1. TimeoutError","text":"<p>Cause: - An action (like <code>click</code>, <code>fill</code>, <code>waitForSelector</code>) did not complete within the default timeout (usually 30 seconds). - Element is not visible, attached, or ready for interaction.</p> <p>Solution: - Increase timeout using <code>setTimeout()</code> or pass custom timeout in action options. - Ensure element is visible before interacting.</p> <p>Code Example:</p> <pre><code>page.click(\"button#submit\", new Page.ClickOptions().setTimeout(10000)); // 10 sec timeout\n\n// Or set default timeout for the page\npage.setDefaultTimeout(15000);\n</code></pre>"},{"location":"playwright-Java/exceptions/#2-playwrightexception-generic-exception","title":"2. PlaywrightException (Generic Exception)","text":"<p>Cause: - Incorrect selectors (e.g., wrong CSS/XPath). - Performing actions on detached or invalid elements.  </p> <p>Solution: - Always validate selectors with <code>page.locator()</code> or <code>page.isVisible()</code>. - Use <code>waitForSelector()</code> before performing action.</p> <p>Code Example:</p> <pre><code>if (page.isVisible(\"input#username\")) {\n    page.fill(\"input#username\", \"sandesh\");\n} else {\n    System.out.println(\"Element not found!\");\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#3-elementhandleexception","title":"3. ElementHandleException","text":"<p>Cause: - Attempting to interact with a <code>Locator</code> or <code>ElementHandle</code> that is no longer attached to the DOM. - Example: Page refreshed or element re-rendered.</p> <p>Solution: - Re-locate the element before interaction. - Use <code>locator</code> API instead of <code>elementHandle</code> where possible (auto-handles re-attachment).</p> <p>Code Example:</p> <pre><code>Locator loginBtn = page.locator(\"#login\");\nloginBtn.click(); // safer than elementHandle\n\n// If using elementHandle\nElementHandle handle = page.querySelector(\"#login\");\nhandle.click(); // might fail if DOM changes\n</code></pre>"},{"location":"playwright-Java/exceptions/#4-downloadfailureexception","title":"4. DownloadFailureException","text":"<p>Cause: - Download interrupted, canceled, or file not generated. - Permissions issue writing file.</p> <p>Solution: - Ensure <code>waitForDownload()</code> is used properly. - Use <code>download.saveAs()</code> to explicitly save file to desired location.</p> <p>Code Example:</p> <pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a#downloadLink\");\n});\n\ndownload.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\file.txt\"));\n</code></pre>"},{"location":"playwright-Java/exceptions/#5-navigationexception","title":"5. NavigationException","text":"<p>Cause: - Page fails to navigate to a URL (e.g., network issues, invalid URL). - Timeout while waiting for page load.</p> <p>Solution: - Use <code>page.navigate()</code> with explicit timeout. - Add retries for flaky connections.</p> <p>Code Example:</p> <pre><code>page.navigate(\"https://example.com\", new Page.NavigateOptions().setTimeout(20000));\n</code></pre>"},{"location":"playwright-Java/exceptions/#6-websocketexception","title":"6. WebSocketException","text":"<p>Cause: - Playwright internally communicates with browser over WebSocket. - Exception occurs when connection is lost (browser crash, closed unexpectedly).</p> <p>Solution: - Restart browser context/session. - Add retry logic in test framework.</p> <p>Code Example:</p> <pre><code>try {\n    page.navigate(\"https://example.com\");\n} catch (PlaywrightException e) {\n    System.out.println(\"Browser disconnected. Restarting...\");\n    // re-launch browser\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#7-selectorresolutionexception","title":"7. SelectorResolutionException","text":"<p>Cause: - Invalid selector syntax (CSS or XPath). - Element does not exist.</p> <p>Solution: - Test selector validity in browser dev tools. - Use <code>page.locator()</code> instead of <code>page.querySelector()</code> for better debugging.</p> <p>Code Example:</p> <pre><code>Locator button = page.locator(\"button:has-text('Login')\");\nbutton.click();\n</code></pre>"},{"location":"playwright-Java/exceptions/#8-assertionerror","title":"8. AssertionError","text":"<p>Cause: - Assertions fail due to unexpected values. - Example: Page title mismatch.</p> <p>Solution: - Print actual vs expected values for debugging. - Use retries or waits if data loads asynchronously.</p> <p>Code Example:</p> <pre><code>String title = page.title();\nassert title.equals(\"Expected Title\") : \"Title mismatch! Actual: \" + title;\n</code></pre>"},{"location":"playwright-Java/exceptions/#9-filealreadyexistsexception","title":"9. FileAlreadyExistsException","text":"<p>Cause: - While saving downloads/screenshots, file already exists at the same path.</p> <p>Solution: - Save with a unique name using timestamp or UUID.</p> <p>Code Example:</p> <pre><code>String fileName = \"screenshot_\" + System.currentTimeMillis() + \".png\";\npage.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(fileName)));\n</code></pre>"},{"location":"playwright-Java/exceptions/#10-illegalstateexception-playwright-context","title":"10. IllegalStateException (Playwright Context)","text":"<p>Cause: - Trying to use closed browser/page/context. - Example: Performing action after calling <code>browser.close()</code>.</p> <p>Solution: - Ensure context/page is open before using. - Wrap in try-catch for cleanup.</p> <p>Code Example:</p> <pre><code>try {\n    page.click(\"#btn\");\n} catch (IllegalStateException e) {\n    System.out.println(\"Page is already closed.\");\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#summary","title":"\ud83d\udccc Summary","text":"Exception Cause Solution TimeoutError Action exceeds wait time Increase timeout, wait for selector PlaywrightException Generic errors Validate selectors, wait for elements ElementHandleException Detached elements Use <code>locator</code> API DownloadFailureException Download failed Use <code>waitForDownload()</code> NavigationException Navigation failed Add timeout/retry WebSocketException Browser connection lost Restart session SelectorResolutionException Invalid selector Validate selector syntax AssertionError Assertion failed Print debug info, add waits FileAlreadyExistsException File path already exists Save with unique names IllegalStateException Using closed context Check before use <p>\u2705 This document covers all major exceptions in Java Playwright, with their causes, solutions, and code snippets.</p>"},{"location":"playwright-Java/file-upload-download/","title":"Java Playwright \u2013 File Upload &amp; Download Examples","text":"<p>This guide explains how to handle File Upload and File Download in Java Playwright with code samples.</p>"},{"location":"playwright-Java/file-upload-download/#file-upload-concept","title":"\ud83d\udccc File Upload Concept","text":"<ul> <li>Playwright does not interact with the native OS file chooser.</li> <li>Instead, we use <code>setInputFiles()</code> to programmatically set files into <code>&lt;input type=\"file\"&gt;</code> elements.</li> <li>Supports single and multiple files.</li> </ul>"},{"location":"playwright-Java/file-upload-download/#upload-single-file","title":"\u2705 Upload Single File","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FileUploadSingle {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://www.w3schools.com/howto/howto_html_file_upload_button.asp\");\n\n            // Upload a single file\n            page.setInputFiles(\"input[type='file']\", \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test.txt\");\n\n            // Assertion (Check if file input has value)\n            String fileName = page.inputValue(\"input[type='file']\");\n            assert fileName.contains(\"test.txt\");\n\n            System.out.println(\"\u2705 Single File uploaded successfully\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#upload-multiple-files","title":"\u2705 Upload Multiple Files","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FileUploadMultiple {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://www.w3schools.com/howto/howto_html_file_upload_button.asp\");\n\n            // Upload multiple files\n            page.setInputFiles(\"input[type='file']\", new String[] {\n                \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test1.txt\",\n                \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test2.txt\"\n            });\n\n            // Assertion (Check both file names are uploaded)\n            String fileNames = page.inputValue(\"input[type='file']\");\n            assert fileNames.contains(\"test1.txt\") &amp;&amp; fileNames.contains(\"test2.txt\");\n\n            System.out.println(\"\u2705 Multiple Files uploaded successfully\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#file-download-concept","title":"\ud83d\udccc File Download Concept","text":"<ul> <li>Use <code>page.waitForDownload()</code> to capture the <code>Download</code> object.</li> <li>Save the downloaded file to a desired location using <code>download.saveAs()</code>.</li> </ul>"},{"location":"playwright-Java/file-upload-download/#file-download-example","title":"\u2705 File Download Example","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class FileDownloadExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://file-examples.com/index.php/sample-documents-download/\");\n\n            // Wait for download event\n            Download download = page.waitForDownload(() -&gt; {\n                page.click(\"a[href*='sample.doc']\"); // sample download link\n            });\n\n            // Save the file to desired location\n            download.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\sample.doc\"));\n\n            // Assertion (Check file is downloaded successfully)\n            assert download.path() != null;\n\n            System.out.println(\"\u2705 File downloaded to: \" + download.path());\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#handling-dynamic-filenames","title":"\ud83d\udd39 Handling Dynamic Filenames","text":"<p>If the downloaded file has a random or dynamic name, you can:</p> <pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a.download-link\");\n});\n\n// Save with a custom name regardless of original name\ndownload.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\myFile.docx\"));\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#key-notes","title":"\ud83d\udccc Key Notes","text":"<ul> <li><code>setInputFiles()</code> works only on <code>&lt;input type=\"file\"&gt;</code> elements.</li> <li>Always use <code>waitForDownload()</code> to ensure the file is completely downloaded before accessing it.</li> <li>You can add assertions to verify file name, existence, or size.</li> </ul> <p>\u2705 This covers Single File Upload, Multiple File Upload with Assertions, and File Download Handling in Java Playwright.</p>"},{"location":"playwright-Java/handling-windows/","title":"11. Windows &amp; Tabs Handling in Playwright (Java)","text":"<p>In Playwright, handling multiple windows or tabs is a common scenario in web automation.\\ Playwright treats each new tab/window as a <code>Page</code> object.</p>"},{"location":"playwright-Java/handling-windows/#opening-a-new-window-tab","title":"\ud83d\udd39 Opening a New Window / Tab","text":"<p>When a link opens a new window or tab, Playwright can listen for it.</p> <pre><code>// Example: Click link that opens new tab/window\nPage newPage = page.waitForPopup(() -&gt; {\n    page.locator(\"a#openNewTab\").click();\n});\n\nSystem.out.println(\"New Page Title: \" + newPage.title());\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-window-by-title","title":"\ud83d\udd39 Switching Window by Title","text":"<p>Suppose you want to switch to a tab/window with title \"hellpword\".</p> <pre><code>for (Page p : page.context().pages()) {\n    if (p.title().equalsIgnoreCase(\"hellpword\")) {\n        System.out.println(\"Switched to page with title: \" + p.title());\n        p.bringToFront();   // Make it active\n        break;\n    }\n}\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-by-index-of-tab","title":"\ud83d\udd39 Switching by Index of Tab","text":"<p>Each window/tab is stored in a list using <code>context.pages()</code>.\\ You can switch by index position.</p> <pre><code>// Get all pages\nList&lt;Page&gt; allPages = page.context().pages();\n\n// Switch to second tab (index starts at 0)\nPage secondTab = allPages.get(1);\nsecondTab.bringToFront();\n\nSystem.out.println(\"Now on Tab: \" + secondTab.title());\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-using-keyboard-tab-key","title":"\ud83d\udd39 Switching Using Keyboard (Tab Key)","text":"<p>Playwright supports keyboard actions.\\ If you want to simulate switching tabs using Ctrl + Tab, you can send key presses.</p> <pre><code>// Press CTRL + TAB to switch to next tab (browser level)\npage.keyboard().press(\"Control+Tab\");\n\n// Or Shift+Control+Tab to move backwards\npage.keyboard().press(\"Control+Shift+Tab\");\n</code></pre> <p>\u26a0\ufe0f Note: Keyboard tab switching works only if the browser supports shortcut handling.\\ Preferred way is using <code>context().pages()</code>.</p>"},{"location":"playwright-Java/handling-windows/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always wait for popup when new tab/window opens.\\</li> <li>Use <code>bringToFront()</code> to activate the desired tab.\\</li> <li>Prefer switching by title or index, keyboard shortcuts are less     reliable.\\</li> <li>Clean up by closing unused tabs:\\</li> </ul> <pre><code>for (Page p : page.context().pages()) {\n    if (!p.title().equals(\"Main Page\")) {\n        p.close();\n    }\n}\n</code></pre> <p>\u2705 With these methods, you can reliably handle multiple windows/tabs in Playwright with Java.</p>"},{"location":"playwright-Java/iframes/","title":"8. Handling Frames &amp; iFrames in Playwright (Java)","text":"<p>Frames (<code>&lt;frame&gt;</code>) and iFrames (<code>&lt;iframe&gt;</code>) allow embedding another HTML document inside the main page. Playwright provides APIs to switch context into frames and interact with elements inside them.</p>"},{"location":"playwright-Java/iframes/#key-concepts","title":"\u2705 Key Concepts","text":""},{"location":"playwright-Java/iframes/#what-is-an-iframe","title":"What is an iFrame?","text":"<ul> <li>An <code>&lt;iframe&gt;</code> is an HTML tag that loads another HTML page inside the current page.</li> <li>Each frame has its own DOM and context, isolated from the main document.</li> <li>To interact with elements inside frames, you must switch to the correct frame.</li> </ul>"},{"location":"playwright-Java/iframes/#playwright-frame-api","title":"\ud83d\udccc Playwright Frame API","text":""},{"location":"playwright-Java/iframes/#1-access-all-frames","title":"1. Access All Frames","text":"<pre><code>page.frames(); // returns List&lt;Frame&gt;\n</code></pre> <ul> <li>Retrieves all frames in the page, including main frame + nested frames.</li> </ul>"},{"location":"playwright-Java/iframes/#2-access-frame-by-name-url","title":"2. Access Frame by Name / URL","text":"<pre><code>Frame frameByName = page.frame(\"frameName\");\nFrame frameByUrl = page.frameByUrl(\".*someFrameUrl.*\");\n</code></pre>"},{"location":"playwright-Java/iframes/#3-access-nested-frames-by-index","title":"3. Access Nested Frames by Index","text":"<pre><code>List&lt;Frame&gt; frames = page.frames();\nFrame firstFrame = frames.get(1);   // index 0 is always the main page\n</code></pre>"},{"location":"playwright-Java/iframes/#4-locate-frame-element-and-get-frame-object","title":"4. Locate Frame Element and Get Frame Object","text":"<pre><code>Locator frameLocator = page.frameLocator(\"iframe[name='frame1']\");\n</code></pre> <ul> <li>Useful for directly chaining locators into frame elements.</li> </ul>"},{"location":"playwright-Java/iframes/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FramesExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to page with frames\n            page.navigate(\"https://the-internet.herokuapp.com/nested_frames\");\n\n            // --- Get all frames ---\n            for (Frame f : page.frames()) {\n                System.out.println(\"Frame: \" + f.name() + \" | URL: \" + f.url());\n            }\n\n            // --- Switch to top frame (by name) ---\n            Frame topFrame = page.frame(\"frame-top\");\n            System.out.println(\"Inside Top Frame: \" + topFrame.name());\n\n            // --- Nested frame (by index) ---\n            Frame nestedLeft = topFrame.childFrames().get(0);\n            System.out.println(\"Inside Nested Left Frame: \" + nestedLeft.name());\n\n            // Example: get text inside nested frame\n            String text = nestedLeft.locator(\"body\").innerText();\n            System.out.println(\"Nested Frame Text: \" + text);\n\n            // --- Access frame by locator ---\n            Frame frameExample = page.frameLocator(\"iframe[name='mce_0_ifr']\").frame();\n            frameExample.locator(\"#tinymce\").fill(\"Hello inside iframe!\");\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/iframes/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Main Page vs Frames:</li> <li><code>page</code> \u2192 represents the main document.</li> <li> <p><code>frame</code> \u2192 represents an iframe\u2019s DOM.</p> </li> <li> <p>Indexing:</p> </li> <li><code>page.frames().get(0)</code> \u2192 main page.</li> <li> <p><code>page.frames().get(1+)</code> \u2192 child frames.</p> </li> <li> <p>Frame Locator vs Frame Object:</p> </li> <li><code>page.frame(\"name\")</code> \u2192 switch to a frame by name/id/URL.</li> <li> <p><code>page.frameLocator(\"selector\")</code> \u2192 chain locators inside an iframe without switching.</p> </li> <li> <p>Nested Frames:</p> </li> <li> <p>Use <code>.childFrames()</code> recursively to drill down multiple levels.</p> </li> <li> <p>Best Practice:</p> </li> <li>Prefer <code>frameLocator()</code> for simplicity when working with a single iframe.</li> <li>Use <code>frames()</code> list traversal for nested or multiple frame hierarchies.</li> </ul> <p>\u2705 With these techniques, you can reliably handle single, nested, and multiple frames in Playwright tests using Java.</p>"},{"location":"playwright-Java/interview-question/","title":"Java Playwright UI Testing Interview Questions &amp; Answers","text":"<p>This document contains 20+ real-time interview questions for Java Playwright UI Testing with in-depth explanations and example code snippets.</p>"},{"location":"playwright-Java/interview-question/#1-what-is-playwright-and-how-is-it-different-from-selenium","title":"1. What is Playwright, and how is it different from Selenium?","text":"<p>Answer: Playwright is an open-source automation library developed by Microsoft for web UI testing. Unlike Selenium, it supports: - Multiple browsers (Chromium, Firefox, WebKit) with a single API. - Auto-waiting for elements. - Network interception and mocking. - Headless and headful execution.</p> <pre><code>import com.microsoft.playwright.*;\n\npublic class LaunchBrowser {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n            page.navigate(\"https://example.com\");\n            System.out.println(page.title());\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#2-how-do-you-launch-a-browser-in-playwright-with-java","title":"2. How do you launch a browser in Playwright with Java?","text":"<pre><code>Playwright playwright = Playwright.create();\nBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\nPage page = browser.newPage();\npage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#3-how-does-playwright-handle-synchronization-auto-waiting","title":"3. How does Playwright handle synchronization (auto-waiting)?","text":"<p>Answer: Playwright automatically waits for elements to be actionable before performing actions like <code>click()</code> or <code>fill()</code>. Unlike Selenium, explicit waits are less frequently needed.</p> <pre><code>page.click(\"button#submit\"); // Playwright waits until the button is clickable\n</code></pre>"},{"location":"playwright-Java/interview-question/#4-how-do-you-select-elements-in-playwright","title":"4. How do you select elements in Playwright?","text":"<p>Answer: Selectors can be: - CSS selectors - XPath - Text selectors</p> <pre><code>page.click(\"text=Login\");\npage.fill(\"#username\", \"admin\");\npage.fill(\"input[name='password']\", \"pass123\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#5-how-do-you-handle-multiple-browser-contexts","title":"5. How do you handle multiple browser contexts?","text":"<p>Answer: Contexts allow isolated sessions, similar to incognito windows.</p> <pre><code>BrowserContext context1 = browser.newContext();\nPage page1 = context1.newPage();\npage1.navigate(\"https://example1.com\");\n\nBrowserContext context2 = browser.newContext();\nPage page2 = context2.newPage();\npage2.navigate(\"https://example2.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#6-how-do-you-handle-multiple-pagestabs","title":"6. How do you handle multiple pages/tabs?","text":"<pre><code>Page newPage = page.waitForPopup(() -&gt; page.click(\"a[target='_blank']\"));\nnewPage.waitForLoadState();\nSystem.out.println(newPage.title());\n</code></pre>"},{"location":"playwright-Java/interview-question/#7-how-do-you-handle-alerts-in-playwright","title":"7. How do you handle alerts in Playwright?","text":"<pre><code>page.onceDialog(dialog -&gt; {\n    System.out.println(\"Alert message: \" + dialog.message());\n    dialog.accept();\n});\npage.click(\"#trigger-alert\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#8-how-do-you-perform-assertions-in-playwright-with-java","title":"8. How do you perform assertions in Playwright with Java?","text":"<p>Playwright provides <code>Assertions</code>.</p> <pre><code>import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page.locator(\"h1\")).hasText(\"Welcome\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#9-how-do-you-upload-files-in-playwright","title":"9. How do you upload files in Playwright?","text":"<pre><code>page.setInputFiles(\"input[type='file']\", Paths.get(\"C:/files/sample.txt\"));\n</code></pre>"},{"location":"playwright-Java/interview-question/#10-how-do-you-download-files-in-playwright","title":"10. How do you download files in Playwright?","text":"<pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a#downloadLink\");\n});\nSystem.out.println(\"Downloaded file: \" + download.path());\n</code></pre>"},{"location":"playwright-Java/interview-question/#11-how-do-you-handle-frames-in-playwright","title":"11. How do you handle frames in Playwright?","text":"<pre><code>Frame frame = page.frameByName(\"frameName\");\nframe.fill(\"#inputField\", \"Hello\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#12-how-do-you-take-screenshots-in-playwright","title":"12. How do you take screenshots in Playwright?","text":"<pre><code>page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n</code></pre>"},{"location":"playwright-Java/interview-question/#13-how-do-you-handle-hover-actions-in-playwright","title":"13. How do you handle hover actions in Playwright?","text":"<pre><code>page.hover(\"button#menu\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#14-how-do-you-handle-drag-and-drop-in-playwright","title":"14. How do you handle drag and drop in Playwright?","text":"<pre><code>page.dragAndDrop(\"#source\", \"#target\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#15-how-do-you-emulate-devices-in-playwright","title":"15. How do you emulate devices in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setViewportSize(375, 667)\n    .setUserAgent(\"Mozilla/5.0 (iPhone; CPU iPhone OS 13_5 like Mac OS X)\"));\nPage mobilePage = context.newPage();\nmobilePage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#16-how-do-you-intercept-and-modify-network-requests","title":"16. How do you intercept and modify network requests?","text":"<pre><code>page.route(\"**/api/**\", route -&gt; {\n    route.fulfill(new Route.FulfillOptions().setBody(\"{\"status\":\"mocked\"}\"));\n});\npage.navigate(\"https://example.com/api/test\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#17-how-do-you-wait-for-specific-network-responses","title":"17. How do you wait for specific network responses?","text":"<pre><code>Response response = page.waitForResponse(\"**/api/data\", () -&gt; {\n    page.click(\"#fetchData\");\n});\nSystem.out.println(response.status());\n</code></pre>"},{"location":"playwright-Java/interview-question/#18-how-do-you-record-a-video-of-test-execution","title":"18. How do you record a video of test execution?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordVideoDir(Paths.get(\"videos/\")));\nPage videoPage = context.newPage();\nvideoPage.navigate(\"https://example.com\");\ncontext.close(); // saves video\n</code></pre>"},{"location":"playwright-Java/interview-question/#19-how-do-you-mock-geolocation-in-playwright","title":"19. How do you mock geolocation in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setGeolocation(37.7749, -122.4194)\n    .setPermissions(Arrays.asList(\"geolocation\")));\nPage page = context.newPage();\npage.navigate(\"https://maps.google.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#20-how-do-you-run-tests-in-parallel-with-playwright-testng","title":"20. How do you run tests in parallel with Playwright + TestNG?","text":"<p>Answer: Each test can run in its own browser context.</p> <pre><code>import org.testng.annotations.Test;\n\npublic class ParallelTest {\n    @Test\n    public void test1() {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            BrowserContext context = browser.newContext();\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#21-how-do-you-integrate-playwright-with-cicd-pipelines","title":"21. How do you integrate Playwright with CI/CD pipelines?","text":"<p>Answer: - Install Playwright browsers in the pipeline. - Run tests using Maven/Gradle. - Publish results.</p> <p>Example GitHub Actions YAML:</p> <pre><code>name: Playwright Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n      - name: Install Playwright\n        run: mvn exec:java -Dexec.mainClass=\"com.microsoft.playwright.CLI\" -Dexec.args=\"install\"\n      - name: Run Tests\n        run: mvn test\n</code></pre>"},{"location":"playwright-Java/interview-question/#22-how-do-you-handle-cookies-in-playwright","title":"22. How do you handle cookies in Playwright?","text":"<pre><code>// Get cookies\nSystem.out.println(context.cookies());\n\n// Add cookies\ncontext.addCookies(Arrays.asList(new BrowserContext.AddCookiesOptions()\n    .setName(\"session_id\")\n    .setValue(\"12345\")\n    .setUrl(\"https://example.com\")));\n</code></pre>"},{"location":"playwright-Java/interview-question/#23-how-do-you-handle-authentication-in-playwright","title":"23. How do you handle authentication in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setHttpCredentials(\"username\", \"password\"));\nPage page = context.newPage();\npage.navigate(\"https://secure-site.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#24-how-do-you-handle-shadow-dom-elements","title":"24. How do you handle shadow DOM elements?","text":"<pre><code>page.locator(\"css=custom-element &gt;&gt;&gt; button\").click();\n</code></pre>"},{"location":"playwright-Java/interview-question/#25-how-do-you-handle-slow-networks-in-playwright","title":"25. How do you handle slow networks in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setOffline(false));\ncontext.setDefaultNavigationTimeout(10000); // 10 seconds\n</code></pre>"},{"location":"playwright-Java/interview-question/#26-how-do-you-use-playwright-trace-viewer","title":"26. How do you use Playwright Trace Viewer?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordHarPath(Paths.get(\"trace.zip\")));\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\ncontext.close(); // trace saved\n</code></pre>"},{"location":"playwright-Java/interview-question/#27-how-do-you-mock-api-responses-in-playwright","title":"27. How do you mock API responses in Playwright?","text":"<pre><code>page.route(\"**/api/data\", route -&gt; {\n    route.fulfill(new Route.FulfillOptions()\n        .setStatus(200)\n        .setContentType(\"application/json\")\n        .setBody(\"{\"message\":\"Mocked Response\"}\"));\n});\n</code></pre>"},{"location":"playwright-Java/interview-question/#28-how-do-you-retry-failed-tests-in-playwright-with-java","title":"28. How do you retry failed tests in Playwright with Java?","text":"<p>Answer: Use TestNG retry analyzers or JUnit retry rules. Playwright itself retries only locator actions.</p> <pre><code>for (int i = 0; i &lt; 3; i++) {\n    try {\n        page.click(\"#submit\");\n        break;\n    } catch (Exception e) {\n        if (i == 2) throw e;\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#29-how-do-you-handle-basic-authentication-popups","title":"29. How do you handle basic authentication popups?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setHttpCredentials(\"user\", \"pass\"));\nPage page = context.newPage();\npage.navigate(\"https://auth-site.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#30-how-do-you-test-responsive-design-with-playwright","title":"30. How do you test responsive design with Playwright?","text":"<pre><code>Page mobilePage = browser.newContext(new Browser.NewContextOptions()\n    .setViewportSize(375, 667)).newPage();\nmobilePage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#31-how-do-you-test-web-accessibility-with-playwright","title":"31. How do you test web accessibility with Playwright?","text":"<p>Playwright integrates with <code>axe-core</code> for accessibility testing.</p> <pre><code>Object accessibilityTree = page.accessibility().snapshot();\nSystem.out.println(accessibilityTree.toString());\n</code></pre>"},{"location":"playwright-Java/interview-question/#32-how-do-you-handle-retries-and-flaky-tests","title":"32. How do you handle retries and flaky tests?","text":"<p>Answer: - Use <code>retry</code> in CI/CD pipelines. - Avoid <code>Thread.sleep()</code>, prefer auto-wait or <code>waitForSelector</code>. - Stabilize locators.</p> <pre><code>page.locator(\"button#login\").click(new Locator.ClickOptions().setTrial(true));\n</code></pre>"},{"location":"playwright-Java/interview-question/#33-how-do-you-run-playwright-tests-in-docker","title":"33. How do you run Playwright tests in Docker?","text":"<ul> <li>Create a Dockerfile with Java + Playwright installed.</li> <li>Run tests inside container.</li> </ul> <pre><code>FROM mcr.microsoft.com/playwright/java:v1.49.0-jammy\nCOPY . /app\nWORKDIR /app\nRUN mvn test\n</code></pre>"},{"location":"playwright-Java/interview-question/#34-how-do-you-debug-playwright-tests","title":"34. How do you debug Playwright tests?","text":"<ul> <li>Use <code>setHeadless(false)</code></li> <li>Use <code>page.pause()</code> to inspect manually.</li> </ul> <pre><code>page.pause(); // Opens Playwright Inspector\n</code></pre>"},{"location":"playwright-Java/interview-question/#35-how-do-you-handle-rate-limiting-in-api-calls-during-tests","title":"35. How do you handle rate-limiting in API calls during tests?","text":"<p>Answer: - Add delays using <code>page.waitForTimeout(ms)</code>. - Use network interception to simulate rate limits.</p> <pre><code>page.waitForTimeout(2000); // wait for 2 seconds\n</code></pre>"},{"location":"playwright-Java/interview-question/#36-how-do-you-capture-console-logs-in-playwright","title":"36. How do you capture console logs in Playwright?","text":"<pre><code>page.onConsoleMessage(msg -&gt; System.out.println(\"Console: \" + msg.text()));\npage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#37-how-do-you-capture-network-requests-and-responses","title":"37. How do you capture network requests and responses?","text":"<pre><code>page.onRequest(request -&gt; System.out.println(\"Request: \" + request.url()));\npage.onResponse(response -&gt; System.out.println(\"Response: \" + response.url()));\n</code></pre>"},{"location":"playwright-Java/interview-question/#38-how-do-you-handle-multiple-downloads-in-playwright","title":"38. How do you handle multiple downloads in Playwright?","text":"<pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a.download-all\");\n});\nSystem.out.println(download.path());\n</code></pre>"},{"location":"playwright-Java/interview-question/#39-how-do-you-assert-element-visibility","title":"39. How do you assert element visibility?","text":"<pre><code>import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nassertThat(page.locator(\"#logo\")).isVisible();\n</code></pre>"},{"location":"playwright-Java/interview-question/#40-how-do-you-run-playwright-tests-with-gradle","title":"40. How do you run Playwright tests with Gradle?","text":"<pre><code>plugins {\n    id 'java'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.microsoft.playwright:playwright:1.49.0'\n    testImplementation 'org.testng:testng:7.9.0'\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#41-how-do-you-test-single-page-applications-spas-with-playwright","title":"41. How do you test single-page applications (SPAs) with Playwright?","text":"<p>Answer: Use <code>waitForLoadState(\"networkidle\")</code> to ensure all async calls are complete.</p> <pre><code>page.click(\"#loadData\");\npage.waitForLoadState(LoadState.NETWORKIDLE);\n</code></pre>"},{"location":"playwright-Java/interview-question/#42-how-do-you-manage-test-data-in-playwright","title":"42. How do you manage test data in Playwright?","text":"<p>Answer: - Use external files (JSON/CSV). - Use environment variables.</p> <pre><code>String username = System.getenv(\"TEST_USER\");\npage.fill(\"#username\", username);\n</code></pre>"},{"location":"playwright-Java/locator/","title":"Playwright Locators \u2013 Complete Guide (Java)","text":"<p>This guide covers all locator strategies in Playwright (Java) with examples, including ARIA roles and accessibility-based locators.</p>"},{"location":"playwright-Java/locator/#example-html","title":"\ud83d\udd39 Example HTML","text":"<pre><code>&lt;input type=\"text\" id=\"email\" class=\"form-control\" placeholder=\"Enter email\" /&gt;\n\n&lt;button id=\"submitBtn\" class=\"btn btn-primary\" type=\"submit\"&gt;Submit&lt;/button&gt;\n\n&lt;span class=\"text\"&gt;Title&lt;/span&gt;\n\n&lt;a href=\"/home\"&gt;Home&lt;/a&gt;\n</code></pre>"},{"location":"playwright-Java/locator/#locator-types","title":"\ud83d\udd39 Locator Types","text":""},{"location":"playwright-Java/locator/#1-by-id","title":"1. By ID","text":"<pre><code>page.locator(\"#email\");\npage.locator(\"#submitBtn\");\n</code></pre>"},{"location":"playwright-Java/locator/#2-by-class","title":"2. By Class","text":"<pre><code>page.locator(\".form-control\");\npage.locator(\".btn.btn-primary\");\n</code></pre>"},{"location":"playwright-Java/locator/#3-by-tag-name","title":"3. By Tag Name","text":"<pre><code>page.locator(\"button\");\npage.locator(\"input\");\n</code></pre>"},{"location":"playwright-Java/locator/#4-by-text-content","title":"4. By Text Content","text":"<pre><code>page.getByText(\"Submit\");\npage.getByText(\"Home\");\n</code></pre>"},{"location":"playwright-Java/locator/#5-by-role-aria-accessibility","title":"5. By Role (ARIA Accessibility)","text":"<p>ARIA roles are accessibility attributes in HTML that define the purpose of an element for screen readers. Playwright\u2019s <code>getByRole</code> uses the accessibility tree.</p> <pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\"));\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Home\"));\n</code></pre> <ul> <li>Use <code>getByRole</code> for buttons, links, headings, checkboxes, etc.</li> <li>More stable than CSS/XPath since roles rarely change.</li> <li>Filters elements by their accessible name (text or ARIA label).</li> </ul> <p>Example of explicit role in HTML:</p> <pre><code>&lt;div role=\"button\" aria-label=\"Submit Form\"&gt;Submit&lt;/div&gt;\n</code></pre> <p>Rule of Thumb: Prefer <code>getByRole</code> if a semantic role exists; fallback to XPath/CSS otherwise.</p>"},{"location":"playwright-Java/locator/#6-by-placeholder","title":"6. By Placeholder","text":"<pre><code>page.getByPlaceholder(\"Enter email\");\n</code></pre>"},{"location":"playwright-Java/locator/#7-by-label","title":"7. By Label","text":"<pre><code>&lt;label for=\"email\"&gt;Email&lt;/label&gt;\n&lt;input id=\"email\" /&gt;\n</code></pre> <pre><code>page.getByLabel(\"Email\");\n</code></pre>"},{"location":"playwright-Java/locator/#8-by-alt-text","title":"8. By Alt Text","text":"<pre><code>&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;\n</code></pre> <pre><code>page.getByAltText(\"Company Logo\");\n</code></pre>"},{"location":"playwright-Java/locator/#9-by-title-attribute","title":"9. By Title Attribute","text":"<pre><code>&lt;button title=\"Click to submit\"&gt;Submit&lt;/button&gt;\n</code></pre> <pre><code>page.getByTitle(\"Click to submit\");\n</code></pre>"},{"location":"playwright-Java/locator/#10-by-css-attribute-selector","title":"10. By CSS Attribute Selector","text":"<pre><code>page.locator(\"input[type='text']\");\npage.locator(\"button[type='submit']\");\npage.locator(\"a[href='/home']\");\n</code></pre>"},{"location":"playwright-Java/locator/#11-by-xpath","title":"11. By XPath","text":"<pre><code>page.locator(\"//button[text()='Submit']\");\npage.locator(\"//input[@id='email']\");\n</code></pre>"},{"location":"playwright-Java/locator/#handling-multiple-matches","title":"\ud83d\udd39 Handling Multiple Matches","text":"<pre><code>&lt;ul&gt;\n  &lt;li class=\"item\"&gt;Apple&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Banana&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Cherry&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>Locator items = page.locator(\".item\");\nint count = items.count();\n\nitems.nth(0);  // Apple\nitems.nth(1);  // Banana\nitems.nth(2);  // Cherry\n\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(items.nth(i).innerText());\n}\n\nLocator banana = page.locator(\".item\").filter(new Locator.FilterOptions().setHasText(\"Banana\"));\n\npage.locator(\".item\").first();\npage.locator(\".item\").last();\n</code></pre>"},{"location":"playwright-Java/locator/#summary","title":"\ud83d\udd39 Summary","text":"<ul> <li>Use semantic locators (<code>getByRole</code>, <code>getByLabel</code>, <code>getByPlaceholder</code>) for stable and accessibility-compliant tests.  </li> <li>Use CSS/XPath only if necessary.  </li> <li>Manage multiple elements using <code>.count()</code>, <code>.nth()</code>, <code>.first()</code>, <code>.last()</code>, <code>.filter()</code>.  </li> <li>ARIA roles ensure robust, readable, and accessible test selection.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/","title":"Playwright \u2013 Drag &amp; Drop and Keyboard Interactions (Java)","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#1-drag-and-drop","title":"1\ufe0f\u20e3 Drag and Drop","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#example-html","title":"Example HTML","text":"<pre><code>&lt;div id=\"source\" draggable=\"true\"&gt;Drag me&lt;/div&gt;\n&lt;div id=\"target\"&gt;Drop here&lt;/div&gt;\n</code></pre>"},{"location":"playwright-Java/mouse-keyboard-actions/#a-simple-drag-and-drop-using-dragto","title":"a) Simple Drag and Drop using <code>dragTo()</code>","text":"<pre><code>Locator source = page.locator(\"#source\");\nLocator target = page.locator(\"#target\");\n\nsource.dragTo(target);\n</code></pre> <ul> <li>Simulates dragging from source element to target element.</li> <li>Handles mouse events automatically.</li> <li>Auto-waits for elements to be visible.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-drag-and-drop-using-mouse-actions","title":"b) Drag and Drop Using Mouse Actions","text":"<pre><code>page.mouse().move(100, 200);  // Move to source coordinates\npage.mouse().down();           // Click and hold\npage.mouse().move(300, 400);  // Move to target coordinates\npage.mouse().up();             // Release\n</code></pre> <ul> <li>Useful if elements are custom draggable items not directly supported by <code>dragTo()</code>.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-iterating-multiple-draggable-items","title":"c) Iterating Multiple Draggable Items","text":"<pre><code>Locator items = page.locator(\".draggable\");\nint count = items.count();\nfor (int i = 0; i &lt; count; i++) {\n    items.nth(i).dragTo(page.locator(\"#target\"));\n}\n</code></pre> <ul> <li>Allows dragging multiple items to the target container.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-tips","title":"d) Tips","text":"<ul> <li>Use <code>dragTo()</code> for standard HTML5 draggable elements.</li> <li>Use <code>mouse()</code> actions for custom implementations.</li> <li>Combine with assertions to verify drop success.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#2-keyboard-interactions","title":"2\ufe0f\u20e3 Keyboard Interactions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-typing-text-fill-and-type","title":"a) Typing Text (<code>fill</code> and <code>type</code>)","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");  // Instant fill\npage.locator(\"#searchBox\").type(\"Automation\");  // Simulate typing character by character\n</code></pre> <ul> <li><code>fill()</code> sets value instantly.</li> <li><code>type()</code> triggers keyboard events.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-pressing-keys","title":"b) Pressing Keys","text":"<pre><code>page.locator(\"#searchBox\").press(\"Enter\");     // Press Enter key\npage.locator(\"#searchBox\").press(\"Tab\");       // Move focus to next element\n</code></pre> <ul> <li>Equivalent to <code>sendKeys(Keys.ENTER)</code> in Selenium.</li> <li>Triggers keypress events.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-keyboard-shortcuts-combination-keys","title":"c) Keyboard Shortcuts / Combination Keys","text":"<pre><code>page.keyboard().press(\"Control+A\");  // Select all text\npage.keyboard().press(\"Control+C\");  // Copy\npage.keyboard().press(\"Control+V\");  // Paste\n</code></pre> <ul> <li>Can simulate shortcuts for copy, paste, undo, etc.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-using-keyboardtype-for-raw-input","title":"d) Using <code>keyboard.type()</code> for Raw Input","text":"<pre><code>page.keyboard().type(\"Hello World\");  // Types text anywhere the focus is active\n</code></pre> <ul> <li>Useful when no input locator is available but you need to send keys globally.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#e-full-example-flow","title":"e) Full Example Flow","text":"<pre><code>// Focus search box\npage.locator(\"#searchBox\").click();\n\n// Fill and submit\npage.locator(\"#searchBox\").fill(\"Playwright\");\npage.locator(\"#searchBox\").press(\"Enter\");\n\n// Select all text and delete\npage.keyboard().press(\"Control+A\");\npage.keyboard().press(\"Backspace\");\n</code></pre>"},{"location":"playwright-Java/mouse-keyboard-actions/#tips","title":"\u2705 Tips","text":"<ul> <li>Playwright auto-waits for elements to be visible before keyboard interactions.</li> <li>Use <code>.press()</code> for single keys or shortcuts, <code>.type()</code> for simulating typing character by character.</li> <li>Drag &amp; Drop and Keyboard methods can be combined for complex flows (e.g., drag + keyboard shortcuts).</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#3-mouse-actions","title":"3\ufe0f\u20e3 Mouse Actions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-click","title":"a) Click","text":"<pre><code>Locator button = page.locator(\"#submitBtn\");\nbutton.click();\n</code></pre> <ul> <li>Simulates a single left mouse click on the element.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-double-click","title":"b) Double Click","text":"<pre><code>Locator textBox = page.locator(\"#inputBox\");\ntextBox.dblclick();\n</code></pre> <ul> <li>Selects text or activates default double-click behavior.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-hover","title":"c) Hover","text":"<pre><code>Locator menu = page.locator(\"#menu\");\nmenu.hover();\n</code></pre> <ul> <li>Moves mouse over the element (useful for dropdowns, tooltips).</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-move-mouse","title":"d) Move Mouse","text":"<pre><code>page.mouse().move(200, 300);\n</code></pre> <ul> <li>Moves mouse pointer to specific screen coordinates.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#e-mouse-down-and-up","title":"e) Mouse Down and Up","text":"<pre><code>page.mouse().move(100, 200); // Move to element\npage.mouse().down();         // Press and hold mouse button\npage.mouse().up();           // Release mouse button\n</code></pre> <ul> <li>Useful for drag-and-drop or click-and-hold actions.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#f-click-at-coordinates","title":"f) Click at Coordinates","text":"<pre><code>page.mouse().click(150, 250);\n</code></pre> <ul> <li>Clicks at absolute screen coordinates, bypassing locators.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#g-right-click","title":"g) Right Click","text":"<pre><code>Locator element = page.locator(\"#contextMenu\");\nelement.click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n</code></pre> <ul> <li>Opens context menus.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#4-advanced-keyboard-actions","title":"4\ufe0f\u20e3 Advanced Keyboard Actions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-type-text","title":"a) Type Text","text":"<pre><code>page.keyboard().type(\"Hello\");\n</code></pre> <ul> <li>Types text wherever the focus is set.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-press-enter","title":"b) Press Enter","text":"<pre><code>page.keyboard().press(\"Enter\");\n</code></pre> <ul> <li>Simulates pressing Enter key.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-key-down-and-key-up","title":"c) Key Down and Key Up","text":"<pre><code>page.keyboard().down(\"Shift\");   // Hold Shift\npage.keyboard().up(\"Shift\");     // Release Shift\n</code></pre> <ul> <li>Useful for combinations like Shift+Click.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-sequential-typing","title":"d) Sequential Typing","text":"<pre><code>Locator field = page.locator(\"#username\");\nfield.pressSequentially(\"Playwright\");\n</code></pre> <ul> <li>Types text character by character into a field (human-like typing).</li> </ul>"},{"location":"playwright-Java/page-navigation-actions/","title":"\ud83c\udf10 Playwright Java \u2013 Navigation Actions","text":"<p>This document explains all navigation-related actions available in Java Playwright with examples.</p>"},{"location":"playwright-Java/page-navigation-actions/#1-pagenavigatehttpsexamplecom","title":"1. <code>page.navigate(\"https://example.com\")</code>","text":"<p>\ud83d\udc49 Navigates the browser to the given URL. - Waits until the page is loaded (<code>load</code> event by default). - Supports additional options like timeout, waiting for specific load states, etc.  </p> <p>Example:</p> <pre><code>Page page = context.newPage();\npage.navigate(\"https://example.com\");\n</code></pre> <p>With options (wait until DOM content loaded):</p> <pre><code>page.navigate(\"https://example.com\",\n    new Page.NavigateOptions().setWaitUntil(LoadState.DOMCONTENTLOADED));\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#2-pagegoback","title":"2. <code>page.goBack()</code>","text":"<p>\ud83d\udc49 Simulates the browser back button. - Goes to the previous page in the history. - Returns a <code>Response</code> object if navigation is successful, or <code>null</code> if there\u2019s no history.  </p> <p>Example:</p> <pre><code>page.navigate(\"https://example.com\");\npage.navigate(\"https://google.com\");\n\n// Go back to example.com\npage.goBack();\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#3-pagegoforward","title":"3. <code>page.goForward()</code>","text":"<p>\ud83d\udc49 Simulates the browser forward button. - Moves forward in the history if available. - Returns a <code>Response</code> object or <code>null</code> if no forward entry exists.  </p> <p>Example:</p> <pre><code>page.goBack();     // goes to example.com\npage.goForward();  // goes to google.com again\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#4-pagereload","title":"4. <code>page.reload()</code>","text":"<p>\ud83d\udc49 Reloads the current page. - Similar to pressing the refresh button. - By default waits for the <code>load</code> event, but you can customize wait states.  </p> <p>Example:</p> <pre><code>page.reload();\n</code></pre> <p>With options:</p> <pre><code>page.reload(new Page.ReloadOptions().setWaitUntil(LoadState.DOMCONTENTLOADED));\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#5-pagetitle","title":"5. <code>page.title()</code>","text":"<p>\ud83d\udc49 Gets the title of the current page (the <code>&lt;title&gt;</code> tag content). - Returns a <code>String</code>.  </p> <p>Example:</p> <pre><code>String title = page.title();\nSystem.out.println(\"Page title is: \" + title);\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#6-pageurl","title":"6. <code>page.url()</code>","text":"<p>\ud83d\udc49 Returns the current page URL as a <code>String</code>.  </p> <p>Example:</p> <pre><code>System.out.println(\"Current URL: \" + page.url());\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#7-pagecontent","title":"7. <code>page.content()</code>","text":"<p>\ud83d\udc49 Returns the full HTML content of the page as a <code>String</code>. - Useful for debugging, parsing, or verifying HTML.  </p> <p>Example:</p> <pre><code>String html = page.content();\nSystem.out.println(html);\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#quick-notes","title":"\ud83d\udd11 Quick Notes","text":"<ul> <li><code>navigate</code>, <code>goBack</code>, <code>goForward</code>, and <code>reload</code> return a <code>Response</code> object \u2192 you can check status codes, headers, etc.  </li> <li><code>title</code>, <code>url</code>, and <code>content</code> return String values \u2192 handy for validations in tests.  </li> <li>All navigation methods can take optional parameters like timeout and waitUntil (<code>load</code>, <code>domcontentloaded</code>, <code>networkidle</code>).  </li> </ul>"},{"location":"playwright-Java/playwright-interaction/","title":"Playwright Interactions \u2013 Input &amp; Buttons (Java)","text":""},{"location":"playwright-Java/playwright-interaction/#1-typing-entering-text-into-input-boxes","title":"1\ufe0f\u20e3 Typing / Entering Text into Input Boxes","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"searchBox\")).sendKeys(\"Playwright\");\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-using-fill","title":"a) Using <code>fill()</code>","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\n</code></pre> <ul> <li>What it does: Clears any existing text and sets the new value.</li> <li>Auto-waiting: Waits until the element is visible and enabled.</li> <li>Best for: Setting values directly in forms.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-using-type","title":"b) Using <code>type()</code>","text":"<pre><code>page.locator(\"#searchBox\").type(\"Playwright\");\n</code></pre> <ul> <li>What it does: Types character by character, simulating real user typing.</li> <li>Difference from <code>fill()</code>: </li> <li><code>fill()</code> instantly sets the value.  </li> <li><code>type()</code> simulates typing and triggers keyboard events.  </li> <li>Best for: Autocomplete, search boxes, or typing behavior testing.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-pressing-keys","title":"c) Pressing Keys","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\npage.locator(\"#searchBox\").press(\"Enter\");\n</code></pre> <ul> <li>Equivalent to: <code>sendKeys(Keys.ENTER)</code> in Selenium.</li> <li>Use case: Submitting forms via keyboard.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#d-example-full-search-box-flow","title":"d) Example Full Search Box Flow","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");  // Type text instantly\npage.locator(\"#searchBox\").press(\"Enter\");      // Submit by Enter key\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#difference-between-fill-and-type","title":"Difference Between <code>fill()</code> and <code>type()</code>","text":"Feature <code>fill()</code> <code>type()</code> Action Sets value instantly Types character by character Auto-clear Yes, clears existing text No, appends to existing text unless cleared manually Speed Fast Slower, simulates typing Events triggered Minimal Triggers keypress, input events Best for Form filling Autocomplete, typing simulation, keyboard events"},{"location":"playwright-Java/playwright-interaction/#2-clicking-on-buttons","title":"2\ufe0f\u20e3 Clicking on Buttons","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"submitBtn\")).click();\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-simple-click","title":"a) Simple Click","text":"<pre><code>page.locator(\"#submitBtn\").click();\n</code></pre> <ul> <li>Waits automatically for the button to be visible and enabled.</li> <li>No need for <code>Thread.sleep()</code> or explicit waits.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-click-by-text","title":"b) Click by Text","text":"<pre><code>page.getByText(\"Submit\").click();\n</code></pre> <ul> <li>Finds element by visible text.</li> <li>Useful if ID or class is not available.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-click-by-role-aria","title":"c) Click by Role (ARIA)","text":"<pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\")).click();\n</code></pre> <ul> <li>Uses accessibility info (semantic role).</li> <li>Very stable; less likely to break if HTML changes.</li> <li>Recommended for modern accessible web apps.</li> </ul>"},{"location":"playwright-Java/screenshot/","title":"Java Playwright \u2013 Screenshots &amp; Videos Examples","text":"<p>This guide explains how to handle Screenshots and Videos in Java Playwright with practical code examples.</p>"},{"location":"playwright-Java/screenshot/#screenshots-in-playwright","title":"\ud83d\udcf8 Screenshots in Playwright","text":""},{"location":"playwright-Java/screenshot/#full-page-screenshot","title":"\u2705 Full Page Screenshot","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class FullPageScreenshot {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Capture full page screenshot\n            page.screenshot(new Page.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\fullpage.png\"))\n                .setFullPage(true));\n\n            System.out.println(\"\u2705 Full page screenshot captured\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#element-screenshot","title":"\u2705 Element Screenshot","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class ElementScreenshot {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Take screenshot of a specific element\n            Locator heading = page.locator(\"h1\");\n            heading.screenshot(new Locator.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\element.png\")));\n\n            System.out.println(\"\u2705 Element screenshot captured\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#screenshot-after-assertion","title":"\u2705 Screenshot After Assertion","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class ScreenshotWithAssertion {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Assertion\n            String title = page.title();\n            assert title.contains(\"Example\");\n\n            // Capture screenshot after validation\n            page.screenshot(new Page.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\assertion.png\")));\n\n            System.out.println(\"\u2705 Screenshot captured after assertion\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#videos-in-playwright","title":"\ud83c\udfa5 Videos in Playwright","text":""},{"location":"playwright-Java/screenshot/#record-video-for-a-single-page","title":"\u2705 Record Video for a Single Page","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class RecordVideoExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n\n            // Enable video recording when creating context\n            BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n                .setRecordVideoDir(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\videos\"))\n                .setRecordVideoSize(1280, 720));\n\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n            page.click(\"a\"); // some action\n\n            // Close context to ensure video is saved\n            context.close();\n\n            System.out.println(\"\u2705 Video recorded and saved\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#record-video-for-each-test-dynamic-naming","title":"\u2705 Record Video for Each Test (Dynamic Naming)","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class RecordVideoDynamicName {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n\n            // Set folder where videos will be stored\n            BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n                .setRecordVideoDir(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\videos\"))\n                .setRecordVideoSize(1920, 1080));\n\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n\n            // Perform some actions\n            page.click(\"a\");\n\n            // Retrieve video path after context closes\n            context.close();\n\n            for (Page p : context.pages()) {\n                System.out.println(\"Video Path: \" + p.video().path());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#key-notes","title":"\ud83d\udccc Key Notes","text":"<ul> <li>Screenshots:</li> <li>Use <code>page.screenshot()</code> for full page.</li> <li>Use <code>locator.screenshot()</code> for specific elements.</li> <li> <p>Can be combined with assertions for debugging.</p> </li> <li> <p>Videos:</p> </li> <li>Videos are recorded at the context level (not page level).</li> <li>Use <code>setRecordVideoDir()</code> to specify folder for saving videos.</li> <li>Close the context (<code>context.close()</code>) to ensure videos are written to disk.</li> <li>Use <code>p.video().path()</code> to get the file path of the recorded video.</li> </ul> <p>\u2705 This covers Full Page Screenshots, Element Screenshots, Assertion-based Screenshots, and Video Recording Scenarios in Java Playwright.</p>"}]}