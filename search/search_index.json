{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to JavaScript &amp; Playwright with java Docs","text":"<p>This documentation site contains tutorials, examples, and references for JavaScript concepts and Playwright automation with java.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Click on a topic in the navigation sidebar.</li> <li>Follow the examples and code snippets.</li> <li>Use this documentation as a reference for coding interviews and automation projects.</li> </ol> <p>\ud83d\ude80 Happy Learning! Keep practicing and building your JavaScript and Playwright Automation with Java skills.</p>"},{"location":"javascriptConcepts/Arrays/","title":"6. Arrays &amp; Objects in JavaScript \u2013 Deep Dive","text":"<p>Arrays and objects are fundamental data structures in JavaScript used to store collections of data.</p> <p>This guide covers arrays, objects, basic operations, and common interview programs.</p>"},{"location":"javascriptConcepts/Arrays/#arrays","title":"\ud83d\udd39 Arrays","text":"<p>Arrays store multiple values in an ordered list.</p>"},{"location":"javascriptConcepts/Arrays/#creating-arrays","title":"Creating Arrays","text":"<pre><code>let numbers = [1, 2, 3, 4, 5];\nlet fruits = [\"apple\", \"banana\", \"mango\"];\nlet mixed = [1, \"apple\", true, 'c']; // mixed data types\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-elements","title":"Accessing Elements","text":"<pre><code>console.log(numbers[0]); // 1\nconsole.log(fruits[2]);  // mango\nconsole.log(mixed[1]);   // apple\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#array-length","title":"Array Length","text":"<pre><code>console.log(numbers.length); // 5\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-elements","title":"Adding Elements","text":"<pre><code>numbers.push(6);   // add at end\nnumbers.unshift(0); // add at beginning\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#removing-elements","title":"Removing Elements","text":"<pre><code>numbers.pop();    // remove last\nnumbers.shift();  // remove first\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-an-array","title":"Iterating Over an Array","text":"<pre><code>let arr = [10, 20, 30, 40];\n\n// Using for loop\nfor(let i = 0; i &lt; arr.length; i++) {\n  console.log(arr[i]);\n}\n\n// Using for...of loop\nfor(let value of arr) {\n  console.log(value);\n}\n\n// Using forEach\narr.forEach(value =&gt; console.log(value));\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#common-array-programs-interview-questions","title":"\ud83d\udd39 Common Array Programs (Interview Questions)","text":""},{"location":"javascriptConcepts/Arrays/#1-reverse-an-array","title":"1. Reverse an Array","text":"<pre><code>let arr = [1, 2, 3, 4, 5];\narr.reverse();\nconsole.log(arr); // [5,4,3,2,1]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#2-find-maximum-minimum","title":"2. Find Maximum &amp; Minimum","text":"<pre><code>let arr = [5, 12, 7, 1, 19];\nlet max = Math.max(...arr);\nlet min = Math.min(...arr);\nconsole.log(max); // 19\nconsole.log(min); // 1\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#3-sum-of-array-elements","title":"3. Sum of Array Elements","text":"<pre><code>let arr = [1,2,3,4,5];\nlet sum = arr.reduce((acc, val) =&gt; acc + val, 0);\nconsole.log(sum); // 15\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#4-find-average-of-array","title":"4. Find Average of Array","text":"<pre><code>let arr = [10,20,30,40];\nlet avg = arr.reduce((a,b) =&gt; a+b,0)/arr.length;\nconsole.log(avg); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#5-find-even-and-odd-numbers","title":"5. Find Even and Odd Numbers","text":"<pre><code>let arr = [1,2,3,4,5,6];\nlet even = arr.filter(x =&gt; x % 2 === 0);\nlet odd = arr.filter(x =&gt; x % 2 !== 0);\nconsole.log(even); // [2,4,6]\nconsole.log(odd);  // [1,3,5]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#6-sort-array","title":"6. Sort Array","text":"<pre><code>let arr = [5,1,8,3];\narr.sort((a,b) =&gt; a-b);\nconsole.log(arr); // [1,3,5,8]\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#7-find-string-with-max-and-min-length","title":"7. Find String with Max and Min Length","text":"<pre><code>let fruits = [\"apple\", \"banana\", \"kiwi\", \"mango\"];\nlet maxLen = fruits.reduce((a,b) =&gt; a.length &gt;= b.length ? a : b);\nlet minLen = fruits.reduce((a,b) =&gt; a.length &lt;= b.length ? a : b);\nconsole.log(maxLen); // banana\nconsole.log(minLen); // kiwi\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#objects","title":"\ud83d\udd39 Objects","text":"<p>Objects store data in key-value pairs.</p>"},{"location":"javascriptConcepts/Arrays/#creating-objects","title":"Creating Objects","text":"<pre><code>let person = {\n  name: \"Nitin\",\n  age: 25,\n  city: \"Mumbai\"\n};\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#accessing-properties","title":"Accessing Properties","text":"<pre><code>console.log(person.name);  // Nitin\nconsole.log(person['age']); // 25\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#adding-updating-properties","title":"Adding &amp; Updating Properties","text":"<pre><code>person.country = \"India\"; // add\nperson.age = 26;            // update\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#deleting-properties","title":"Deleting Properties","text":"<pre><code>delete person.city;\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#iterating-over-object","title":"Iterating Over Object","text":"<pre><code>for (let key in person) {\n  console.log(key, person[key]);\n}\n</code></pre>"},{"location":"javascriptConcepts/Arrays/#summary","title":"\u2705 Summary","text":"<ul> <li>Arrays \u2192 Ordered collection of items, methods: push, pop, shift, unshift, reverse, sort, filter, reduce. Can contain mixed data types.</li> <li>Objects \u2192 Key-value storage, access via dot or bracket notation, dynamic addition/deletion, iteration with <code>for...in</code>.</li> <li>Common Interview Programs \u2192 Reverse array, max/min, sum, average, even/odd numbers, string with max/min length.</li> <li>Iteration \u2192 for loop, for...of loop, forEach method.</li> </ul> <p>These are essential for coding interviews, JavaScript development, and Playwright automation.</p>"},{"location":"javascriptConcepts/dataTypes/","title":"5. Data Types in JavaScript \u2013 Deep Dive","text":"<p>JavaScript has different types of data used to store values and perform operations. Understanding data types is crucial for writing efficient code.</p> <p>This guide covers primitive types, non-primitive types, type checking, and common interview programs.</p>"},{"location":"javascriptConcepts/dataTypes/#primitive-data-types","title":"\ud83d\udd39 Primitive Data Types","text":"<p>Primitive data types are immutable and include:</p> <ol> <li>Number \u2013 Numeric values</li> <li>String \u2013 Sequence of characters</li> <li>Boolean \u2013 true or false</li> <li>Undefined \u2013 Variable declared but not assigned</li> <li>Null \u2013 Intentionally empty value</li> <li>Symbol \u2013 Unique and immutable value</li> <li>BigInt \u2013 Large integer values</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples","title":"Examples","text":"<pre><code>// Number\nlet age = 25;\n\n// String\nlet name = \"Nitin\";\n\n// Boolean\nlet isActive = true;\n\n// Undefined\nlet city;\n\n// Null\nlet country = null;\n\n// Symbol\nlet sym = Symbol('id');\n\n// BigInt\nlet bigNumber = 123456789012345678901234567890n;\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types","title":"Checking Data Types","text":"<pre><code>console.log(typeof age);       // number\nconsole.log(typeof name);      // string\nconsole.log(typeof isActive);  // boolean\nconsole.log(typeof city);      // undefined\nconsole.log(typeof country);   // object (this is a known JS quirk)\nconsole.log(typeof sym);       // symbol\nconsole.log(typeof bigNumber); // bigint\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#non-primitive-data-types","title":"\ud83d\udd39 Non-Primitive Data Types","text":"<p>Non-primitive types are mutable and include:</p> <ol> <li>Object \u2013 Key-value pairs</li> <li>Array \u2013 Ordered collection (special type of object)</li> <li>Function \u2013 Callable objects</li> </ol>"},{"location":"javascriptConcepts/dataTypes/#examples_1","title":"Examples","text":"<pre><code>// Object\nlet person = { name: \"Nitin\", age: 25 };\n\n// Array\nlet fruits = [\"apple\", \"banana\", \"mango\"];\n\n// Function\nfunction greet() {\n  console.log(\"Hello\");\n}\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#checking-data-types_1","title":"Checking Data Types","text":"<pre><code>console.log(typeof person); // object\nconsole.log(typeof fruits); // object\nconsole.log(typeof greet);  // function\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#type-conversion","title":"\ud83d\udd39 Type Conversion","text":"<p>JavaScript allows explicit and implicit type conversions.</p>"},{"location":"javascriptConcepts/dataTypes/#implicit-conversion","title":"Implicit Conversion","text":"<pre><code>let result = '5' + 5; // '55' (number converted to string)\nconsole.log(result);\n\nlet value = '10' - 2; // 8 (string converted to number)\nconsole.log(value);\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#explicit-conversion","title":"Explicit Conversion","text":"<pre><code>let str = String(123); // '123'\nlet num = Number('456'); // 456\nlet bool = Boolean(0);    // false\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#common-interview-programs","title":"\ud83d\udd39 Common Interview Programs","text":""},{"location":"javascriptConcepts/dataTypes/#1-check-if-variable-is-array","title":"1. Check if Variable is Array","text":"<pre><code>let arr = [1,2,3];\nconsole.log(Array.isArray(arr)); // true\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#2-convert-string-to-number","title":"2. Convert String to Number","text":"<pre><code>let str = '123';\nlet num = Number(str);\nconsole.log(num); // 123\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#3-convert-number-to-string","title":"3. Convert Number to String","text":"<pre><code>let num = 456;\nlet str = String(num);\nconsole.log(str); // '456'\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#4-check-data-type","title":"4. Check Data Type","text":"<pre><code>let value = true;\nconsole.log(typeof value); // boolean\n</code></pre>"},{"location":"javascriptConcepts/dataTypes/#summary","title":"\u2705 Summary","text":"<ul> <li>Primitive types \u2192 number, string, boolean, undefined, null, symbol, bigint. Immutable.</li> <li>Non-primitive types \u2192 object, array, function. Mutable.</li> <li>Type checking \u2192 <code>typeof</code>, <code>Array.isArray()</code>.</li> <li>Type conversion \u2192 Implicit (coercion) and explicit (String(), Number(), Boolean()).</li> </ul> <p>Understanding data types is fundamental for JavaScript development, debugging, and coding interviews.</p>"},{"location":"javascriptConcepts/flow-statement/","title":"4. Control Flow in JavaScript \u2013 Deep Dive","text":"<p>Control flow determines the order in which code executes. JavaScript provides control flow statements like if...else, switch, loops (for, while, do...while), break/continue.  </p>"},{"location":"javascriptConcepts/flow-statement/#if-statement","title":"\ud83d\udd39 <code>if</code> Statement","text":"<p>Executes a block of code if a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax","title":"Syntax","text":"<pre><code>if (condition) {\n  // code to run if condition is true\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-if","title":"Example \u2013 <code>if</code>","text":"<pre><code>let score = 85;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n}\n</code></pre> <p>Playwright Use Case: Check if an element exists before performing an action.</p>"},{"location":"javascriptConcepts/flow-statement/#ifelse-statement","title":"\ud83d\udd39 <code>if...else</code> Statement","text":"<p>Executes one block if condition is true, another if false.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_1","title":"Syntax","text":"<pre><code>if (condition) {\n  // code if true\n} else {\n  // code if false\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse","title":"Example \u2013 <code>if...else</code>","text":"<pre><code>let score = 40;\n\nif (score &gt;= 50) {\n  console.log(\"Pass\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#ifelse-ifelse-statement","title":"\ud83d\udd39 <code>if...else if...else</code> Statement","text":"<p>Used when multiple conditions need to be checked sequentially.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_2","title":"Syntax","text":"<pre><code>if (condition1) {\n  // code1\n} else if (condition2) {\n  // code2\n} else {\n  // default code\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-ifelse-ifelse","title":"Example \u2013 <code>if...else if...else</code>","text":"<pre><code>let marks = 75;\n\nif (marks &gt;= 90) {\n  console.log(\"Grade A\");\n} else if (marks &gt;= 75) {\n  console.log(\"Grade B\");\n} else if (marks &gt;= 50) {\n  console.log(\"Grade C\");\n} else {\n  console.log(\"Fail\");\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#switch-statement","title":"\ud83d\udd39 <code>switch</code> Statement","text":"<p>An alternative to multiple <code>if...else if</code> conditions.  </p>"},{"location":"javascriptConcepts/flow-statement/#syntax_3","title":"Syntax","text":"<pre><code>switch(expression) {\n  case value1:\n    // code\n    break;\n  case value2:\n    // code\n    break;\n  default:\n    // code if no case matches\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-switch","title":"Example \u2013 <code>switch</code>","text":"<pre><code>let day = 3;\n\nswitch(day) {\n  case 1:\n    console.log(\"Monday\");\n    break;\n  case 2:\n    console.log(\"Tuesday\");\n    break;\n  case 3:\n    console.log(\"Wednesday\");\n    break;\n  default:\n    console.log(\"Another day\");\n}\n</code></pre> <p>Playwright Use Case: Decide which browser or test scenario to run based on a config variable.</p>"},{"location":"javascriptConcepts/flow-statement/#for-loop","title":"\ud83d\udd39 <code>for</code> Loop","text":"<p>Repeats a block of code a fixed number of times.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_4","title":"Syntax","text":"<pre><code>for (initialization; condition; increment) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-for","title":"Example \u2013 <code>for</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  console.log(\"Count:\", i);\n}\n</code></pre> <p>Playwright Use Case: Iterate through a list of elements to perform actions like click or validate text.</p>"},{"location":"javascriptConcepts/flow-statement/#while-loop","title":"\ud83d\udd39 <code>while</code> Loop","text":"<p>Repeats as long as a condition is true.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_5","title":"Syntax","text":"<pre><code>while (condition) {\n  // code block\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-while","title":"Example \u2013 <code>while</code>","text":"<pre><code>let i = 1;\nwhile (i &lt;= 5) {\n  console.log(\"Count:\", i);\n  i++;\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#dowhile-loop","title":"\ud83d\udd39 <code>do...while</code> Loop","text":"<p>Executes the code block at least once, then checks the condition.</p>"},{"location":"javascriptConcepts/flow-statement/#syntax_6","title":"Syntax","text":"<pre><code>do {\n  // code block\n} while (condition);\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#example-dowhile","title":"Example \u2013 <code>do...while</code>","text":"<pre><code>let i = 6;\ndo {\n  console.log(\"Count:\", i);\n  i++;\n} while (i &lt;= 5);  // runs once even though condition is false\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#break-and-continue","title":"\ud83d\udd39 <code>break</code> and <code>continue</code>","text":"<p>JavaScript <code>break</code> and <code>continue</code> work the same way as in Java. - <code>break</code> \u2192 exits the loop immediately - <code>continue</code> \u2192 skips the current iteration and moves to next</p>"},{"location":"javascriptConcepts/flow-statement/#example-break-continue","title":"Example \u2013 <code>break</code> &amp; <code>continue</code>","text":"<pre><code>for (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) break;      // stops loop at 3\n  console.log(i);\n}\n\nfor (let i = 1; i &lt;= 5; i++) {\n  if (i === 3) continue;   // skips 3\n  console.log(i);\n}\n</code></pre> <p>Java Example (for comparison)</p> <pre><code>for (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) break; // exits loop at 3\n    System.out.println(i);\n}\n\nfor (int i = 1; i &lt;= 5; i++) {\n    if (i == 3) continue; // skips 3\n    System.out.println(i);\n}\n</code></pre>"},{"location":"javascriptConcepts/flow-statement/#summary","title":"\u2705 Summary","text":"<ul> <li>Conditional Statements: <code>if</code>, <code>if...else</code>, <code>if...else if...else</code>, <code>switch</code> </li> <li>Loops: <code>for</code>, <code>while</code>, <code>do...while</code> </li> <li>Loop Control: <code>break</code>, <code>continue</code> </li> </ul> <p>These control flow statements are essential for decision-making and iteration in JavaScript and Playwright tests.</p>"},{"location":"javascriptConcepts/functions/","title":"5. Functions in JavaScript \u2013 Basics","text":"<p>Functions in JavaScript are reusable blocks of code that perform a specific task. They help organize code, reduce repetition, and return values.</p> <p>This guide covers how to create functions, call them, pass parameters, return values (int, list/array), and basic usage.</p>"},{"location":"javascriptConcepts/functions/#function-declaration","title":"\ud83d\udd39 Function Declaration","text":"<p>A standard way to define a named function.</p>"},{"location":"javascriptConcepts/functions/#syntax","title":"Syntax","text":"<pre><code>function functionName(parameters) {\n  // code\n  return result;\n}\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-add-two-numbers","title":"Example \u2013 Add two numbers","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet sum = add(5, 3);\nconsole.log(sum); // 8\n</code></pre> <p>Playwright Use Case: Reusable function to click buttons or fill forms.</p>"},{"location":"javascriptConcepts/functions/#function-expression","title":"\ud83d\udd39 Function Expression","text":"<p>Assign a function to a variable. Can be anonymous.</p>"},{"location":"javascriptConcepts/functions/#syntax_1","title":"Syntax","text":"<pre><code>const functionName = function(parameters) {\n  // code\n  return result;\n};\n</code></pre>"},{"location":"javascriptConcepts/functions/#example-multiply-two-numbers","title":"Example \u2013 Multiply two numbers","text":"<pre><code>const multiply = function(a, b) {\n  return a * b;\n};\n\nconsole.log(multiply(4, 5)); // 20\n</code></pre> <p>Note: You can also create the same function using a function declaration as shown below. Both are valid.</p>"},{"location":"javascriptConcepts/functions/#example-function-declaration-vs-function-expression","title":"Example \u2013 Function Declaration vs Function Expression","text":"<pre><code>// Function Declaration\nfunction multiplyDecl(a, b) {\n  return a * b;\n}\nconsole.log(multiplyDecl(4, 5)); // 20\n\n// Function Expression\nconst multiplyExpr = function(a, b) {\n  return a * b;\n};\nconsole.log(multiplyExpr(4, 5)); // 20\n</code></pre> <p>Key Difference: - Function Declarations are hoisted \u2192 can be called before definition. - Function Expressions are not hoisted \u2192 cannot be called before definition.</p>"},{"location":"javascriptConcepts/functions/#function-with-no-parameters","title":"\ud83d\udd39 Function with No Parameters","text":"<pre><code>function greet() {\n  console.log(\"Hello!\");\n}\n\ngreet(); // Hello!\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-integer","title":"\ud83d\udd39 Function Returning Integer","text":"<pre><code>function square(x) {\n  return x * x;\n}\n\nlet result = square(6);\nconsole.log(result); // 36\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-returning-arraylist","title":"\ud83d\udd39 Function Returning Array/List","text":"<pre><code>function createList() {\n  return [1, 2, 3, 4, 5];\n}\n\nlet numbers = createList();\nconsole.log(numbers); // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"javascriptConcepts/functions/#function-with-default-parameters","title":"\ud83d\udd39 Function with Default Parameters","text":"<pre><code>function greet(name = \"Guest\") {\n  console.log(`Hello, ${name}!`);\n}\n\ngreet(\"Nitin\"); // Hello, Nitin!\ngreet();         // Hello, Guest!\n</code></pre>"},{"location":"javascriptConcepts/functions/#calling-a-function","title":"\ud83d\udd39 Calling a Function","text":"<ul> <li>Use the function name followed by parentheses: <code>functionName()</code></li> <li>Pass arguments inside parentheses if needed: <code>functionName(arg1, arg2)</code></li> </ul>"},{"location":"javascriptConcepts/functions/#example","title":"Example","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet result = add(10, 20);\nconsole.log(result); // 30\n</code></pre>"},{"location":"javascriptConcepts/functions/#summary","title":"\u2705 Summary","text":"<ul> <li>Function Declaration: Named, hoisted, reusable.</li> <li>Function Expression: Anonymous or named, assigned to a variable.</li> <li>Call a function: <code>functionName()</code></li> <li>Return values: Can return integers, arrays, or other data types.</li> <li>Default parameters: Provide fallback values.</li> <li>Hoisting: Declarations are hoisted, expressions are not.</li> </ul> <p>Functions are fundamental building blocks for organizing and reusing code in JavaScript.</p>"},{"location":"javascriptConcepts/operator/","title":"3. Operators in JavaScript \u2013 Deep Dive","text":"<p>JavaScript provides a variety of operators to perform operations on values and variables. Operators can be categorized as Arithmetic, Assignment, Comparison, Logical, Bitwise, and Ternary.  </p>"},{"location":"javascriptConcepts/operator/#arithmetic-operators","title":"\ud83d\udd39 Arithmetic Operators","text":"<p>Used to perform mathematical operations.</p> Operator Description <code>+</code> Addition <code>-</code> Subtraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulus (remainder) <code>**</code> Exponentiation <code>++</code> Increment <code>--</code> Decrement"},{"location":"javascriptConcepts/operator/#examples-arithmetic","title":"Examples \u2013 Arithmetic","text":"<pre><code>let a = 10;\nlet b = 3;\n\nconsole.log(a + b);  // 13\nconsole.log(a - b);  // 7\nconsole.log(a * b);  // 30\nconsole.log(a / b);  // 3.3333\nconsole.log(a % b);  // 1\nconsole.log(a ** 2); // 100\n\na++;\nconsole.log(a);      // 11\nb--;\nconsole.log(b);      // 2\n</code></pre> <p>Playwright Use Case: Calculating dynamic index for lists of elements or iterations.</p>"},{"location":"javascriptConcepts/operator/#assignment-operators","title":"\ud83d\udd39 Assignment Operators","text":"<p>Used to assign values to variables.</p> Operator Description <code>=</code> Assign <code>+=</code> Add and assign <code>-=</code> Subtract and assign <code>*=</code> Multiply and assign <code>/=</code> Divide and assign <code>%=</code> Modulus and assign"},{"location":"javascriptConcepts/operator/#examples-assignment","title":"Examples \u2013 Assignment","text":"<pre><code>let x = 5;\nx += 3;  // x = x + 3\nconsole.log(x); // 8\n\nx *= 2;  // x = x * 2\nconsole.log(x); // 16\n</code></pre>"},{"location":"javascriptConcepts/operator/#comparison-operators","title":"\ud83d\udd39 Comparison Operators","text":"<p>Used to compare values, return <code>true</code> or <code>false</code>.</p> Operator Description <code>==</code> Equal (value only) <code>===</code> Strict equal (value + type) <code>!=</code> Not equal <code>!==</code> Strict not equal <code>&gt;</code> Greater than <code>&lt;</code> Less than <code>&gt;=</code> Greater or equal <code>&lt;=</code> Less or equal"},{"location":"javascriptConcepts/operator/#examples-comparison","title":"Examples \u2013 Comparison","text":"<pre><code>let a = 5;\nlet b = \"5\";\n\nconsole.log(a == b);  // true (value equal)\nconsole.log(a === b); // false (type mismatch)\nconsole.log(a != b);  // false\nconsole.log(a !== b); // true\nconsole.log(a &gt; 3);   // true\nconsole.log(a &lt;= 5);  // true\n</code></pre> <p>Playwright Use Case: Assertions for element counts, text lengths, or response values.</p>"},{"location":"javascriptConcepts/operator/#logical-operators","title":"\ud83d\udd39 Logical Operators","text":"<p>Used to combine boolean expressions.</p> Operator Description <code>&amp;&amp;</code> AND <code>||</code> OR <code>!</code> NOT"},{"location":"javascriptConcepts/operator/#examples-logical","title":"Examples \u2013 Logical","text":"<pre><code>let isLoggedIn = true;\nlet hasAccess = false;\n\nconsole.log(isLoggedIn &amp;&amp; hasAccess); // false\nconsole.log(isLoggedIn || hasAccess); // true\nconsole.log(!isLoggedIn);             // false\n</code></pre> <p>Playwright Use Case: Conditional checks before clicking or filling fields.</p>"},{"location":"javascriptConcepts/operator/#ternary-operator","title":"\ud83d\udd39 Ternary Operator","text":"<p>A shorthand for <code>if...else</code> statements.</p>"},{"location":"javascriptConcepts/operator/#syntax","title":"Syntax","text":"<pre><code>condition ? expression_if_true : expression_if_false;\n</code></pre>"},{"location":"javascriptConcepts/operator/#examples-ternary","title":"Examples \u2013 Ternary","text":"<pre><code>let age = 18;\nlet message = age &gt;= 18 ? \"Adult\" : \"Minor\";\nconsole.log(message); // \"Adult\"\n</code></pre> <p>Playwright Use Case: Quick decision-making for optional actions, like filling optional forms.</p>"},{"location":"javascriptConcepts/operator/#bitwise-operators","title":"\ud83d\udd39 Bitwise Operators","text":"<p>Operate on binary representations of numbers. Rarely used in Playwright but good to know.</p> Operator Description <code>&amp;</code> AND <code>|</code> OR <code>^</code> XOR <code>~</code> NOT <code>&lt;&lt;</code> Left shift <code>&gt;&gt;</code> Right shift <code>&gt;&gt;&gt;</code> Zero-fill right shift"},{"location":"javascriptConcepts/operator/#examples-bitwise","title":"Examples \u2013 Bitwise","text":"<pre><code>let a = 5;  // 0101\nlet b = 3;  // 0011\n\nconsole.log(a &amp; b); // 1  (0001)\nconsole.log(a | b); // 7  (0111)\nconsole.log(a ^ b); // 6  (0110)\nconsole.log(~a);    // -6\n</code></pre>"},{"location":"javascriptConcepts/operator/#summary","title":"\u2705 Summary","text":"<ul> <li>Arithmetic \u2192 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>++</code>, <code>--</code>, <code>**</code> </li> <li>Assignment \u2192 <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> </li> <li>Comparison \u2192 <code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> </li> <li>Logical \u2192 <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> </li> <li>Ternary \u2192 <code>condition ? expr1 : expr2</code> </li> <li>Bitwise \u2192 <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code> </li> </ul> <p>These operators are essential for calculations, validations, and conditional logic in Playwright tests.</p>"},{"location":"javascriptConcepts/variables/","title":"2. Variables (var, let, const) \u2013 Deep Dive","text":"<p>JavaScript provides three ways to declare variables: <code>var</code>, <code>let</code>, and <code>const</code>. While all can store values, they differ in scope, re-declaration rules, hoisting behavior, and mutability.  </p>"},{"location":"javascriptConcepts/variables/#var","title":"\ud83d\udd39 var","text":"<ul> <li>Function-scoped: A <code>var</code> declared inside a function is available throughout the function.  </li> <li>Ignores block scope: Declaring inside <code>if</code>, <code>for</code>, or <code>{}</code> does not limit its scope.  </li> <li>Hoisted: Moved to the top of the scope during compilation, initialized with <code>undefined</code>.  </li> <li>Allows re-declaration: You can declare the same variable again in the same scope (not recommended).  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-var-inside-block","title":"Example \u2013 var inside block","text":"<pre><code>if (true) {\n  var x = \"Hello\";\n}\nconsole.log(x); // \u2705 Accessible outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-var-inside-function","title":"Example \u2013 var inside function","text":"<pre><code>function testVar() {\n  if (true) {\n    var inside = \"Function scope\";\n  }\n  console.log(inside); // \u2705 Accessible anywhere inside the function\n}\ntestVar();\nconsole.log(typeof inside); // \u274c undefined globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-global-var-usage","title":"Example \u2013 global var usage","text":"<pre><code>var globalVar = \"I am global\";\n\nfunction showGlobal() {\n  console.log(globalVar); // \u2705 Accessible inside function\n}\n\nshowGlobal();\nconsole.log(globalVar); // \u2705 Accessible globally\n</code></pre>"},{"location":"javascriptConcepts/variables/#let","title":"\ud83d\udd39 let","text":"<ul> <li>Block-scoped: Respects <code>{}</code> blocks like if, for, while.  </li> <li>No re-declaration: Cannot be declared twice in the same scope.  </li> <li>Hoisted but uninitialized: Exists in the Temporal Dead Zone (TDZ) until execution reaches its line.  </li> <li>Reassignment allowed.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-let-inside-block","title":"Example \u2013 let inside block","text":"<pre><code>if (true) {\n  let y = \"Inside block\";\n  console.log(y); // \u2705 Accessible here\n}\n// console.log(y); // \u274c ReferenceError outside block\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-let-reassignment","title":"Example \u2013 let reassignment","text":"<pre><code>let age = 25;\nage = 30; // \u2705 Reassignment allowed\n// let age = 35; // \u274c Cannot redeclare in same scope\n</code></pre>"},{"location":"javascriptConcepts/variables/#const","title":"\ud83d\udd39 const","text":"<ul> <li>Block-scoped (like <code>let</code>).  </li> <li>Must be initialized at declaration.  </li> <li>Cannot be reassigned, but if it\u2019s an object/array, its contents can still be modified.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-const","title":"Example \u2013 const","text":"<pre><code>const country = \"India\";\n// country = \"USA\"; // \u274c Error: Cannot reassign\n\nconst obj = { name: \"Nitin\" };\nobj.name = \"Patil\"; // \u2705 Allowed (property changed)\nconsole.log(obj);   // { name: \"Patil\" }\n</code></pre>"},{"location":"javascriptConcepts/variables/#global-vs-local-with-var","title":"\ud83d\udd39 Global vs Local with var","text":"<ul> <li>Declaring a variable with <code>var</code> outside any function makes it global.  </li> <li>Reassigning it inside a function changes the global variable.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable instead of modifying it.  </li> </ul>"},{"location":"javascriptConcepts/variables/#example-reassignment-updates-global","title":"Example \u2013 Reassignment updates global","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction updateGlobal() {\n  name = \"Patil\";   // reassigns global\n}\nupdateGlobal();\nconsole.log(name);  // \u2705 Patil (global updated)\n</code></pre>"},{"location":"javascriptConcepts/variables/#example-shadowing-with-var","title":"Example \u2013 Shadowing with var","text":"<pre><code>var name = \"Nitin\";  // global\n\nfunction shadowGlobal() {\n  var name = \"Local\";  // new local variable\n  console.log(\"Inside:\", name); // Local\n}\nshadowGlobal();\nconsole.log(\"Outside:\", name);  // Nitin (global unchanged)\n</code></pre>"},{"location":"javascriptConcepts/variables/#summary","title":"\u2705 Summary","text":"<ul> <li><code>var</code> \u2192 function-scoped, hoisted, allows re-declaration, unsafe in blocks.  </li> <li><code>let</code> \u2192 block-scoped, safer, hoisted but uninitialized until line of code.  </li> <li><code>const</code> \u2192 block-scoped, must be initialized, immutable binding but mutable objects.  </li> <li>Global vars can be reassigned inside functions.  </li> <li>Re-declaring with <code>var</code> inside a function shadows the global variable.</li> </ul>"},{"location":"mysql/constrain/","title":"\ud83d\udea6 Why Do We Need Constraints?","text":"<p>Think of constraints as traffic rules for your database. - Without rules \u2192 cars can still move, but accidents happen. - With rules \u2192 movement is safe, organized, and predictable.  </p>"},{"location":"mysql/constrain/#example-tables-without-constraints","title":"\ud83d\uddc4\ufe0f Example Tables Without Constraints","text":""},{"location":"mysql/constrain/#1-without-constraints-messy-data","title":"1. Without Constraints (Messy Data)","text":""},{"location":"mysql/constrain/#students-table","title":"Students Table","text":"<pre><code>CREATE TABLE Students (\n    id INT,\n    firstname VARCHAR(50),\n    lastname VARCHAR(50),\n    address VARCHAR(100)\n);\n\nINSERT INTO Students (id, firstname, lastname, address) VALUES\n(1, 'Rahul', 'Sharma', 'Pune'),\n(1, 'Rahul', 'Sharma', 'Pune'),        -- Duplicate ID\n(2, 'Priya', 'Verma', 'Mumbai'),\n(3, NULL, 'Gupta', 'Delhi'),           -- Missing firstname\n(4, 'Sneha', 'Patil', 'Bangalore'),\n(5, 'Vikas', 'Kumar', 'Hyderabad'),\n(5, 'Vikas', 'Kumar', 'Hyderabad');    -- Duplicate ID\n</code></pre>"},{"location":"mysql/constrain/#marks-table","title":"Marks Table","text":"<pre><code>CREATE TABLE Marks (\n    student_id INT,\n    english INT,\n    math INT,\n    science INT,\n    total_marks INT\n);\n\nINSERT INTO Marks (student_id, english, math, science, total_marks) VALUES\n(1, 80, 90, 85, 255),\n(2, 70, 75, 88, 233),\n(100, 60, 65, 70, 195),                -- Orphan record\n(3, 120, 50, 60, 230),                 -- Invalid marks &gt; 100\n(4, NULL, 40, 50, 90),                 -- Missing marks\n(5, 88, 84, 91, 263),\n(5, 88, 84, 91, 263);                  -- Duplicate row\n</code></pre>"},{"location":"mysql/constrain/#sample-data-preview-messy","title":"Sample Data Preview (Messy)","text":"<p>Students Table</p> <pre><code>id | firstname | lastname | address\n---+-----------+----------+-----------\n1  | Rahul     | Sharma   | Pune\n1  | Rahul     | Sharma   | Pune       &lt;-- Duplicate\n2  | Priya     | Verma    | Mumbai\n3  | NULL      | Gupta    | Delhi      &lt;-- Missing firstname\n4  | Sneha     | Patil    | Bangalore\n5  | Vikas     | Kumar    | Hyderabad\n5  | Vikas     | Kumar    | Hyderabad  &lt;-- Duplicate\n</code></pre> <p>Marks Table</p> <pre><code>student_id | english | math | science | total_marks\n-----------+---------+------+---------+-------------\n1          | 80      | 90   | 85      | 255\n2          | 70      | 75   | 88      | 233\n100        | 60      | 65   | 70      | 195   &lt;-- Orphan\n3          | 120     | 50   | 60      | 230   &lt;-- Invalid marks\n4          | NULL    | 40   | 50      | 90    &lt;-- Missing marks\n5          | 88      | 84   | 91      | 263\n5          | 88      | 84   | 91      | 263   &lt;-- Duplicate\n</code></pre> <p>\u2705 These tables work fine, but without constraints problems can arise (duplicates, orphan records, missing data).  </p>"},{"location":"mysql/constrain/#1-primary-key","title":"1. PRIMARY KEY","text":"<p>\ud83d\udc49 Makes sure each row is unique and identifiable.  </p> <p>Without Primary Key</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (1, 'Rahul', 'Sharma', 'Pune');\n\nINSERT INTO Students (id, firstname, lastname, address)\nVALUES (1, 'AnotherRahul', 'Sharma', 'Pune'); -- Duplicate allowed\n</code></pre> <p>\u274c Now two students with same ID exist \u2192 confusion in reports.  </p> <p>With Primary Key</p> <pre><code>id INT PRIMARY KEY\n</code></pre> <p>\u2705 Database stops duplicate rows.  </p>"},{"location":"mysql/constrain/#2-foreign-key","title":"2. FOREIGN KEY","text":"<p>\ud83d\udc49 Ensures that a value in one table must exist in another.  </p> <p>Without Foreign Key</p> <pre><code>INSERT INTO Marks (student_id, english, math, science, total_marks)\nVALUES (100, 80, 90, 85, 255); -- Student 100 doesn't exist\n</code></pre> <p>\u274c Marks exist for a non-existent student (orphan record).  </p> <p>With Foreign Key</p> <pre><code>FOREIGN KEY (student_id) REFERENCES Students(id)\n</code></pre> <p>\u2705 Database prevents this.  </p>"},{"location":"mysql/constrain/#3-unique","title":"3. UNIQUE","text":"<p>\ud83d\udc49 Stops duplicate values in a column that should be unique (like email).  </p> <p>Without UNIQUE</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (7, 'Rohit', 'Sharma', 'Mumbai');\n\nINSERT INTO Students (id, firstname, lastname, address)\nVALUES (8, 'Rohit', 'Sharma', 'Mumbai'); -- Duplicate allowed\n</code></pre> <p>With UNIQUE</p> <pre><code>email VARCHAR(100) UNIQUE\n</code></pre> <p>\u2705 Database blocks duplicate emails.  </p>"},{"location":"mysql/constrain/#4-not-null","title":"4. NOT NULL","text":"<p>\ud83d\udc49 Ensures important data is not left blank.  </p> <p>Without NOT NULL</p> <pre><code>INSERT INTO Students (id, firstname, lastname, address)\nVALUES (9, NULL, 'Sharma', 'Delhi'); -- Allowed\n</code></pre> <p>\u274c Student without a name \u2192 makes no sense.  </p> <p>With NOT NULL</p> <pre><code>firstname VARCHAR(50) NOT NULL\n</code></pre> <p>\u2705 Database forces valid data.  </p>"},{"location":"mysql/constrain/#summary-in-easy-words","title":"\u2705 Summary in Easy Words","text":"<ul> <li>Primary Key \u2192 Every row should have a unique ID \u2192 No duplicates.  </li> <li>Foreign Key \u2192 Links two tables \u2192 No orphan data.  </li> <li>Unique \u2192 Prevents duplicate values.  </li> <li>Not Null \u2192 Some fields must always have a value.  </li> </ul> <p>\ud83d\udc49 Without constraints \u2192 data looks fine in the beginning but later causes duplicates, orphan rows, missing data, wrong ETL reports.</p>"},{"location":"mysql/ddl-commands/","title":"Data Definition Language (DDL) in SQL","text":""},{"location":"mysql/ddl-commands/#what-is-ddl","title":"\ud83d\udd39 What is DDL?","text":"<p>DDL commands are used to define, modify, and manage the structure of database objects (like tables, views, schemas, indexes).  </p> <p>These commands work at the schema level (structure), not on individual rows of data.  </p>"},{"location":"mysql/ddl-commands/#key-ddl-commands-in-depth","title":"\ud83d\udd39 Key DDL Commands (in depth)","text":""},{"location":"mysql/ddl-commands/#1-create","title":"1. CREATE","text":"<ul> <li>Used to create database objects such as tables, schemas, views, or indexes.  </li> <li>You must define the structure (columns, data types, constraints).  </li> </ul> <p>Example </p> <pre><code>CREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2) CHECK (Salary &gt; 0),\n    DepartmentID INT,\n    HireDate DATE DEFAULT CURRENT_DATE\n);\n</code></pre>"},{"location":"mysql/ddl-commands/#2-alter","title":"2. ALTER","text":"<ul> <li>Used to modify existing objects (add/remove/rename columns, change data types, add constraints).  </li> </ul> <p>Example </p> <pre><code>-- Add a new column\nALTER TABLE Employee ADD Age INT;\n\n-- Modify column type\nALTER TABLE Employee MODIFY Salary DECIMAL(12,2);\n\n-- Drop a column\nALTER TABLE Employee DROP COLUMN Age;\n\n-- Add a foreign key\nALTER TABLE Employee\nADD CONSTRAINT fk_dept FOREIGN KEY (DepartmentID) REFERENCES Department(DeptID);\n</code></pre>"},{"location":"mysql/ddl-commands/#3-drop","title":"3. DROP","text":"<ul> <li>Deletes a database object completely (table, view, database, index).  </li> <li>\u26a0\ufe0f Removes structure and all data.  </li> </ul> <p>Example </p> <pre><code>DROP TABLE Employee;\nDROP DATABASE HR;\n</code></pre>"},{"location":"mysql/ddl-commands/#4-truncate","title":"4. TRUNCATE","text":"<ul> <li>Removes all rows from a table, but keeps the structure.  </li> <li>Much faster than <code>DELETE</code> (no logging of each row).  </li> <li>Cannot be rolled back in some DBs.  </li> </ul> <p>Example </p> <pre><code>TRUNCATE TABLE Employee;\n</code></pre>"},{"location":"mysql/ddl-commands/#5-rename","title":"5. RENAME","text":"<ul> <li>Renames a database object (varies slightly across RDBMS).  </li> </ul> <p>Example (MySQL / Oracle)  </p> <pre><code>RENAME TABLE Employee TO Staff;\n</code></pre>"},{"location":"mysql/ddl-commands/#6-comment","title":"6. COMMENT","text":"<ul> <li>Add descriptions to database objects. (Supported in Oracle, PostgreSQL, etc.)  </li> </ul> <p>Example </p> <pre><code>COMMENT ON TABLE Employee IS 'Stores employee details';\nCOMMENT ON COLUMN Employee.Salary IS 'Monthly Salary in INR';\n</code></pre>"},{"location":"mysql/ddl-commands/#pros-cons-of-ddl","title":"\ud83d\udd39 Pros &amp; Cons of DDL","text":""},{"location":"mysql/ddl-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Schema Control \u2192 DDL provides strong control over database design (tables, keys, indexes).  </li> <li>Integrity Enforcement \u2192 Constraints (<code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>CHECK</code>) ensure data accuracy.  </li> <li>Performance \u2192 With indexes and partitions defined via DDL, queries become faster.  </li> <li>Automation Friendly \u2192 You can version-control DDL scripts for CI/CD pipelines.  </li> <li>Flexibility \u2192 Easily modify structures as business needs evolve.  </li> </ol>"},{"location":"mysql/ddl-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Destructive Nature </li> <li><code>DROP</code> and <code>TRUNCATE</code> permanently remove data (can\u2019t easily rollback).  </li> <li> <p>Small mistake \u2192 huge data loss.  </p> </li> <li> <p>Locking Issues </p> </li> <li> <p>Some DDL operations lock tables (no read/write allowed until completed).  </p> </li> <li> <p>Dependent Objects </p> </li> <li> <p>Dropping/altering tables can break views, stored procedures, or queries that depend on them.  </p> </li> <li> <p>Environment Differences </p> </li> <li> <p>Syntax varies across RDBMS (MySQL, Oracle, PostgreSQL). Example: <code>ALTER</code> column syntax differs.  </p> </li> <li> <p>Not Transaction-Safe (in some DBs) </p> </li> <li>In MySQL, some DDL operations auto-commit \u2192 cannot be rolled back.  </li> </ol>"},{"location":"mysql/ddl-commands/#advantages-explained-with-examples","title":"\ud83d\udd39 Advantages Explained with Examples","text":""},{"location":"mysql/ddl-commands/#1-schema-control","title":"1. Schema Control","text":"<p>DDL lets you define strong structures with relationships.</p> <pre><code>CREATE TABLE Department (\n    DeptID INT PRIMARY KEY,\n    DeptName VARCHAR(50) UNIQUE\n);\n\nCREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2),\n    DeptID INT,\n    FOREIGN KEY (DeptID) REFERENCES Department(DeptID)\n);\n</code></pre> <p>\ud83d\udc49 Employees must belong to a valid department.</p>"},{"location":"mysql/ddl-commands/#2-integrity-enforcement","title":"2. Integrity Enforcement","text":"<p>Constraints enforce data accuracy.</p> <pre><code>CREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(100) NOT NULL,\n    Salary DECIMAL(10,2) CHECK (Salary &gt; 0),\n    DeptID INT NOT NULL,\n    FOREIGN KEY (DeptID) REFERENCES Department(DeptID)\n);\n</code></pre> <p>\ud83d\udc49 Prevents negative salaries and missing departments.</p>"},{"location":"mysql/ddl-commands/#3-performance-indexes-partitions","title":"3. Performance (Indexes &amp; Partitions)","text":"<p>Indexes and partitions improve query speed.</p> <pre><code>-- Index for faster salary searches\nCREATE INDEX idx_salary ON Employee(Salary);\n\n-- Partition sales table by year\nCREATE TABLE Sales (\n    SaleID INT PRIMARY KEY,\n    SaleDate DATE,\n    Amount DECIMAL(10,2)\n)\nPARTITION BY RANGE (YEAR(SaleDate)) (\n    PARTITION p2023 VALUES LESS THAN (2024),\n    PARTITION p2024 VALUES LESS THAN (2025)\n);\n</code></pre> <p>\ud83d\udc49 Queries on salaries or specific years run faster.</p>"},{"location":"mysql/ddl-commands/#4-automation-friendly-cicd","title":"4. Automation Friendly (CI/CD)","text":"<p>DDL scripts can be stored and executed in deployments.</p> <pre><code>-- migration_v2.sql\nALTER TABLE Employee ADD COLUMN Email VARCHAR(100);\n</code></pre> <p>\ud83d\udc49 Keeps dev, test, and prod in sync automatically.</p>"},{"location":"mysql/ddl-commands/#5-flexibility-evolving-structures","title":"5. Flexibility (Evolving Structures)","text":"<p>Easily adapt schema to new business needs.</p> <pre><code>ALTER TABLE Employee ADD COLUMN PhoneNumber VARCHAR(15);\nALTER TABLE Employee RENAME COLUMN Name TO FullName;\n</code></pre> <p>\ud83d\udc49 Business changes are easily handled.</p>"},{"location":"mysql/ddl-commands/#summary-table","title":"\u2705 Summary Table","text":"Advantage What it Means Example Schema Control Strong control over tables, keys, relationships Employee \u2192 Department with foreign key Integrity Enforcement Constraints ensure only valid data CHECK (Salary &gt; 0), NOT NULL Performance Indexes &amp; partitions speed up queries <code>CREATE INDEX idx_salary</code> Automation Friendly DDL scripts can be versioned in Git &amp; run in CI/CD Migration scripts for deployments Flexibility Schema can evolve with business needs <code>ALTER TABLE Employee ADD PhoneNumber</code>"},{"location":"mysql/ddl-commands/#ddl-commands-feature-comparison","title":"\ud83d\udcca DDL Commands \u2013 Feature Comparison","text":"Command Rollback Possible Data Loss Structure Change Typical Use Case CREATE \u2705 Yes (before commit) \u274c No \u2705 Creates new object Create tables, views, indexes ALTER \u2705 Yes (before commit) \u274c No \u2705 Modifies structure Add/modify columns, constraints DROP \u2705 Yes (before commit) \u2705 Yes (all data lost) \u2705 Removes object completely Delete table/schema permanently TRUNCATE \u2705 Yes (before commit) \u2705 Yes (all rows deleted) \u274c No (structure remains) Quickly remove all records RENAME \u2705 Yes (before commit) \u274c No \u2705 Only name changes Rename table/column COMMENT \u2705 Yes (before commit) \u274c No \u274c No (metadata only) Add description to objects CREATE INDEX \u2705 Yes (before commit) \u274c No \u2705 Creates performance structure Improve query performance DROP INDEX \u2705 Yes (before commit) \u274c No (only index removed) \u2705 Removes performance structure Free up space, remove unused index"},{"location":"mysql/ddl-commands/#key-notes","title":"\ud83d\udd11 Key Notes","text":"<ul> <li>Rollback \u2192 Possible only until you <code>COMMIT</code> (some DBs auto-commit DDL, e.g., Oracle).  </li> <li>Data Loss \u2192 <code>DROP</code> &amp; <code>TRUNCATE</code> cause data removal; <code>ALTER</code>/<code>RENAME</code> don\u2019t.  </li> <li>Structure Change \u2192 All DDL affects schema except <code>COMMENT</code>.  </li> <li>Performance Impact \u2192 <code>TRUNCATE</code> is faster than <code>DELETE</code>; indexes speed queries but slow inserts/updates.  </li> </ul>"},{"location":"mysql/dml-commands/","title":"Data Manipulation Language (DML) in SQL","text":""},{"location":"mysql/dml-commands/#what-is-dml","title":"\ud83d\udd39 What is DML?","text":"<p>DML commands are used to manipulate and manage the data stored inside database tables. Unlike DDL, which defines the schema, DML works on the actual rows (records) inside the tables.</p>"},{"location":"mysql/dml-commands/#key-dml-commands-in-depth","title":"\ud83d\udd39 Key DML Commands (in depth)","text":""},{"location":"mysql/dml-commands/#1-insert","title":"1. INSERT","text":"<ul> <li>Adds new records into a table.</li> </ul> <pre><code>INSERT INTO Employee (EmpID, Name, Salary)\nVALUES (101, 'Amit Sharma', 55000.00);\n</code></pre>"},{"location":"mysql/dml-commands/#2-update","title":"2. UPDATE","text":"<ul> <li>Modifies existing records.</li> </ul> <pre><code>UPDATE Employee\nSET Salary = Salary + 5000\nWHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/dml-commands/#3-delete","title":"3. DELETE","text":"<ul> <li>Removes records from a table.</li> </ul> <pre><code>DELETE FROM Employee WHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/dml-commands/#4-merge-upsert","title":"4. MERGE (UPSERT)","text":"<ul> <li>Combines INSERT + UPDATE + DELETE in one.</li> </ul> <pre><code>MERGE INTO Employee AS E\nUSING NewEmployee AS N\nON (E.EmpID = N.EmpID)\nWHEN MATCHED THEN\n    UPDATE SET E.Salary = N.Salary\nWHEN NOT MATCHED THEN\n    INSERT (EmpID, Name, Salary) VALUES (N.EmpID, N.Name, N.Salary);\n</code></pre>"},{"location":"mysql/dml-commands/#pros-cons-of-dml","title":"\ud83d\udd39 Pros &amp; Cons of DML","text":""},{"location":"mysql/dml-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Direct Data Control \u2192 Can manipulate specific rows.  </li> <li>Flexible \u2192 SELECT with filters, joins, aggregations.  </li> <li>Transaction Safe \u2192 Rollback possible.  </li> <li>Granular \u2192 Row-level operations.</li> </ol>"},{"location":"mysql/dml-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Data Loss Risk \u2192 UPDATE/DELETE without WHERE affects all rows.  </li> <li>Performance Issues \u2192 Large queries slow performance.  </li> <li>Locking Problems \u2192 Concurrent transactions may cause locks.  </li> <li>Index Dependency \u2192 Without indexes, queries may be slow.</li> </ol>"},{"location":"mysql/dml-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage INSERT Add new records \u2705 Yes Add employee UPDATE Modify existing records \u2705 Yes Increase salary DELETE Remove records \u2705 Yes Delete inactive employee MERGE Insert/Update/Delete in one \u2705 Yes Sync staging &amp; prod data"},{"location":"mysql/dml-commands/#dml-commands-feature-comparison","title":"\ud83d\udcca DML Commands \u2013 Feature Comparison","text":"Command Rollback Data Loss Risk Structure Change Typical Use Case INSERT \u2705 Yes \u274c No \u274c No Add new data UPDATE \u2705 Yes \u26a0\ufe0f Yes \u274c No Modify existing data DELETE \u2705 Yes \u26a0\ufe0f Yes \u274c No Remove rows MERGE \u2705 Yes \u26a0\ufe0f Possible \u274c No Sync datasets efficiently"},{"location":"mysql/dql-commands/","title":"Data Query Language (DQL) in SQL","text":""},{"location":"mysql/dql-commands/#what-is-dql","title":"\ud83d\udd39 What is DQL?","text":"<p>DQL commands are used to retrieve data from database tables. It primarily deals with queries to fetch results.</p>"},{"location":"mysql/dql-commands/#key-dql-command","title":"\ud83d\udd39 Key DQL Command","text":""},{"location":"mysql/dql-commands/#1-select","title":"1. SELECT","text":"<ul> <li>Fetches data from tables with conditions, joins, and aggregations.</li> </ul> <pre><code>-- Get all employees\nSELECT * FROM Employee;\n\n-- Get employees with salary &gt; 50k\nSELECT Name, Salary FROM Employee WHERE Salary &gt; 50000;\n\n-- Aggregation\nSELECT DepartmentID, AVG(Salary) AS AvgSalary\nFROM Employee\nGROUP BY DepartmentID\nHAVING AVG(Salary) &gt; 50000;\n</code></pre>"},{"location":"mysql/dql-commands/#pros-cons-of-dql","title":"\ud83d\udd39 Pros &amp; Cons of DQL","text":""},{"location":"mysql/dql-commands/#pros","title":"\u2705 Pros","text":"<ol> <li>Powerful Retrieval \u2192 Fetch specific or aggregated data.  </li> <li>Flexible Queries \u2192 Supports joins, subqueries, aggregations.  </li> <li>Analytics Ready \u2192 Ideal for reporting.  </li> <li>Safe \u2192 Does not modify data (read-only).</li> </ol>"},{"location":"mysql/dql-commands/#cons","title":"\u274c Cons","text":"<ol> <li>Performance Impact \u2192 Complex queries may be slow.  </li> <li>Requires Indexes \u2192 To optimize performance.  </li> <li>Read-only \u2192 Cannot insert/update/delete.  </li> <li>Locks \u2192 Long-running queries can block resources.</li> </ol>"},{"location":"mysql/dql-commands/#summary-table","title":"\u2705 Summary Table","text":"Command Purpose Rollback Possible Example Usage SELECT Retrieve data (query) N/A Get employees"},{"location":"mysql/dql-commands/#dql-command-feature-comparison","title":"\ud83d\udcca DQL Command \u2013 Feature Comparison","text":"Command Rollback Data Loss Structure Change Typical Use Case SELECT N/A \u274c No \u274c No Fetch rows of data"},{"location":"mysql/sql-commands/","title":"SQL Commands: DDL, DML, DQL, TCL, DCL","text":""},{"location":"mysql/sql-commands/#types-of-sql-commands","title":"\ud83d\udccc Types of SQL Commands","text":"<p>SQL commands are divided into 5 main categories:  </p>"},{"location":"mysql/sql-commands/#1-ddl-data-definition-language","title":"1. DDL (Data Definition Language)","text":"<p>\ud83d\udc49 Used to define and manage the structure of the database (tables, schemas, indexes).  </p>"},{"location":"mysql/sql-commands/#commands","title":"Commands:","text":"<ul> <li><code>CREATE</code> \u2192 Create new objects (table, view, database, etc.)  </li> <li><code>ALTER</code> \u2192 Modify structure of existing objects  </li> <li><code>DROP</code> \u2192 Delete objects  </li> <li><code>TRUNCATE</code> \u2192 Remove all rows from a table (faster than DELETE, no rollback in some DBs)  </li> <li><code>COMMENT</code> \u2192 Add comments to schema objects  </li> <li><code>RENAME</code> \u2192 Rename objects  </li> </ul>"},{"location":"mysql/sql-commands/#example","title":"Example","text":"<pre><code>-- Create a new table\nCREATE TABLE Employee (\n    EmpID INT PRIMARY KEY,\n    Name VARCHAR(50),\n    Salary DECIMAL(10,2),\n    Department VARCHAR(30)\n);\n\n-- Alter the table\nALTER TABLE Employee ADD Age INT;\n\n-- Drop the table\nDROP TABLE Employee;\n\n-- Remove all records but keep structure\nTRUNCATE TABLE Employee;\n</code></pre>"},{"location":"mysql/sql-commands/#2-dml-data-manipulation-language","title":"2. DML (Data Manipulation Language)","text":"<p>\ud83d\udc49 Used to manage and modify the data inside tables.  </p>"},{"location":"mysql/sql-commands/#commands_1","title":"Commands:","text":"<ul> <li><code>INSERT</code> \u2192 Insert new records  </li> <li><code>UPDATE</code> \u2192 Modify existing records  </li> <li><code>DELETE</code> \u2192 Remove records  </li> <li><code>MERGE</code> (in some DBs) \u2192 Insert/Update simultaneously  </li> </ul>"},{"location":"mysql/sql-commands/#example_1","title":"Example","text":"<pre><code>-- Insert data\nINSERT INTO Employee (EmpID, Name, Salary, Department, Age)\nVALUES (101, 'John Doe', 55000, 'IT', 28);\n\n-- Update data\nUPDATE Employee\nSET Salary = 60000\nWHERE EmpID = 101;\n\n-- Delete a record\nDELETE FROM Employee WHERE EmpID = 101;\n</code></pre>"},{"location":"mysql/sql-commands/#3-dql-data-query-language","title":"3. DQL (Data Query Language)","text":"<p>\ud83d\udc49 Used to fetch/query data from database.  </p>"},{"location":"mysql/sql-commands/#command","title":"Command:","text":"<ul> <li><code>SELECT</code> </li> </ul>"},{"location":"mysql/sql-commands/#example_2","title":"Example","text":"<pre><code>-- Select all data\nSELECT * FROM Employee;\n\n-- Select specific columns\nSELECT Name, Salary FROM Employee;\n\n-- Select with condition\nSELECT * FROM Employee WHERE Department = 'IT';\n</code></pre>"},{"location":"mysql/sql-commands/#4-tcl-transaction-control-language","title":"4. TCL (Transaction Control Language)","text":"<p>\ud83d\udc49 Used to manage transactions (groups of SQL statements).  </p>"},{"location":"mysql/sql-commands/#commands_2","title":"Commands:","text":"<ul> <li><code>COMMIT</code> \u2192 Save changes permanently  </li> <li><code>ROLLBACK</code> \u2192 Undo changes  </li> <li><code>SAVEPOINT</code> \u2192 Set a point to rollback later  </li> <li><code>SET TRANSACTION</code> \u2192 Set transaction properties  </li> </ul>"},{"location":"mysql/sql-commands/#example_3","title":"Example","text":"<pre><code>BEGIN TRANSACTION;\n\nUPDATE Employee SET Salary = Salary + 5000 WHERE Department = 'IT';\n\n-- If everything is fine\nCOMMIT;\n\n-- If error, rollback\nROLLBACK;\n</code></pre>"},{"location":"mysql/sql-commands/#5-dcl-data-control-language","title":"5. DCL (Data Control Language)","text":"<p>\ud83d\udc49 Used to control access (security/permissions).  </p>"},{"location":"mysql/sql-commands/#commands_3","title":"Commands:","text":"<ul> <li><code>GRANT</code> \u2192 Give permissions  </li> <li><code>REVOKE</code> \u2192 Take back permissions  </li> </ul>"},{"location":"mysql/sql-commands/#example_4","title":"Example","text":"<pre><code>-- Grant permission\nGRANT SELECT, INSERT ON Employee TO user1;\n\n-- Revoke permission\nREVOKE INSERT ON Employee FROM user1;\n</code></pre>"},{"location":"mysql/sql-commands/#quick-summary-table","title":"\u2705 Quick Summary Table","text":"Type Full Form Purpose Examples DDL Data Definition Language Define database objects CREATE, ALTER, DROP, TRUNCATE DML Data Manipulation Language Modify data INSERT, UPDATE, DELETE DQL Data Query Language Query data SELECT TCL Transaction Control Language Manage transactions COMMIT, ROLLBACK, SAVEPOINT DCL Data Control Language Control access GRANT, REVOKE"},{"location":"playwright-Java/alerts-promt/","title":"9. Handling Dialogs, Alerts, and Prompts in Playwright (Java)","text":"<p>Web applications often use dialogs like Alerts, Confirms, and Prompts for user interaction. Playwright provides APIs to handle these dialogs by listening to the <code>dialog</code> event.</p>"},{"location":"playwright-Java/alerts-promt/#types-of-javascript-dialogs","title":"\u2705 Types of JavaScript Dialogs","text":"<ol> <li>Alert</li> <li>Simple message with OK button.</li> <li> <p>Example: <code>alert(\"This is an alert!\");</code></p> </li> <li> <p>Confirm</p> </li> <li>Message with OK and Cancel buttons.</li> <li> <p>Example: <code>confirm(\"Are you sure?\");</code></p> </li> <li> <p>Prompt</p> </li> <li>Message with input field + OK/Cancel buttons.</li> <li> <p>Example: <code>prompt(\"Enter your name:\");</code></p> </li> <li> <p>BeforeUnload</p> </li> <li>Triggered when a user tries to close or reload a page.</li> <li>Example: <code>window.onbeforeunload = () =&gt; true;</code></li> </ol>"},{"location":"playwright-Java/alerts-promt/#playwright-dialog-api","title":"\ud83d\udccc Playwright Dialog API","text":"<ul> <li>Event Listener for Dialog</li> </ul> <pre><code>page.onDialog(dialog -&gt; {\n    System.out.println(\"Dialog message: \" + dialog.message());\n    dialog.accept(); // or dialog.dismiss()\n});\n</code></pre> <ul> <li>Dialog Methods</li> <li><code>dialog.message()</code> \u2192 Get text of the dialog.</li> <li><code>dialog.type()</code> \u2192 Returns type (<code>alert</code>, <code>confirm</code>, <code>prompt</code>, <code>beforeunload</code>).</li> <li><code>dialog.accept([promptText])</code> \u2192 Accept the dialog (for prompt, send text).</li> <li><code>dialog.dismiss()</code> \u2192 Dismiss the dialog (Cancel).</li> </ul>"},{"location":"playwright-Java/alerts-promt/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class DialogsExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to sample page with dialogs\n            page.navigate(\"https://the-internet.herokuapp.com/javascript_alerts\");\n\n            // --- Handle Alert ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Alert Text: \" + dialog.message());\n                dialog.accept();\n            });\n            page.click(\"text=Click for JS Alert\");\n\n            // --- Handle Confirm (OK) ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Confirm Text: \" + dialog.message());\n                dialog.accept(); // choose OK\n            });\n            page.click(\"text=Click for JS Confirm\");\n\n            // --- Handle Confirm (Cancel) ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Confirm Text: \" + dialog.message());\n                dialog.dismiss(); // choose Cancel\n            });\n            page.click(\"text=Click for JS Confirm\");\n\n            // --- Handle Prompt with input ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"Prompt Text: \" + dialog.message());\n                dialog.accept(\"PlaywrightUser\"); // enter text\n            });\n            page.click(\"text=Click for JS Prompt\");\n\n            // --- Handle BeforeUnload ---\n            page.onceDialog(dialog -&gt; {\n                System.out.println(\"BeforeUnload triggered\");\n                dialog.accept();\n            });\n            page.evaluate(\"() =&gt; window.onbeforeunload = () =&gt; true;\");\n            page.reload();\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/alerts-promt/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Use <code>page.onDialog()</code> for handling dialogs globally (persistent listener).</li> <li>Use <code>page.onceDialog()</code> for handling a single occurrence.</li> <li>For prompt dialogs, always provide text inside <code>dialog.accept(\"yourText\")</code>.</li> <li>Playwright will auto-wait until dialog is shown before executing callback.</li> <li>If dialogs are not handled \u2192 tests will fail (dialogs block execution).</li> </ul> <p>\u2705 With these APIs, you can handle Alerts, Confirms, Prompts, and BeforeUnload dialogs in Playwright tests using Java.</p>"},{"location":"playwright-Java/checkbox-radio-button/","title":"7. Checkbox &amp; Radio Button in Playwright (Java)","text":"<p>Checkboxes and Radio buttons are common form elements used for binary selections (true/false, yes/no, option A/B). Playwright provides a clean API to handle these elements.</p>"},{"location":"playwright-Java/checkbox-radio-button/#key-playwright-methods","title":"\u2705 Key Playwright Methods","text":""},{"location":"playwright-Java/checkbox-radio-button/#1-locatorcheck","title":"1. <code>locator.check()</code>","text":"<ul> <li>Ensures the checkbox or radio button is checked.</li> <li>If it\u2019s already checked \u2192 does nothing.</li> <li>If it\u2019s disabled or hidden \u2192 Playwright waits until it\u2019s actionable.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#2-locatoruncheck","title":"2. <code>locator.uncheck()</code>","text":"<ul> <li>Ensures the checkbox is unchecked.</li> <li>Applicable only to checkboxes (not radio buttons).</li> <li>If already unchecked \u2192 does nothing.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#3-locatorischecked","title":"3. <code>locator.isChecked()</code>","text":"<ul> <li>Returns a boolean (<code>true/false</code>) if the checkbox or radio button is selected.</li> </ul>"},{"location":"playwright-Java/checkbox-radio-button/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class CheckboxRadioExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to sample page\n            page.navigate(\"https://the-internet.herokuapp.com/checkboxes\");\n\n            // \u2705 Locate checkbox\n            Locator checkbox1 = page.locator(\"//form[@id='checkboxes']/input[1]\");\n\n            // --- Check a checkbox ---\n            checkbox1.check();\n            System.out.println(\"Checkbox 1 checked: \" + checkbox1.isChecked());\n\n            // --- Uncheck a checkbox ---\n            checkbox1.uncheck();\n            System.out.println(\"Checkbox 1 checked after uncheck: \" + checkbox1.isChecked());\n\n            // \u2705 Radio button example\n            page.navigate(\"https://demoqa.com/radio-button\");\n\n            Locator yesRadio = page.locator(\"input[id='yesRadio']\");\n\n            // --- Select radio button ---\n            yesRadio.check();\n            System.out.println(\"Yes Radio selected: \" + yesRadio.isChecked());\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/checkbox-radio-button/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Radio buttons: You can only select one option in a group.</li> <li>Checkboxes: Can select multiple options unless restricted by form logic.</li> <li>Use <code>.isChecked()</code> to verify the state before performing an action if needed.</li> <li>Playwright automatically waits for the element to be visible, enabled, and ready for action.</li> </ul> <p>\u2705 With these methods, you can reliably handle checkboxes and radio buttons in Playwright tests using Java.</p>"},{"location":"playwright-Java/dropdown_handling/","title":"Playwright -- Handling Dropdowns (Java)","text":""},{"location":"playwright-Java/dropdown_handling/#1-classic-select-dropdown","title":"1\ufe0f\u20e3 Classic <code>&lt;select&gt;</code> Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;select id=\"country\"&gt;\n  &lt;option value=\"IN\"&gt;India&lt;/option&gt;\n  &lt;option value=\"US\"&gt;USA&lt;/option&gt;\n  &lt;option value=\"UK\"&gt;UK&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-select-by-value","title":"a) Select by Value","text":"<pre><code>page.locator(\"#country\").selectOption(\"IN\");  \n// Select India by value\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-select-by-label-visible-text","title":"b) Select by Label (Visible Text)","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setLabel(\"USA\"));  \n// Select USA by visible text\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-select-by-index","title":"c) Select by Index","text":"<pre><code>page.locator(\"#country\").selectOption(new SelectOption().setIndex(2));  \n// Select 3rd option (UK) \u2013 index starts from 0\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-select-multiple-values","title":"d) Select Multiple Values","text":"<pre><code>page.locator(\"#country\").selectOption(new String[]{\"IN\", \"US\"});  \n// Select India and USA (multi-select dropdowns only)\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#e-iterate-all-options-get-count","title":"e) Iterate All Options &amp; Get Count","text":"<pre><code>Locator options = page.locator(\"#country option\");\nint count = options.count();\nSystem.out.println(\"Total options in dropdown: \" + count);\n\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre> <ul> <li>Explanation:<ul> <li><code>count()</code> \u2192 total number of options.</li> <li><code>.nth(i).innerText()</code> \u2192 retrieves text of each option.</li> </ul> </li> </ul>"},{"location":"playwright-Java/dropdown_handling/#f-example-full-flow","title":"f) Example Full Flow","text":"<pre><code>// Select India by value\npage.locator(\"#country\").selectOption(\"IN\");\n\n// Select USA by label\npage.locator(\"#country\").selectOption(new SelectOption().setLabel(\"USA\"));\n\n// Select multiple (India &amp; UK)\npage.locator(\"#country\").selectOption(new String[]{\"IN\", \"UK\"});\n\n// Iterate and print all options\nLocator options = page.locator(\"#country option\");\nfor (int i = 0; i &lt; options.count(); i++) {\n    System.out.println(options.nth(i).innerText());\n}\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#2-auto-suggestion-custom-dropdown","title":"2\ufe0f\u20e3 Auto-suggestion / Custom Dropdown","text":"<p>HTML Example:</p> <pre><code>&lt;input id=\"searchCity\" type=\"text\" placeholder=\"Enter city\" /&gt;\n&lt;ul id=\"cityList\"&gt;\n  &lt;li&gt;New York&lt;/li&gt;\n  &lt;li&gt;London&lt;/li&gt;\n  &lt;li&gt;Delhi&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#a-type-to-filter-suggestions","title":"a) Type to Filter Suggestions","text":"<pre><code>page.locator(\"#searchCity\").fill(\"Del\");\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#b-click-on-desired-option","title":"b) Click on Desired Option","text":"<pre><code>page.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#c-full-auto-suggestion-flow","title":"c) Full Auto-suggestion Flow","text":"<pre><code>// Type in search box\npage.locator(\"#searchCity\").fill(\"Del\");\n\n// Wait for suggestion and click\npage.locator(\"#cityList li\", new Locator.LocatorOptions().setHasText(\"Delhi\")).click();\n</code></pre>"},{"location":"playwright-Java/dropdown_handling/#d-iterate-all-auto-suggestion-options-get-count","title":"d) Iterate All Auto-suggestion Options &amp; Get Count","text":"<pre><code>Locator cities = page.locator(\"#cityList li\");\nint totalCities = cities.count();\nSystem.out.println(\"Total suggestions: \" + totalCities);\n\nfor (int i = 0; i &lt; totalCities; i++) {\n    System.out.println(cities.nth(i).innerText());\n}\n</code></pre> <ul> <li>Retrieves all suggestions and their total count.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#e-tips-for-auto-suggestion-dropdowns","title":"e) Tips for Auto-suggestion Dropdowns","text":"<ul> <li>Use <code>fill()</code> instead of <code>type()</code> if you want instant input.</li> <li>Use <code>.locator(...).filter(...).click()</code> to select the correct     option.</li> <li>Playwright handles auto-waiting automatically.</li> </ul>"},{"location":"playwright-Java/dropdown_handling/#summary","title":"\u2705 Summary","text":"<ul> <li>Classic <code>&lt;select&gt;</code> dropdowns:<ul> <li><code>selectOption(\"value\")</code> \u2192 select by value.</li> <li><code>selectOption(new SelectOption().setLabel(\"...\"))</code> \u2192 select by     visible text.</li> <li><code>selectOption(new SelectOption().setIndex(i))</code> \u2192 select by     index.</li> <li><code>selectOption(new String[]{...})</code> \u2192 select multiple values.</li> <li>Iterate options with <code>.count()</code> &amp; <code>.nth()</code>.</li> </ul> </li> <li>Auto-suggestion / custom dropdowns:<ul> <li>Use <code>fill()</code> to type, then locate the suggestion and <code>click()</code>.</li> <li>Iterate options with <code>.count()</code> &amp; <code>.nth()</code>.</li> </ul> </li> <li>Pro tips:<ul> <li>Playwright auto-waits for dropdowns.</li> <li>Prefer semantic locators (<code>getByLabel</code>, <code>getByText</code>) for     stability.</li> </ul> </li> </ul>"},{"location":"playwright-Java/exceptions/","title":"Java Playwright \u2013 Common Exceptions and How to Handle Them","text":"<p>Playwright in Java provides powerful automation features, but you may encounter exceptions during execution. This guide lists the most common exceptions, their causes, and solutions with code snippets.</p>"},{"location":"playwright-Java/exceptions/#1-timeouterror","title":"1. TimeoutError","text":"<p>Cause: - An action (like <code>click</code>, <code>fill</code>, <code>waitForSelector</code>) did not complete within the default timeout (usually 30 seconds). - Element is not visible, attached, or ready for interaction.</p> <p>Solution: - Increase timeout using <code>setTimeout()</code> or pass custom timeout in action options. - Ensure element is visible before interacting.</p> <p>Code Example:</p> <pre><code>page.click(\"button#submit\", new Page.ClickOptions().setTimeout(10000)); // 10 sec timeout\n\n// Or set default timeout for the page\npage.setDefaultTimeout(15000);\n</code></pre>"},{"location":"playwright-Java/exceptions/#2-playwrightexception-generic-exception","title":"2. PlaywrightException (Generic Exception)","text":"<p>Cause: - Incorrect selectors (e.g., wrong CSS/XPath). - Performing actions on detached or invalid elements.  </p> <p>Solution: - Always validate selectors with <code>page.locator()</code> or <code>page.isVisible()</code>. - Use <code>waitForSelector()</code> before performing action.</p> <p>Code Example:</p> <pre><code>if (page.isVisible(\"input#username\")) {\n    page.fill(\"input#username\", \"sandesh\");\n} else {\n    System.out.println(\"Element not found!\");\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#3-elementhandleexception","title":"3. ElementHandleException","text":"<p>Cause: - Attempting to interact with a <code>Locator</code> or <code>ElementHandle</code> that is no longer attached to the DOM. - Example: Page refreshed or element re-rendered.</p> <p>Solution: - Re-locate the element before interaction. - Use <code>locator</code> API instead of <code>elementHandle</code> where possible (auto-handles re-attachment).</p> <p>Code Example:</p> <pre><code>Locator loginBtn = page.locator(\"#login\");\nloginBtn.click(); // safer than elementHandle\n\n// If using elementHandle\nElementHandle handle = page.querySelector(\"#login\");\nhandle.click(); // might fail if DOM changes\n</code></pre>"},{"location":"playwright-Java/exceptions/#4-downloadfailureexception","title":"4. DownloadFailureException","text":"<p>Cause: - Download interrupted, canceled, or file not generated. - Permissions issue writing file.</p> <p>Solution: - Ensure <code>waitForDownload()</code> is used properly. - Use <code>download.saveAs()</code> to explicitly save file to desired location.</p> <p>Code Example:</p> <pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a#downloadLink\");\n});\n\ndownload.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\file.txt\"));\n</code></pre>"},{"location":"playwright-Java/exceptions/#5-navigationexception","title":"5. NavigationException","text":"<p>Cause: - Page fails to navigate to a URL (e.g., network issues, invalid URL). - Timeout while waiting for page load.</p> <p>Solution: - Use <code>page.navigate()</code> with explicit timeout. - Add retries for flaky connections.</p> <p>Code Example:</p> <pre><code>page.navigate(\"https://example.com\", new Page.NavigateOptions().setTimeout(20000));\n</code></pre>"},{"location":"playwright-Java/exceptions/#6-websocketexception","title":"6. WebSocketException","text":"<p>Cause: - Playwright internally communicates with browser over WebSocket. - Exception occurs when connection is lost (browser crash, closed unexpectedly).</p> <p>Solution: - Restart browser context/session. - Add retry logic in test framework.</p> <p>Code Example:</p> <pre><code>try {\n    page.navigate(\"https://example.com\");\n} catch (PlaywrightException e) {\n    System.out.println(\"Browser disconnected. Restarting...\");\n    // re-launch browser\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#7-selectorresolutionexception","title":"7. SelectorResolutionException","text":"<p>Cause: - Invalid selector syntax (CSS or XPath). - Element does not exist.</p> <p>Solution: - Test selector validity in browser dev tools. - Use <code>page.locator()</code> instead of <code>page.querySelector()</code> for better debugging.</p> <p>Code Example:</p> <pre><code>Locator button = page.locator(\"button:has-text('Login')\");\nbutton.click();\n</code></pre>"},{"location":"playwright-Java/exceptions/#8-assertionerror","title":"8. AssertionError","text":"<p>Cause: - Assertions fail due to unexpected values. - Example: Page title mismatch.</p> <p>Solution: - Print actual vs expected values for debugging. - Use retries or waits if data loads asynchronously.</p> <p>Code Example:</p> <pre><code>String title = page.title();\nassert title.equals(\"Expected Title\") : \"Title mismatch! Actual: \" + title;\n</code></pre>"},{"location":"playwright-Java/exceptions/#9-filealreadyexistsexception","title":"9. FileAlreadyExistsException","text":"<p>Cause: - While saving downloads/screenshots, file already exists at the same path.</p> <p>Solution: - Save with a unique name using timestamp or UUID.</p> <p>Code Example:</p> <pre><code>String fileName = \"screenshot_\" + System.currentTimeMillis() + \".png\";\npage.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(fileName)));\n</code></pre>"},{"location":"playwright-Java/exceptions/#10-illegalstateexception-playwright-context","title":"10. IllegalStateException (Playwright Context)","text":"<p>Cause: - Trying to use closed browser/page/context. - Example: Performing action after calling <code>browser.close()</code>.</p> <p>Solution: - Ensure context/page is open before using. - Wrap in try-catch for cleanup.</p> <p>Code Example:</p> <pre><code>try {\n    page.click(\"#btn\");\n} catch (IllegalStateException e) {\n    System.out.println(\"Page is already closed.\");\n}\n</code></pre>"},{"location":"playwright-Java/exceptions/#summary","title":"\ud83d\udccc Summary","text":"Exception Cause Solution TimeoutError Action exceeds wait time Increase timeout, wait for selector PlaywrightException Generic errors Validate selectors, wait for elements ElementHandleException Detached elements Use <code>locator</code> API DownloadFailureException Download failed Use <code>waitForDownload()</code> NavigationException Navigation failed Add timeout/retry WebSocketException Browser connection lost Restart session SelectorResolutionException Invalid selector Validate selector syntax AssertionError Assertion failed Print debug info, add waits FileAlreadyExistsException File path already exists Save with unique names IllegalStateException Using closed context Check before use <p>\u2705 This document covers all major exceptions in Java Playwright, with their causes, solutions, and code snippets.</p>"},{"location":"playwright-Java/file-upload-download/","title":"Java Playwright \u2013 File Upload &amp; Download Examples","text":"<p>This guide explains how to handle File Upload and File Download in Java Playwright with code samples.</p>"},{"location":"playwright-Java/file-upload-download/#file-upload-concept","title":"\ud83d\udccc File Upload Concept","text":"<ul> <li>Playwright does not interact with the native OS file chooser.</li> <li>Instead, we use <code>setInputFiles()</code> to programmatically set files into <code>&lt;input type=\"file\"&gt;</code> elements.</li> <li>Supports single and multiple files.</li> </ul>"},{"location":"playwright-Java/file-upload-download/#upload-single-file","title":"\u2705 Upload Single File","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FileUploadSingle {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://www.w3schools.com/howto/howto_html_file_upload_button.asp\");\n\n            // Upload a single file\n            page.setInputFiles(\"input[type='file']\", \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test.txt\");\n\n            // Assertion (Check if file input has value)\n            String fileName = page.inputValue(\"input[type='file']\");\n            assert fileName.contains(\"test.txt\");\n\n            System.out.println(\"\u2705 Single File uploaded successfully\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#upload-multiple-files","title":"\u2705 Upload Multiple Files","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FileUploadMultiple {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://www.w3schools.com/howto/howto_html_file_upload_button.asp\");\n\n            // Upload multiple files\n            page.setInputFiles(\"input[type='file']\", new String[] {\n                \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test1.txt\",\n                \"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\test2.txt\"\n            });\n\n            // Assertion (Check both file names are uploaded)\n            String fileNames = page.inputValue(\"input[type='file']\");\n            assert fileNames.contains(\"test1.txt\") &amp;&amp; fileNames.contains(\"test2.txt\");\n\n            System.out.println(\"\u2705 Multiple Files uploaded successfully\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#file-download-concept","title":"\ud83d\udccc File Download Concept","text":"<ul> <li>Use <code>page.waitForDownload()</code> to capture the <code>Download</code> object.</li> <li>Save the downloaded file to a desired location using <code>download.saveAs()</code>.</li> </ul>"},{"location":"playwright-Java/file-upload-download/#file-download-example","title":"\u2705 File Download Example","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class FileDownloadExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://file-examples.com/index.php/sample-documents-download/\");\n\n            // Wait for download event\n            Download download = page.waitForDownload(() -&gt; {\n                page.click(\"a[href*='sample.doc']\"); // sample download link\n            });\n\n            // Save the file to desired location\n            download.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\sample.doc\"));\n\n            // Assertion (Check file is downloaded successfully)\n            assert download.path() != null;\n\n            System.out.println(\"\u2705 File downloaded to: \" + download.path());\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#handling-dynamic-filenames","title":"\ud83d\udd39 Handling Dynamic Filenames","text":"<p>If the downloaded file has a random or dynamic name, you can:</p> <pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a.download-link\");\n});\n\n// Save with a custom name regardless of original name\ndownload.saveAs(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Downloads\\\\myFile.docx\"));\n</code></pre>"},{"location":"playwright-Java/file-upload-download/#key-notes","title":"\ud83d\udccc Key Notes","text":"<ul> <li><code>setInputFiles()</code> works only on <code>&lt;input type=\"file\"&gt;</code> elements.</li> <li>Always use <code>waitForDownload()</code> to ensure the file is completely downloaded before accessing it.</li> <li>You can add assertions to verify file name, existence, or size.</li> </ul> <p>\u2705 This covers Single File Upload, Multiple File Upload with Assertions, and File Download Handling in Java Playwright.</p>"},{"location":"playwright-Java/handling-windows/","title":"11. Windows &amp; Tabs Handling in Playwright (Java)","text":"<p>In Playwright, handling multiple windows or tabs is a common scenario in web automation.\\ Playwright treats each new tab/window as a <code>Page</code> object.</p>"},{"location":"playwright-Java/handling-windows/#opening-a-new-window-tab","title":"\ud83d\udd39 Opening a New Window / Tab","text":"<p>When a link opens a new window or tab, Playwright can listen for it.</p> <pre><code>// Example: Click link that opens new tab/window\nPage newPage = page.waitForPopup(() -&gt; {\n    page.locator(\"a#openNewTab\").click();\n});\n\nSystem.out.println(\"New Page Title: \" + newPage.title());\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-window-by-title","title":"\ud83d\udd39 Switching Window by Title","text":"<p>Suppose you want to switch to a tab/window with title \"hellpword\".</p> <pre><code>for (Page p : page.context().pages()) {\n    if (p.title().equalsIgnoreCase(\"hellpword\")) {\n        System.out.println(\"Switched to page with title: \" + p.title());\n        p.bringToFront();   // Make it active\n        break;\n    }\n}\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-by-index-of-tab","title":"\ud83d\udd39 Switching by Index of Tab","text":"<p>Each window/tab is stored in a list using <code>context.pages()</code>.\\ You can switch by index position.</p> <pre><code>// Get all pages\nList&lt;Page&gt; allPages = page.context().pages();\n\n// Switch to second tab (index starts at 0)\nPage secondTab = allPages.get(1);\nsecondTab.bringToFront();\n\nSystem.out.println(\"Now on Tab: \" + secondTab.title());\n</code></pre>"},{"location":"playwright-Java/handling-windows/#switching-using-keyboard-tab-key","title":"\ud83d\udd39 Switching Using Keyboard (Tab Key)","text":"<p>Playwright supports keyboard actions.\\ If you want to simulate switching tabs using Ctrl + Tab, you can send key presses.</p> <pre><code>// Press CTRL + TAB to switch to next tab (browser level)\npage.keyboard().press(\"Control+Tab\");\n\n// Or Shift+Control+Tab to move backwards\npage.keyboard().press(\"Control+Shift+Tab\");\n</code></pre> <p>\u26a0\ufe0f Note: Keyboard tab switching works only if the browser supports shortcut handling.\\ Preferred way is using <code>context().pages()</code>.</p>"},{"location":"playwright-Java/handling-windows/#best-practices","title":"\ud83d\udd39 Best Practices","text":"<ul> <li>Always wait for popup when new tab/window opens.\\</li> <li>Use <code>bringToFront()</code> to activate the desired tab.\\</li> <li>Prefer switching by title or index, keyboard shortcuts are less     reliable.\\</li> <li>Clean up by closing unused tabs:\\</li> </ul> <pre><code>for (Page p : page.context().pages()) {\n    if (!p.title().equals(\"Main Page\")) {\n        p.close();\n    }\n}\n</code></pre> <p>\u2705 With these methods, you can reliably handle multiple windows/tabs in Playwright with Java.</p>"},{"location":"playwright-Java/iframes/","title":"8. Handling Frames &amp; iFrames in Playwright (Java)","text":"<p>Frames (<code>&lt;frame&gt;</code>) and iFrames (<code>&lt;iframe&gt;</code>) allow embedding another HTML document inside the main page. Playwright provides APIs to switch context into frames and interact with elements inside them.</p>"},{"location":"playwright-Java/iframes/#key-concepts","title":"\u2705 Key Concepts","text":""},{"location":"playwright-Java/iframes/#what-is-an-iframe","title":"What is an iFrame?","text":"<ul> <li>An <code>&lt;iframe&gt;</code> is an HTML tag that loads another HTML page inside the current page.</li> <li>Each frame has its own DOM and context, isolated from the main document.</li> <li>To interact with elements inside frames, you must switch to the correct frame.</li> </ul>"},{"location":"playwright-Java/iframes/#playwright-frame-api","title":"\ud83d\udccc Playwright Frame API","text":""},{"location":"playwright-Java/iframes/#1-access-all-frames","title":"1. Access All Frames","text":"<pre><code>page.frames(); // returns List&lt;Frame&gt;\n</code></pre> <ul> <li>Retrieves all frames in the page, including main frame + nested frames.</li> </ul>"},{"location":"playwright-Java/iframes/#2-access-frame-by-name-url","title":"2. Access Frame by Name / URL","text":"<pre><code>Frame frameByName = page.frame(\"frameName\");\nFrame frameByUrl = page.frameByUrl(\".*someFrameUrl.*\");\n</code></pre>"},{"location":"playwright-Java/iframes/#3-access-nested-frames-by-index","title":"3. Access Nested Frames by Index","text":"<pre><code>List&lt;Frame&gt; frames = page.frames();\nFrame firstFrame = frames.get(1);   // index 0 is always the main page\n</code></pre>"},{"location":"playwright-Java/iframes/#4-locate-frame-element-and-get-frame-object","title":"4. Locate Frame Element and Get Frame Object","text":"<pre><code>Locator frameLocator = page.frameLocator(\"iframe[name='frame1']\");\n</code></pre> <ul> <li>Useful for directly chaining locators into frame elements.</li> </ul>"},{"location":"playwright-Java/iframes/#example-code-java-playwright","title":"\ud83d\udccc Example Code (Java + Playwright)","text":"<pre><code>import com.microsoft.playwright.*;\n\npublic class FramesExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            // Navigate to page with frames\n            page.navigate(\"https://the-internet.herokuapp.com/nested_frames\");\n\n            // --- Get all frames ---\n            for (Frame f : page.frames()) {\n                System.out.println(\"Frame: \" + f.name() + \" | URL: \" + f.url());\n            }\n\n            // --- Switch to top frame (by name) ---\n            Frame topFrame = page.frame(\"frame-top\");\n            System.out.println(\"Inside Top Frame: \" + topFrame.name());\n\n            // --- Nested frame (by index) ---\n            Frame nestedLeft = topFrame.childFrames().get(0);\n            System.out.println(\"Inside Nested Left Frame: \" + nestedLeft.name());\n\n            // Example: get text inside nested frame\n            String text = nestedLeft.locator(\"body\").innerText();\n            System.out.println(\"Nested Frame Text: \" + text);\n\n            // --- Access frame by locator ---\n            Frame frameExample = page.frameLocator(\"iframe[name='mce_0_ifr']\").frame();\n            frameExample.locator(\"#tinymce\").fill(\"Hello inside iframe!\");\n\n            browser.close();\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/iframes/#notes","title":"\ud83d\udd11 Notes","text":"<ul> <li>Main Page vs Frames:</li> <li><code>page</code> \u2192 represents the main document.</li> <li> <p><code>frame</code> \u2192 represents an iframe\u2019s DOM.</p> </li> <li> <p>Indexing:</p> </li> <li><code>page.frames().get(0)</code> \u2192 main page.</li> <li> <p><code>page.frames().get(1+)</code> \u2192 child frames.</p> </li> <li> <p>Frame Locator vs Frame Object:</p> </li> <li><code>page.frame(\"name\")</code> \u2192 switch to a frame by name/id/URL.</li> <li> <p><code>page.frameLocator(\"selector\")</code> \u2192 chain locators inside an iframe without switching.</p> </li> <li> <p>Nested Frames:</p> </li> <li> <p>Use <code>.childFrames()</code> recursively to drill down multiple levels.</p> </li> <li> <p>Best Practice:</p> </li> <li>Prefer <code>frameLocator()</code> for simplicity when working with a single iframe.</li> <li>Use <code>frames()</code> list traversal for nested or multiple frame hierarchies.</li> </ul> <p>\u2705 With these techniques, you can reliably handle single, nested, and multiple frames in Playwright tests using Java.</p>"},{"location":"playwright-Java/interview-question/","title":"Java Playwright UI Testing Interview Questions &amp; Answers","text":"<p>This document contains 20+ real-time interview questions for Java Playwright UI Testing with in-depth explanations and example code snippets.</p>"},{"location":"playwright-Java/interview-question/#1-what-is-playwright-and-how-is-it-different-from-selenium","title":"1. What is Playwright, and how is it different from Selenium?","text":"<p>Answer: Playwright is an open-source automation library developed by Microsoft for web UI testing. Unlike Selenium, it supports: - Multiple browsers (Chromium, Firefox, WebKit) with a single API. - Auto-waiting for elements. - Network interception and mocking. - Headless and headful execution.</p> <pre><code>import com.microsoft.playwright.*;\n\npublic class LaunchBrowser {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n            page.navigate(\"https://example.com\");\n            System.out.println(page.title());\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#2-how-do-you-launch-a-browser-in-playwright-with-java","title":"2. How do you launch a browser in Playwright with Java?","text":"<pre><code>Playwright playwright = Playwright.create();\nBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\nPage page = browser.newPage();\npage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#3-how-does-playwright-handle-synchronization-auto-waiting","title":"3. How does Playwright handle synchronization (auto-waiting)?","text":"<p>Answer: Playwright automatically waits for elements to be actionable before performing actions like <code>click()</code> or <code>fill()</code>. Unlike Selenium, explicit waits are less frequently needed.</p> <pre><code>page.click(\"button#submit\"); // Playwright waits until the button is clickable\n</code></pre>"},{"location":"playwright-Java/interview-question/#4-how-do-you-select-elements-in-playwright","title":"4. How do you select elements in Playwright?","text":"<p>Answer: Selectors can be: - CSS selectors - XPath - Text selectors</p> <pre><code>page.click(\"text=Login\");\npage.fill(\"#username\", \"admin\");\npage.fill(\"input[name='password']\", \"pass123\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#5-how-do-you-handle-multiple-browser-contexts","title":"5. How do you handle multiple browser contexts?","text":"<p>Answer: Contexts allow isolated sessions, similar to incognito windows.</p> <pre><code>BrowserContext context1 = browser.newContext();\nPage page1 = context1.newPage();\npage1.navigate(\"https://example1.com\");\n\nBrowserContext context2 = browser.newContext();\nPage page2 = context2.newPage();\npage2.navigate(\"https://example2.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#6-how-do-you-handle-multiple-pagestabs","title":"6. How do you handle multiple pages/tabs?","text":"<pre><code>Page newPage = page.waitForPopup(() -&gt; page.click(\"a[target='_blank']\"));\nnewPage.waitForLoadState();\nSystem.out.println(newPage.title());\n</code></pre>"},{"location":"playwright-Java/interview-question/#7-how-do-you-handle-alerts-in-playwright","title":"7. How do you handle alerts in Playwright?","text":"<pre><code>page.onceDialog(dialog -&gt; {\n    System.out.println(\"Alert message: \" + dialog.message());\n    dialog.accept();\n});\npage.click(\"#trigger-alert\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#8-how-do-you-perform-assertions-in-playwright-with-java","title":"8. How do you perform assertions in Playwright with Java?","text":"<p>Playwright provides <code>Assertions</code>.</p> <pre><code>import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\n\nassertThat(page.locator(\"h1\")).hasText(\"Welcome\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#9-how-do-you-upload-files-in-playwright","title":"9. How do you upload files in Playwright?","text":"<pre><code>page.setInputFiles(\"input[type='file']\", Paths.get(\"C:/files/sample.txt\"));\n</code></pre>"},{"location":"playwright-Java/interview-question/#10-how-do-you-download-files-in-playwright","title":"10. How do you download files in Playwright?","text":"<pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a#downloadLink\");\n});\nSystem.out.println(\"Downloaded file: \" + download.path());\n</code></pre>"},{"location":"playwright-Java/interview-question/#11-how-do-you-handle-frames-in-playwright","title":"11. How do you handle frames in Playwright?","text":"<pre><code>Frame frame = page.frameByName(\"frameName\");\nframe.fill(\"#inputField\", \"Hello\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#12-how-do-you-take-screenshots-in-playwright","title":"12. How do you take screenshots in Playwright?","text":"<pre><code>page.screenshot(new Page.ScreenshotOptions().setPath(Paths.get(\"screenshot.png\")));\n</code></pre>"},{"location":"playwright-Java/interview-question/#13-how-do-you-handle-hover-actions-in-playwright","title":"13. How do you handle hover actions in Playwright?","text":"<pre><code>page.hover(\"button#menu\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#14-how-do-you-handle-drag-and-drop-in-playwright","title":"14. How do you handle drag and drop in Playwright?","text":"<pre><code>page.dragAndDrop(\"#source\", \"#target\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#15-how-do-you-emulate-devices-in-playwright","title":"15. How do you emulate devices in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setViewportSize(375, 667)\n    .setUserAgent(\"Mozilla/5.0 (iPhone; CPU iPhone OS 13_5 like Mac OS X)\"));\nPage mobilePage = context.newPage();\nmobilePage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#16-how-do-you-intercept-and-modify-network-requests","title":"16. How do you intercept and modify network requests?","text":"<pre><code>page.route(\"**/api/**\", route -&gt; {\n    route.fulfill(new Route.FulfillOptions().setBody(\"{\"status\":\"mocked\"}\"));\n});\npage.navigate(\"https://example.com/api/test\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#17-how-do-you-wait-for-specific-network-responses","title":"17. How do you wait for specific network responses?","text":"<pre><code>Response response = page.waitForResponse(\"**/api/data\", () -&gt; {\n    page.click(\"#fetchData\");\n});\nSystem.out.println(response.status());\n</code></pre>"},{"location":"playwright-Java/interview-question/#18-how-do-you-record-a-video-of-test-execution","title":"18. How do you record a video of test execution?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordVideoDir(Paths.get(\"videos/\")));\nPage videoPage = context.newPage();\nvideoPage.navigate(\"https://example.com\");\ncontext.close(); // saves video\n</code></pre>"},{"location":"playwright-Java/interview-question/#19-how-do-you-mock-geolocation-in-playwright","title":"19. How do you mock geolocation in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setGeolocation(37.7749, -122.4194)\n    .setPermissions(Arrays.asList(\"geolocation\")));\nPage page = context.newPage();\npage.navigate(\"https://maps.google.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#20-how-do-you-run-tests-in-parallel-with-playwright-testng","title":"20. How do you run tests in parallel with Playwright + TestNG?","text":"<p>Answer: Each test can run in its own browser context.</p> <pre><code>import org.testng.annotations.Test;\n\npublic class ParallelTest {\n    @Test\n    public void test1() {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n            BrowserContext context = browser.newContext();\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#21-how-do-you-integrate-playwright-with-cicd-pipelines","title":"21. How do you integrate Playwright with CI/CD pipelines?","text":"<p>Answer: - Install Playwright browsers in the pipeline. - Run tests using Maven/Gradle. - Publish results.</p> <p>Example GitHub Actions YAML:</p> <pre><code>name: Playwright Tests\n\non: [push]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Java\n        uses: actions/setup-java@v3\n        with:\n          java-version: '17'\n      - name: Install Playwright\n        run: mvn exec:java -Dexec.mainClass=\"com.microsoft.playwright.CLI\" -Dexec.args=\"install\"\n      - name: Run Tests\n        run: mvn test\n</code></pre>"},{"location":"playwright-Java/interview-question/#22-how-do-you-handle-cookies-in-playwright","title":"22. How do you handle cookies in Playwright?","text":"<pre><code>// Get cookies\nSystem.out.println(context.cookies());\n\n// Add cookies\ncontext.addCookies(Arrays.asList(new BrowserContext.AddCookiesOptions()\n    .setName(\"session_id\")\n    .setValue(\"12345\")\n    .setUrl(\"https://example.com\")));\n</code></pre>"},{"location":"playwright-Java/interview-question/#23-how-do-you-handle-authentication-in-playwright","title":"23. How do you handle authentication in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setHttpCredentials(\"username\", \"password\"));\nPage page = context.newPage();\npage.navigate(\"https://secure-site.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#24-how-do-you-handle-shadow-dom-elements","title":"24. How do you handle shadow DOM elements?","text":"<pre><code>page.locator(\"css=custom-element &gt;&gt;&gt; button\").click();\n</code></pre>"},{"location":"playwright-Java/interview-question/#25-how-do-you-handle-slow-networks-in-playwright","title":"25. How do you handle slow networks in Playwright?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setOffline(false));\ncontext.setDefaultNavigationTimeout(10000); // 10 seconds\n</code></pre>"},{"location":"playwright-Java/interview-question/#26-how-do-you-use-playwright-trace-viewer","title":"26. How do you use Playwright Trace Viewer?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setRecordHarPath(Paths.get(\"trace.zip\")));\nPage page = context.newPage();\npage.navigate(\"https://example.com\");\ncontext.close(); // trace saved\n</code></pre>"},{"location":"playwright-Java/interview-question/#27-how-do-you-mock-api-responses-in-playwright","title":"27. How do you mock API responses in Playwright?","text":"<pre><code>page.route(\"**/api/data\", route -&gt; {\n    route.fulfill(new Route.FulfillOptions()\n        .setStatus(200)\n        .setContentType(\"application/json\")\n        .setBody(\"{\"message\":\"Mocked Response\"}\"));\n});\n</code></pre>"},{"location":"playwright-Java/interview-question/#28-how-do-you-retry-failed-tests-in-playwright-with-java","title":"28. How do you retry failed tests in Playwright with Java?","text":"<p>Answer: Use TestNG retry analyzers or JUnit retry rules. Playwright itself retries only locator actions.</p> <pre><code>for (int i = 0; i &lt; 3; i++) {\n    try {\n        page.click(\"#submit\");\n        break;\n    } catch (Exception e) {\n        if (i == 2) throw e;\n    }\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#29-how-do-you-handle-basic-authentication-popups","title":"29. How do you handle basic authentication popups?","text":"<pre><code>BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n    .setHttpCredentials(\"user\", \"pass\"));\nPage page = context.newPage();\npage.navigate(\"https://auth-site.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#30-how-do-you-test-responsive-design-with-playwright","title":"30. How do you test responsive design with Playwright?","text":"<pre><code>Page mobilePage = browser.newContext(new Browser.NewContextOptions()\n    .setViewportSize(375, 667)).newPage();\nmobilePage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#31-how-do-you-test-web-accessibility-with-playwright","title":"31. How do you test web accessibility with Playwright?","text":"<p>Playwright integrates with <code>axe-core</code> for accessibility testing.</p> <pre><code>Object accessibilityTree = page.accessibility().snapshot();\nSystem.out.println(accessibilityTree.toString());\n</code></pre>"},{"location":"playwright-Java/interview-question/#32-how-do-you-handle-retries-and-flaky-tests","title":"32. How do you handle retries and flaky tests?","text":"<p>Answer: - Use <code>retry</code> in CI/CD pipelines. - Avoid <code>Thread.sleep()</code>, prefer auto-wait or <code>waitForSelector</code>. - Stabilize locators.</p> <pre><code>page.locator(\"button#login\").click(new Locator.ClickOptions().setTrial(true));\n</code></pre>"},{"location":"playwright-Java/interview-question/#33-how-do-you-run-playwright-tests-in-docker","title":"33. How do you run Playwright tests in Docker?","text":"<ul> <li>Create a Dockerfile with Java + Playwright installed.</li> <li>Run tests inside container.</li> </ul> <pre><code>FROM mcr.microsoft.com/playwright/java:v1.49.0-jammy\nCOPY . /app\nWORKDIR /app\nRUN mvn test\n</code></pre>"},{"location":"playwright-Java/interview-question/#34-how-do-you-debug-playwright-tests","title":"34. How do you debug Playwright tests?","text":"<ul> <li>Use <code>setHeadless(false)</code></li> <li>Use <code>page.pause()</code> to inspect manually.</li> </ul> <pre><code>page.pause(); // Opens Playwright Inspector\n</code></pre>"},{"location":"playwright-Java/interview-question/#35-how-do-you-handle-rate-limiting-in-api-calls-during-tests","title":"35. How do you handle rate-limiting in API calls during tests?","text":"<p>Answer: - Add delays using <code>page.waitForTimeout(ms)</code>. - Use network interception to simulate rate limits.</p> <pre><code>page.waitForTimeout(2000); // wait for 2 seconds\n</code></pre>"},{"location":"playwright-Java/interview-question/#36-how-do-you-capture-console-logs-in-playwright","title":"36. How do you capture console logs in Playwright?","text":"<pre><code>page.onConsoleMessage(msg -&gt; System.out.println(\"Console: \" + msg.text()));\npage.navigate(\"https://example.com\");\n</code></pre>"},{"location":"playwright-Java/interview-question/#37-how-do-you-capture-network-requests-and-responses","title":"37. How do you capture network requests and responses?","text":"<pre><code>page.onRequest(request -&gt; System.out.println(\"Request: \" + request.url()));\npage.onResponse(response -&gt; System.out.println(\"Response: \" + response.url()));\n</code></pre>"},{"location":"playwright-Java/interview-question/#38-how-do-you-handle-multiple-downloads-in-playwright","title":"38. How do you handle multiple downloads in Playwright?","text":"<pre><code>Download download = page.waitForDownload(() -&gt; {\n    page.click(\"a.download-all\");\n});\nSystem.out.println(download.path());\n</code></pre>"},{"location":"playwright-Java/interview-question/#39-how-do-you-assert-element-visibility","title":"39. How do you assert element visibility?","text":"<pre><code>import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;\nassertThat(page.locator(\"#logo\")).isVisible();\n</code></pre>"},{"location":"playwright-Java/interview-question/#40-how-do-you-run-playwright-tests-with-gradle","title":"40. How do you run Playwright tests with Gradle?","text":"<pre><code>plugins {\n    id 'java'\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation 'com.microsoft.playwright:playwright:1.49.0'\n    testImplementation 'org.testng:testng:7.9.0'\n}\n</code></pre>"},{"location":"playwright-Java/interview-question/#41-how-do-you-test-single-page-applications-spas-with-playwright","title":"41. How do you test single-page applications (SPAs) with Playwright?","text":"<p>Answer: Use <code>waitForLoadState(\"networkidle\")</code> to ensure all async calls are complete.</p> <pre><code>page.click(\"#loadData\");\npage.waitForLoadState(LoadState.NETWORKIDLE);\n</code></pre>"},{"location":"playwright-Java/interview-question/#42-how-do-you-manage-test-data-in-playwright","title":"42. How do you manage test data in Playwright?","text":"<p>Answer: - Use external files (JSON/CSV). - Use environment variables.</p> <pre><code>String username = System.getenv(\"TEST_USER\");\npage.fill(\"#username\", username);\n</code></pre>"},{"location":"playwright-Java/locator/","title":"Playwright Locators \u2013 Complete Guide (Java)","text":"<p>This guide covers all locator strategies in Playwright (Java) with examples, including ARIA roles and accessibility-based locators.</p>"},{"location":"playwright-Java/locator/#example-html","title":"\ud83d\udd39 Example HTML","text":"<pre><code>&lt;input type=\"text\" id=\"email\" class=\"form-control\" placeholder=\"Enter email\" /&gt;\n\n&lt;button id=\"submitBtn\" class=\"btn btn-primary\" type=\"submit\"&gt;Submit&lt;/button&gt;\n\n&lt;span class=\"text\"&gt;Title&lt;/span&gt;\n\n&lt;a href=\"/home\"&gt;Home&lt;/a&gt;\n</code></pre>"},{"location":"playwright-Java/locator/#locator-types","title":"\ud83d\udd39 Locator Types","text":""},{"location":"playwright-Java/locator/#1-by-id","title":"1. By ID","text":"<pre><code>page.locator(\"#email\");\npage.locator(\"#submitBtn\");\n</code></pre>"},{"location":"playwright-Java/locator/#2-by-class","title":"2. By Class","text":"<pre><code>page.locator(\".form-control\");\npage.locator(\".btn.btn-primary\");\n</code></pre>"},{"location":"playwright-Java/locator/#3-by-tag-name","title":"3. By Tag Name","text":"<pre><code>page.locator(\"button\");\npage.locator(\"input\");\n</code></pre>"},{"location":"playwright-Java/locator/#4-by-text-content","title":"4. By Text Content","text":"<pre><code>page.getByText(\"Submit\");\npage.getByText(\"Home\");\n</code></pre>"},{"location":"playwright-Java/locator/#5-by-role-aria-accessibility","title":"5. By Role (ARIA Accessibility)","text":"<p>ARIA roles are accessibility attributes in HTML that define the purpose of an element for screen readers. Playwright\u2019s <code>getByRole</code> uses the accessibility tree.</p> <pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\"));\npage.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName(\"Home\"));\n</code></pre> <ul> <li>Use <code>getByRole</code> for buttons, links, headings, checkboxes, etc.</li> <li>More stable than CSS/XPath since roles rarely change.</li> <li>Filters elements by their accessible name (text or ARIA label).</li> </ul> <p>Example of explicit role in HTML:</p> <pre><code>&lt;div role=\"button\" aria-label=\"Submit Form\"&gt;Submit&lt;/div&gt;\n</code></pre> <p>Rule of Thumb: Prefer <code>getByRole</code> if a semantic role exists; fallback to XPath/CSS otherwise.</p>"},{"location":"playwright-Java/locator/#6-by-placeholder","title":"6. By Placeholder","text":"<pre><code>page.getByPlaceholder(\"Enter email\");\n</code></pre>"},{"location":"playwright-Java/locator/#7-by-label","title":"7. By Label","text":"<pre><code>&lt;label for=\"email\"&gt;Email&lt;/label&gt;\n&lt;input id=\"email\" /&gt;\n</code></pre> <pre><code>page.getByLabel(\"Email\");\n</code></pre>"},{"location":"playwright-Java/locator/#8-by-alt-text","title":"8. By Alt Text","text":"<pre><code>&lt;img src=\"logo.png\" alt=\"Company Logo\"&gt;\n</code></pre> <pre><code>page.getByAltText(\"Company Logo\");\n</code></pre>"},{"location":"playwright-Java/locator/#9-by-title-attribute","title":"9. By Title Attribute","text":"<pre><code>&lt;button title=\"Click to submit\"&gt;Submit&lt;/button&gt;\n</code></pre> <pre><code>page.getByTitle(\"Click to submit\");\n</code></pre>"},{"location":"playwright-Java/locator/#10-by-css-attribute-selector","title":"10. By CSS Attribute Selector","text":"<pre><code>page.locator(\"input[type='text']\");\npage.locator(\"button[type='submit']\");\npage.locator(\"a[href='/home']\");\n</code></pre>"},{"location":"playwright-Java/locator/#11-by-xpath","title":"11. By XPath","text":"<pre><code>page.locator(\"//button[text()='Submit']\");\npage.locator(\"//input[@id='email']\");\n</code></pre>"},{"location":"playwright-Java/locator/#handling-multiple-matches","title":"\ud83d\udd39 Handling Multiple Matches","text":"<pre><code>&lt;ul&gt;\n  &lt;li class=\"item\"&gt;Apple&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Banana&lt;/li&gt;\n  &lt;li class=\"item\"&gt;Cherry&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>Locator items = page.locator(\".item\");\nint count = items.count();\n\nitems.nth(0);  // Apple\nitems.nth(1);  // Banana\nitems.nth(2);  // Cherry\n\nfor (int i = 0; i &lt; count; i++) {\n    System.out.println(items.nth(i).innerText());\n}\n\nLocator banana = page.locator(\".item\").filter(new Locator.FilterOptions().setHasText(\"Banana\"));\n\npage.locator(\".item\").first();\npage.locator(\".item\").last();\n</code></pre>"},{"location":"playwright-Java/locator/#summary","title":"\ud83d\udd39 Summary","text":"<ul> <li>Use semantic locators (<code>getByRole</code>, <code>getByLabel</code>, <code>getByPlaceholder</code>) for stable and accessibility-compliant tests.  </li> <li>Use CSS/XPath only if necessary.  </li> <li>Manage multiple elements using <code>.count()</code>, <code>.nth()</code>, <code>.first()</code>, <code>.last()</code>, <code>.filter()</code>.  </li> <li>ARIA roles ensure robust, readable, and accessible test selection.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/","title":"Playwright \u2013 Drag &amp; Drop and Keyboard Interactions (Java)","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#1-drag-and-drop","title":"1\ufe0f\u20e3 Drag and Drop","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#example-html","title":"Example HTML","text":"<pre><code>&lt;div id=\"source\" draggable=\"true\"&gt;Drag me&lt;/div&gt;\n&lt;div id=\"target\"&gt;Drop here&lt;/div&gt;\n</code></pre>"},{"location":"playwright-Java/mouse-keyboard-actions/#a-simple-drag-and-drop-using-dragto","title":"a) Simple Drag and Drop using <code>dragTo()</code>","text":"<pre><code>Locator source = page.locator(\"#source\");\nLocator target = page.locator(\"#target\");\n\nsource.dragTo(target);\n</code></pre> <ul> <li>Simulates dragging from source element to target element.</li> <li>Handles mouse events automatically.</li> <li>Auto-waits for elements to be visible.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-drag-and-drop-using-mouse-actions","title":"b) Drag and Drop Using Mouse Actions","text":"<pre><code>page.mouse().move(100, 200);  // Move to source coordinates\npage.mouse().down();           // Click and hold\npage.mouse().move(300, 400);  // Move to target coordinates\npage.mouse().up();             // Release\n</code></pre> <ul> <li>Useful if elements are custom draggable items not directly supported by <code>dragTo()</code>.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-iterating-multiple-draggable-items","title":"c) Iterating Multiple Draggable Items","text":"<pre><code>Locator items = page.locator(\".draggable\");\nint count = items.count();\nfor (int i = 0; i &lt; count; i++) {\n    items.nth(i).dragTo(page.locator(\"#target\"));\n}\n</code></pre> <ul> <li>Allows dragging multiple items to the target container.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-tips","title":"d) Tips","text":"<ul> <li>Use <code>dragTo()</code> for standard HTML5 draggable elements.</li> <li>Use <code>mouse()</code> actions for custom implementations.</li> <li>Combine with assertions to verify drop success.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#2-keyboard-interactions","title":"2\ufe0f\u20e3 Keyboard Interactions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-typing-text-fill-and-type","title":"a) Typing Text (<code>fill</code> and <code>type</code>)","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");  // Instant fill\npage.locator(\"#searchBox\").type(\"Automation\");  // Simulate typing character by character\n</code></pre> <ul> <li><code>fill()</code> sets value instantly.</li> <li><code>type()</code> triggers keyboard events.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-pressing-keys","title":"b) Pressing Keys","text":"<pre><code>page.locator(\"#searchBox\").press(\"Enter\");     // Press Enter key\npage.locator(\"#searchBox\").press(\"Tab\");       // Move focus to next element\n</code></pre> <ul> <li>Equivalent to <code>sendKeys(Keys.ENTER)</code> in Selenium.</li> <li>Triggers keypress events.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-keyboard-shortcuts-combination-keys","title":"c) Keyboard Shortcuts / Combination Keys","text":"<pre><code>page.keyboard().press(\"Control+A\");  // Select all text\npage.keyboard().press(\"Control+C\");  // Copy\npage.keyboard().press(\"Control+V\");  // Paste\n</code></pre> <ul> <li>Can simulate shortcuts for copy, paste, undo, etc.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-using-keyboardtype-for-raw-input","title":"d) Using <code>keyboard.type()</code> for Raw Input","text":"<pre><code>page.keyboard().type(\"Hello World\");  // Types text anywhere the focus is active\n</code></pre> <ul> <li>Useful when no input locator is available but you need to send keys globally.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#e-full-example-flow","title":"e) Full Example Flow","text":"<pre><code>// Focus search box\npage.locator(\"#searchBox\").click();\n\n// Fill and submit\npage.locator(\"#searchBox\").fill(\"Playwright\");\npage.locator(\"#searchBox\").press(\"Enter\");\n\n// Select all text and delete\npage.keyboard().press(\"Control+A\");\npage.keyboard().press(\"Backspace\");\n</code></pre>"},{"location":"playwright-Java/mouse-keyboard-actions/#tips","title":"\u2705 Tips","text":"<ul> <li>Playwright auto-waits for elements to be visible before keyboard interactions.</li> <li>Use <code>.press()</code> for single keys or shortcuts, <code>.type()</code> for simulating typing character by character.</li> <li>Drag &amp; Drop and Keyboard methods can be combined for complex flows (e.g., drag + keyboard shortcuts).</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#3-mouse-actions","title":"3\ufe0f\u20e3 Mouse Actions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-click","title":"a) Click","text":"<pre><code>Locator button = page.locator(\"#submitBtn\");\nbutton.click();\n</code></pre> <ul> <li>Simulates a single left mouse click on the element.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-double-click","title":"b) Double Click","text":"<pre><code>Locator textBox = page.locator(\"#inputBox\");\ntextBox.dblclick();\n</code></pre> <ul> <li>Selects text or activates default double-click behavior.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-hover","title":"c) Hover","text":"<pre><code>Locator menu = page.locator(\"#menu\");\nmenu.hover();\n</code></pre> <ul> <li>Moves mouse over the element (useful for dropdowns, tooltips).</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-move-mouse","title":"d) Move Mouse","text":"<pre><code>page.mouse().move(200, 300);\n</code></pre> <ul> <li>Moves mouse pointer to specific screen coordinates.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#e-mouse-down-and-up","title":"e) Mouse Down and Up","text":"<pre><code>page.mouse().move(100, 200); // Move to element\npage.mouse().down();         // Press and hold mouse button\npage.mouse().up();           // Release mouse button\n</code></pre> <ul> <li>Useful for drag-and-drop or click-and-hold actions.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#f-click-at-coordinates","title":"f) Click at Coordinates","text":"<pre><code>page.mouse().click(150, 250);\n</code></pre> <ul> <li>Clicks at absolute screen coordinates, bypassing locators.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#g-right-click","title":"g) Right Click","text":"<pre><code>Locator element = page.locator(\"#contextMenu\");\nelement.click(new Locator.ClickOptions().setButton(MouseButton.RIGHT));\n</code></pre> <ul> <li>Opens context menus.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#4-advanced-keyboard-actions","title":"4\ufe0f\u20e3 Advanced Keyboard Actions","text":""},{"location":"playwright-Java/mouse-keyboard-actions/#a-type-text","title":"a) Type Text","text":"<pre><code>page.keyboard().type(\"Hello\");\n</code></pre> <ul> <li>Types text wherever the focus is set.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#b-press-enter","title":"b) Press Enter","text":"<pre><code>page.keyboard().press(\"Enter\");\n</code></pre> <ul> <li>Simulates pressing Enter key.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#c-key-down-and-key-up","title":"c) Key Down and Key Up","text":"<pre><code>page.keyboard().down(\"Shift\");   // Hold Shift\npage.keyboard().up(\"Shift\");     // Release Shift\n</code></pre> <ul> <li>Useful for combinations like Shift+Click.</li> </ul>"},{"location":"playwright-Java/mouse-keyboard-actions/#d-sequential-typing","title":"d) Sequential Typing","text":"<pre><code>Locator field = page.locator(\"#username\");\nfield.pressSequentially(\"Playwright\");\n</code></pre> <ul> <li>Types text character by character into a field (human-like typing).</li> </ul>"},{"location":"playwright-Java/page-navigation-actions/","title":"\ud83c\udf10 Playwright Java \u2013 Navigation Actions","text":"<p>This document explains all navigation-related actions available in Java Playwright with examples.</p>"},{"location":"playwright-Java/page-navigation-actions/#1-pagenavigatehttpsexamplecom","title":"1. <code>page.navigate(\"https://example.com\")</code>","text":"<p>\ud83d\udc49 Navigates the browser to the given URL. - Waits until the page is loaded (<code>load</code> event by default). - Supports additional options like timeout, waiting for specific load states, etc.  </p> <p>Example:</p> <pre><code>Page page = context.newPage();\npage.navigate(\"https://example.com\");\n</code></pre> <p>With options (wait until DOM content loaded):</p> <pre><code>page.navigate(\"https://example.com\",\n    new Page.NavigateOptions().setWaitUntil(LoadState.DOMCONTENTLOADED));\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#2-pagegoback","title":"2. <code>page.goBack()</code>","text":"<p>\ud83d\udc49 Simulates the browser back button. - Goes to the previous page in the history. - Returns a <code>Response</code> object if navigation is successful, or <code>null</code> if there\u2019s no history.  </p> <p>Example:</p> <pre><code>page.navigate(\"https://example.com\");\npage.navigate(\"https://google.com\");\n\n// Go back to example.com\npage.goBack();\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#3-pagegoforward","title":"3. <code>page.goForward()</code>","text":"<p>\ud83d\udc49 Simulates the browser forward button. - Moves forward in the history if available. - Returns a <code>Response</code> object or <code>null</code> if no forward entry exists.  </p> <p>Example:</p> <pre><code>page.goBack();     // goes to example.com\npage.goForward();  // goes to google.com again\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#4-pagereload","title":"4. <code>page.reload()</code>","text":"<p>\ud83d\udc49 Reloads the current page. - Similar to pressing the refresh button. - By default waits for the <code>load</code> event, but you can customize wait states.  </p> <p>Example:</p> <pre><code>page.reload();\n</code></pre> <p>With options:</p> <pre><code>page.reload(new Page.ReloadOptions().setWaitUntil(LoadState.DOMCONTENTLOADED));\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#5-pagetitle","title":"5. <code>page.title()</code>","text":"<p>\ud83d\udc49 Gets the title of the current page (the <code>&lt;title&gt;</code> tag content). - Returns a <code>String</code>.  </p> <p>Example:</p> <pre><code>String title = page.title();\nSystem.out.println(\"Page title is: \" + title);\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#6-pageurl","title":"6. <code>page.url()</code>","text":"<p>\ud83d\udc49 Returns the current page URL as a <code>String</code>.  </p> <p>Example:</p> <pre><code>System.out.println(\"Current URL: \" + page.url());\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#7-pagecontent","title":"7. <code>page.content()</code>","text":"<p>\ud83d\udc49 Returns the full HTML content of the page as a <code>String</code>. - Useful for debugging, parsing, or verifying HTML.  </p> <p>Example:</p> <pre><code>String html = page.content();\nSystem.out.println(html);\n</code></pre>"},{"location":"playwright-Java/page-navigation-actions/#quick-notes","title":"\ud83d\udd11 Quick Notes","text":"<ul> <li><code>navigate</code>, <code>goBack</code>, <code>goForward</code>, and <code>reload</code> return a <code>Response</code> object \u2192 you can check status codes, headers, etc.  </li> <li><code>title</code>, <code>url</code>, and <code>content</code> return String values \u2192 handy for validations in tests.  </li> <li>All navigation methods can take optional parameters like timeout and waitUntil (<code>load</code>, <code>domcontentloaded</code>, <code>networkidle</code>).  </li> </ul>"},{"location":"playwright-Java/playwright-interaction/","title":"Playwright Interactions \u2013 Input &amp; Buttons (Java)","text":""},{"location":"playwright-Java/playwright-interaction/#1-typing-entering-text-into-input-boxes","title":"1\ufe0f\u20e3 Typing / Entering Text into Input Boxes","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"searchBox\")).sendKeys(\"Playwright\");\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-using-fill","title":"a) Using <code>fill()</code>","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\n</code></pre> <ul> <li>What it does: Clears any existing text and sets the new value.</li> <li>Auto-waiting: Waits until the element is visible and enabled.</li> <li>Best for: Setting values directly in forms.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-using-type","title":"b) Using <code>type()</code>","text":"<pre><code>page.locator(\"#searchBox\").type(\"Playwright\");\n</code></pre> <ul> <li>What it does: Types character by character, simulating real user typing.</li> <li>Difference from <code>fill()</code>: </li> <li><code>fill()</code> instantly sets the value.  </li> <li><code>type()</code> simulates typing and triggers keyboard events.  </li> <li>Best for: Autocomplete, search boxes, or typing behavior testing.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-pressing-keys","title":"c) Pressing Keys","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");\npage.locator(\"#searchBox\").press(\"Enter\");\n</code></pre> <ul> <li>Equivalent to: <code>sendKeys(Keys.ENTER)</code> in Selenium.</li> <li>Use case: Submitting forms via keyboard.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#d-example-full-search-box-flow","title":"d) Example Full Search Box Flow","text":"<pre><code>page.locator(\"#searchBox\").fill(\"Playwright\");  // Type text instantly\npage.locator(\"#searchBox\").press(\"Enter\");      // Submit by Enter key\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#difference-between-fill-and-type","title":"Difference Between <code>fill()</code> and <code>type()</code>","text":"Feature <code>fill()</code> <code>type()</code> Action Sets value instantly Types character by character Auto-clear Yes, clears existing text No, appends to existing text unless cleared manually Speed Fast Slower, simulates typing Events triggered Minimal Triggers keypress, input events Best for Form filling Autocomplete, typing simulation, keyboard events"},{"location":"playwright-Java/playwright-interaction/#2-clicking-on-buttons","title":"2\ufe0f\u20e3 Clicking on Buttons","text":"<p>Selenium Equivalent:</p> <pre><code>driver.findElement(By.id(\"submitBtn\")).click();\n</code></pre>"},{"location":"playwright-Java/playwright-interaction/#a-simple-click","title":"a) Simple Click","text":"<pre><code>page.locator(\"#submitBtn\").click();\n</code></pre> <ul> <li>Waits automatically for the button to be visible and enabled.</li> <li>No need for <code>Thread.sleep()</code> or explicit waits.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#b-click-by-text","title":"b) Click by Text","text":"<pre><code>page.getByText(\"Submit\").click();\n</code></pre> <ul> <li>Finds element by visible text.</li> <li>Useful if ID or class is not available.</li> </ul>"},{"location":"playwright-Java/playwright-interaction/#c-click-by-role-aria","title":"c) Click by Role (ARIA)","text":"<pre><code>page.getByRole(AriaRole.BUTTON, new Page.GetByRoleOptions().setName(\"Submit\")).click();\n</code></pre> <ul> <li>Uses accessibility info (semantic role).</li> <li>Very stable; less likely to break if HTML changes.</li> <li>Recommended for modern accessible web apps.</li> </ul>"},{"location":"playwright-Java/screenshot/","title":"Java Playwright \u2013 Screenshots &amp; Videos Examples","text":"<p>This guide explains how to handle Screenshots and Videos in Java Playwright with practical code examples.</p>"},{"location":"playwright-Java/screenshot/#screenshots-in-playwright","title":"\ud83d\udcf8 Screenshots in Playwright","text":""},{"location":"playwright-Java/screenshot/#full-page-screenshot","title":"\u2705 Full Page Screenshot","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class FullPageScreenshot {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Capture full page screenshot\n            page.screenshot(new Page.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\fullpage.png\"))\n                .setFullPage(true));\n\n            System.out.println(\"\u2705 Full page screenshot captured\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#element-screenshot","title":"\u2705 Element Screenshot","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class ElementScreenshot {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Take screenshot of a specific element\n            Locator heading = page.locator(\"h1\");\n            heading.screenshot(new Locator.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\element.png\")));\n\n            System.out.println(\"\u2705 Element screenshot captured\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#screenshot-after-assertion","title":"\u2705 Screenshot After Assertion","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class ScreenshotWithAssertion {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n            Page page = browser.newPage();\n\n            page.navigate(\"https://example.com\");\n\n            // Assertion\n            String title = page.title();\n            assert title.contains(\"Example\");\n\n            // Capture screenshot after validation\n            page.screenshot(new Page.ScreenshotOptions()\n                .setPath(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\assertion.png\")));\n\n            System.out.println(\"\u2705 Screenshot captured after assertion\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#videos-in-playwright","title":"\ud83c\udfa5 Videos in Playwright","text":""},{"location":"playwright-Java/screenshot/#record-video-for-a-single-page","title":"\u2705 Record Video for a Single Page","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class RecordVideoExample {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\n\n            // Enable video recording when creating context\n            BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n                .setRecordVideoDir(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\videos\"))\n                .setRecordVideoSize(1280, 720));\n\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n            page.click(\"a\"); // some action\n\n            // Close context to ensure video is saved\n            context.close();\n\n            System.out.println(\"\u2705 Video recorded and saved\");\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#record-video-for-each-test-dynamic-naming","title":"\u2705 Record Video for Each Test (Dynamic Naming)","text":"<pre><code>import com.microsoft.playwright.*;\nimport java.nio.file.Paths;\n\npublic class RecordVideoDynamicName {\n    public static void main(String[] args) {\n        try (Playwright playwright = Playwright.create()) {\n            Browser browser = playwright.chromium().launch();\n\n            // Set folder where videos will be stored\n            BrowserContext context = browser.newContext(new Browser.NewContextOptions()\n                .setRecordVideoDir(Paths.get(\"C:\\\\Users\\\\Sandesh\\\\Desktop\\\\videos\"))\n                .setRecordVideoSize(1920, 1080));\n\n            Page page = context.newPage();\n            page.navigate(\"https://example.com\");\n\n            // Perform some actions\n            page.click(\"a\");\n\n            // Retrieve video path after context closes\n            context.close();\n\n            for (Page p : context.pages()) {\n                System.out.println(\"Video Path: \" + p.video().path());\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"playwright-Java/screenshot/#key-notes","title":"\ud83d\udccc Key Notes","text":"<ul> <li>Screenshots:</li> <li>Use <code>page.screenshot()</code> for full page.</li> <li>Use <code>locator.screenshot()</code> for specific elements.</li> <li> <p>Can be combined with assertions for debugging.</p> </li> <li> <p>Videos:</p> </li> <li>Videos are recorded at the context level (not page level).</li> <li>Use <code>setRecordVideoDir()</code> to specify folder for saving videos.</li> <li>Close the context (<code>context.close()</code>) to ensure videos are written to disk.</li> <li>Use <code>p.video().path()</code> to get the file path of the recorded video.</li> </ul> <p>\u2705 This covers Full Page Screenshots, Element Screenshots, Assertion-based Screenshots, and Video Recording Scenarios in Java Playwright.</p>"}]}